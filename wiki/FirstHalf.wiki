#summary First half of Russian AI Mind
#labels source

{{{
<html lang="ru">
<head>
<title>Russian artificial intelligence qua Technological Singularity</title>
<meta http-equiv="content-type" content="text/html; charset=windows-1251" />
<meta name="description"
 content="Russian artificial intelligence in JavaScript for MSIE" />
<meta name="keywords" 
 content="AI, Cyrillic, Dushka, artificial intelligence, Mentifex" />
<script language="JavaScript"> 
var abc = "";  // AudBuffer() transfer character; 4jan2012
var abort = false;
var act = 0;
var actbase = 0;
var actran = 0;  // psi-decay holder of also-ran act-levels; 14may2011
var anset = 0;  // Set "an" before a vowel at start of noun.
var apb = "";
var artnum = 0;  // article num(ber) as parameter for EnArticle; 6nov2011
var associand = "";
var aud = 0; // 5apr2010
var aud0 = "";
var audbase = 0;  // recall-vector for VerbGen(); 18jan2012
var auddata = ("<b>" + "Auditory memory nodes" + "<\/b>" + "<BR>");
auddata += ("krt pho act pov beg ctu audpsi");  // 8dec2009
var audjuste = 0;
var audme = 0;
var audpsi = 0; // 6dec2009 de-globalizing the "psi" variable 
var audrec = 0; // 8dec2009 Replaces "psi" in AudRecog module.
var audrun = 0; // Counter of loops through AudRecog(); 7jul2010 
var audstop = 0; // Flag to stop SpeechAct after one word; 7jul2010
var b01 = "";  // for OutBuffer();  4jan2012
var b02 = "";  // for OutBuffer();  4jan2012
var b03 = "";  // for OutBuffer();  4jan2012
var b04 = "";  // for OutBuffer();  4jan2012
var b05 = "";  // for OutBuffer();  4jan2012
var b06 = "";  // for OutBuffer();  4jan2012
var b07 = "";  // for OutBuffer();  4jan2012
var b08 = "";  // for OutBuffer();  4jan2012
var b09 = "";  // for OutBuffer();  4jan2012
var b10 = "";  // for OutBuffer();  4jan2012
var b11 = "";  // for OutBuffer();  4jan2012
var b12 = "";  // for OutBuffer();  4jan2012
var b13 = "";  // for OutBuffer();  4jan2012
var b14 = "";  // for OutBuffer();  4jan2012
var b15 = "";  // for OutBuffer();  4jan2012
var b16 = "";  // for OutBuffer(); 12jan2012
var beact = 0;  // for discrimination during BeVerb; 13aug2010
var beg = 0;
var bias = 5;
var binc = 0;  // "b" increment for AudBuffer; 19jan2012
var brain = true;
var brevity = 0;
var btw = "Rejuvenating...";
var c = "";
var c01 = "";  // for AudBuffer();  4jan2012
var c02 = "";  // for AudBuffer();  4jan2012
var c03 = "";  // for AudBuffer();  4jan2012
var c04 = "";  // for AudBuffer();  4jan2012
var c05 = "";  // for AudBuffer();  4jan2012
var c06 = "";  // for AudBuffer();  4jan2012
var c07 = "";  // for AudBuffer();  4jan2012
var c08 = "";  // for AudBuffer();  4jan2012
var c09 = "";  // for AudBuffer();  4jan2012
var c10 = "";  // for AudBuffer();  4jan2012
var c11 = "";  // for AudBuffer();  4jan2012
var c12 = "";  // for AudBuffer();  4jan2012
var c13 = "";  // for AudBuffer();  4jan2012
var c14 = "";  // for AudBuffer();  4jan2012
var c15 = "";  // for AudBuffer();  4jan2012
var c16 = "";  // for AudBuffer();  4jan2012
var caller = "none";
var casus = "0";
var city = 0;
// var cns = 768;  // prevent bog-down; 15oct2010
var cns = 1024;  // make room for thought; 8sep2012
var coda = 128;
var cognum = 0;  // grammatical number of cogpsi; 27oct2011
var cogpsi = 0;  // new noun being learned; 18oct2011
var cogpsinum = 0;  // non-volatile for WhatBe; 18oct2011
var conj = 0;
var ctu = 1;
var cyct = 0;
var danger = true;
var dba = 0;  // case for nouns; person for verbs;  4jan2012
var defact = 0;  // default activation for NounPhrase; 25oct2011
var defartcon = 0;  // definite article condition; 19apr2011
var defcon = 0;  // for KbTraversal to override NounAct; 17nov2010
var detour = 0;
var dialog = "";
var dirobj = 0;
var dob = new Date();
var edge = 0;
var endata = ("<b>" + "English lexical fibers" + "<\/b>" + "<BR>");
endata += ("krt nen act num mfn dba fex pos fin aud"); // 4jan2012
var engram = "";
var enx = 0;
var en0 = 0; // "nen" for "n(umber)" in "En(glish)"; 4apr2010
var en1 = 0; // "act(ivation)" level; 4apr2010
var en2 = 0; // "num(ber)" since 12apr09B.html; 4apr2010
var en3 = 0; // "mfn" being introduced as gender flag; 4apr2010
var en4 = 0; // "dba" being introduced as case or person; 4jan2012
var en5 = 0; // "fex" fiber-out from Psi array; 4apr2010; 4jan2012
var en6 = 0; // "pos" part-of-speech flag; 4apr2010; 4jan2012
var en7 = 0; // "fin" fiber-in to Psi array; 4apr2010; 4jan2012
var en8 = 0; // "aud" recall-vector onset-tag; 4apr2010; 4jan2012
var eot = 0;
var equity = 0;
var fex = 0;
var fin = 0;
var firstword = 0;  // for identifying input of a query; 22aug2011
var flex1 = "";  // first inflection phoneme; 14sep2011
var flex2 = "";  // second inflection phoneme; 14sep2011
var flex3 = "";  // third inflection phoneme; 14sep2011
var freedom = true;
var fyi = 0;
var gencon = 0;  // status-con flag when calling VerbGen; 19jan2012
var ghost = 0;
var glot = 1;  // flag for which language to think in; 9jul2011
// var greet = 10;  // greeting-trigger; 17nov2010
var greet = 5;  // for speedier testing; 29oct2011
var hardcopy = false;
var holdaud = 0;
var html = "";
var i = 0;
var img = "xoxoxoxox";
var inbuffer = "";
var indefartcon = 0;  // indefinite article condition; 19apr2011
var indefmust = 0;  // force saying of "A" or "AN"; 23oct2011
// var inert = 0;
// var inert = 1;  // Until user presses a key; 20jul2011
var inert = 0;  // for quick asking of a cogpsi question; 23oct2011
var inhibcon = 0;  // flag for inhibition in InStantiate; 27oct2011
var instnum = 0;  // instantiation number for immediate or delayed use )
var j = 0;
var jrt = 0;
var jux = 0;
var kbcon = 0;  // flag for awaiting a yes-or-no answer; 29jun2011
var kbtv = 0;  // for use in KbTraversal; 13aug2010
var kbyn = 0;  // holds kbtv values for asking Y/N 30jun2011
var krt = 0;
var lastpho = 0; // to avoid extra "S" on verbs; 2sep2010
var lastword = false;
var len = 0;
var lexact = 0;
var life = true;
var lurk = 0;  // counter to activate initial thinking; 29sep2010
var maxbeact = 0; // to prevent BeVerb from calling AskUser; 16sep2010
var mfn = 0;  // 2apr2010 for En(glish) gender flag.
var mfnflag = 0;  // gender flag to cause a who-query; 3aug2011
var midway = 0;  // 22aug2011
var monopsi = 0;
var moot = 0;  // flag to prevent associations in DO-queries; 22aug2011
var morphpsi = 0;
var motjuste = "";
var muse = 1;
var nacpsi = 0;  // noun-activand psi-concept for NounAct; 15sep2012
var negjux = 0;  // flag for 12=NOT juxtaposed to a verb; 13oct2011
var nen = 0;
var nlt = 5; 
var node = 0;
// var nonce = 1;
var nonce = 538;  // = vault; to speed up Diagnostics; 21sep2012
var nounaud = 0;
var nouncall = 0;  // Try not to show articles as subjects; 21may2011
var nounduck = 0;
var nounlock = 0;  // for a verb to lock onto a seq-noun; 13oct2011
var nounval = 0;
var nphrnum = 0;
var nphrpos = 0;  // for testing in EnCog; 13aug2010
var nru = 0;  // Number of Russian concept; 18dec2011; 5jan2012
var num = 0;
var numflag = 0;  // for EnArticle() 1oct2010
var numsubj = 0;  // for number of subject; 14jun2011
var objold = 0; // a test for optimizing slosh-over; 18oct2010
var obstat = 0;
var oldact = 0;
var oldpos = 0;
var oldpsi = 0;
var onset = 0;
var ordo = 0;
var origin = "";
var output = "";
var pho = "";
var phodex = 0;  // pho-index for AudBuffer(); 4jan2012
var pos = 0;
var posflag = 0;  // AskUser discriminand; 13aug2010
var pov = "#";
var prc = 0;  // possible shortener for "provrec"; 24jan2012
var pre = 0;
var precand = 0;
var predflag = 0;  // indicates predicate nominative; 16sep2010
var prejux = 0;  // previous jux to carry NOT to verb; 24jul2011
var prepsi = 0;  // for deglobalizing "pre" in SpreadAct(); 16sep2010
var preset = 0;
var presubj = 0;
var preverb = 0;
var preview = "";
var prevpsi = 0;  // for InStantiate to cancel imputed BeVerb; 14feb2012
var prevtag = 0;
var provrec = 0;  // provisional recognition in AudRecog; 15jan2012
var prox1 = 0;  // first proximate concept of input cluster; 14sep2011
var prox2 = 0;  // for determining association among engrams; 14sep2011
var prox3 = 0;  // for disparate reactivation in ReActivate; 14sep2011
var proxcon = 0;  // flag to indicate usage of prox variables; 14sep2011
var prsn = 0;  // 1st, 2nd, 3rd person; 2sep2010
var psi = 0;
var psi0 = 0;
var psi1 = 0;
var psi8 = 0;
var psibase = 0;
var psidata = ("<b>" + "Psi mindcore concepts" + "<\/b>" + "<BR>");
psidata += ("krt psi act num jux pre pos tqv seq rux"); // 21jan2012
var putnum = 0;  // putative num(ber) for subj-verb agreement; 24oct2011
var questype = 0;
var quiet = true;
var quobj = 0;  // query-object for yes-or-no questions; 22jun2011
var qus = 0;  // provisional query-subject in advance of queries
var qusub = 0; // query subject in more readable code; 2oct2010
var qusubnum = 0;  // num(ber) of query-subject; 27oct2011
var quverb = 0;  // query-verb for yes-or-no questions; 22jun2011
var recnum = 0;  // recognized number of a recognized word 20jul2011
var recogcon = false;  // for AudInput to passim-ize audpsi; 15jan2012
var recon = 0;
var residuum = 0;
var rjc = 0;
var rsvp = 1000;
var rudata = ("<b>" + "Russian lexical fibers" + "<\/b>" + "<BR>");
rudata += ("krt nru act num mfn dba fex pos fin aud"); // 17jan2012
var rux = 0;  // transfer from deep concept to Russian lexicon; 22dec2011
var ru0 = 0; // "nru" for "n(umber)" in Russian; 5jan20121
var ru1 = 0; // "act(ivation)" level; 5apr2012
var ru2 = 0; // "num(ber)" 5jan2012
var ru3 = 0; // "mfn" male-female-neuter gender flag; 5jan2012
var ru4 = 0; // "dba" being introduced as case or person; 4jan2012
var ru5 = 0; // "fex" fiber-out from Psi array; 5jan2012
var ru6 = 0; // "pos" part-of-speech flag; 5jan2012
var ru7 = 0; // "fin" fiber-in to Psi array; 5jan2012
var ru8 = 0; // "aud" recall-vector onset-tag; 5jan2012
var seq = 0;
var seq5aud = 0;  // being replaced by "seq7aud"; 13oct2011
var seq7aud = 0;  // auditory engram for psi7 "seq"; 13oct2011
var seq7enx = 0;  // SpreadAct(): for enLexicon search; 13oct2011
var seqneed = 0;  // noun/pronoun or verb needed as a "seq"; 4oct2011
var seqpos = 0;  // "seq" concept part-of-speech; 4oct2011
var seqpsi = 0;  // for deglobalizing "seq" in SpreadAct(); 16sep2010
var seqseek = 0;  // possible replacement for "seqneed"; 1feb2012
var seqverb = "";
var singflag = 0;  // singularity flag for singular nouns; 4nov2011
var skip = 0;
var sloshmark = "+"; // more like MindForth; 30may2011
var snu = 0;  // subject-number as parameter for verb-selection.
var spike = 0;
var spt = 0;
var star = 0;  // For tutorial slosh-over showSubject() display.
var stemgap = 0;
var subjcall = 0;  // To avoid showSubject() of articles; 21may2011
var subjectflag = 0;  // 9dec2009 For NounPhrase to call SelfRef.
var subjold = 0;  // old subject as default candidate 29sep2010
var subjpsi = 0;
var sublen = 0;
var subpsi = 0;
var svo3 = 0;  // for VisRecog; 25sep2011
var svo5aud = 0;
var svoyes = false;
var t = 0;
var tag0 = 0;
var tag1 = 0;
var tag2 = 0;
var tag3 = 0;
var tag4 = 0;
var tag5 = 0;
var tag6 = 0;
var tag7 = 0;
var tag8 = 0;  // For safekeeping values in SpreadAct(); 13oct2011
var tbev = 0;  // time of be-verb for use with notjux; 15aug2011
var the1 = 0;
var the2 = 0;
var the3 = 0;
var the4 = 0;
var the5 = 0;
var the6 = 0;
var the7 = 0;
var tkbn = 0;  // time of retroactive KB noun adjustment; 28jun2011
var tkbv = 0;  // time of retroactive KB verb adjustment; 28jun2011
var tobject = "";
var topic = "";
var topicnum = 0;  // grammatical number of question "topic"; 18oct2011
var tov = 1;
var tqv = 0;  // tempus quod vide for specific psi instance; 4oct2011
var trouble = false;
var tseln = 0;  // NounPhrase: time of selection of noun; 10may2011
var tsels = 0;  // 25oct2011
var tselv = 0;  // VerbPhrase: time of selection of Verb; 10may2011
var tsubject = "";  // showSubject(): For "tutorial subjects".
var tult = 0;
var tutor = false;
var tverb = "";
var ufo = 0;
var unk = "";
var upnext = 0;
var urpre = 0;  // original pre for swapping during function-calls.
var urpsi = 0;
var userline = "";
var vacpsi = 0;  // de-globalized psi for VerbAct(); 1oct2010
// var vault = 476; // size (time at end) of RuBoot; 10jan2012
// var vault = 531; // size (time at end) of RuBoot; 23jan2012
var vault = 538; // size (time at end) of RuBoot; 19sep2012
var verbcept = 0;  // verb from perception not memory; 16sep2012
var verblock = 0;  // for subject-noun to lock onto seq-verb; 13oct2011
var verbnum = 0;
var verbpsi = 0;  // for transit into WhatAuxSVerb() 14jun2011
var verbval = 0;
var verbcall = 0;
var vip = 0;  // special ID for verb created by VerbGen; 31jan2012
var vphract = 0;  // verb phrase activation level 22jun2011
var vphraud = 0;  // holds aud-fetch for SpeechAct; 28jun2011
var vrsn = "26sep12"; // for Transcript mode; wed26sep2012
var vpos = 0;
var wxdflag = 0;  // for inhibition of what-do-X-DO queries; 16sep2010
var wxvflag = 0;  // for inhibition of what-do-X-VERB queries; 16sep2010
var whoskip = 0;
var xthe = 0;
var yncon = 0;  // a statuscon to trigger yes-or-no query; 27jun2011
var ynverb = 0;  // yes-or-no verb for AskUser; 29jun2011
var zad1 = 0;  // input audpsi one character back; 4feb2012
var zad2 = 0;  // input audpsi two characters back; 4feb2012
var zad3 = 0;  // input audpsi three characters back; 4feb2012
var zone = 0;
 
// defaultStatus="Click on View...Source to save Dushka.html"

Psi = new Array(cns);
for (i = 0; i < cns; i++) {
  Psi[i] = new psiNode(" "," "," "," "," "," "," "," "," "); // 13oct2011
}

ruLexicon = new Array(cns);  // 2jan2012
for (i = 0; i < cns; i++) {  // adding extra " " for "dba"; 2jan2012
  ruLexicon[i] = new ruNode(" "," "," "," "," "," "," "," "," ");
}  // 2jan2012


audMemory = new Array(cns);
for (i = 0; i < cns; i++) {
  audMemory[i] = new audNode(" ",0," "," "," "," ");
}
 
function Tutorial() {
  if (document.all["cb2"].checked == true) {
    document.all["cb1"].checked = false;
    document.all.souvenir.innerHTML = "";
    hardcopy = false;
    document.all["cb3"].checked = false;
    document.all.tabula.innerHTML = "";
    document.all.psicolumn.innerHTML = "";
    document.all.rucolumn.innerHTML = ""; // 5jan2012
    document.all.audcolumn.innerHTML = "";
    trouble = false;
    tutor = true;
    fyi = 2;
  }
  if (document.all["cb2"].checked == false) {
    fyi = 0;
    tutor = false;
  }
  document.forms[1].ear.focus();
}
 
 
function NounClear() {
  for (i = t; i>0; --i) {
    Psi[i].psiExam();
    if (psi5==5 || psi5==7) {  // pro(noun) 18aug2011
     if (psi1 > -1) { // if not inhibited below zero; 27oct2011
      psi1 = 0;
      Psi[i] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
     }  // end of test for positive (not inhibited) psi1; 18aug2011
    }  // end of test for 5=noun or 7=pronoun; 18aug2011
  }  // end of search for 5=noun or 7=pronoun; 18aug2011
}  // end of NounClear(0; return to NounPhrase(); 18aug2011
 
 
function VerbClear() {
  for (i = t; i>0; --i) {
    Psi[i].psiExam();
    if (psi5 == 8) { // 8sep2010
     if (psi1 > 0) { // if not inhibited below zero; 8sep2010
      psi1 = 0;
      Psi[i] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
     }  // end of test for positive (not inhibited) psi1; 8sep2010
    }  // 8sep2010
  }
}

 
function verbClip() {
  for (i = t; i>0; --i) {
    Psi[i].psiExam();
    if (psi5 == 8) { 
     if (psi1 > 0) { // if not inhibited below zero; 8sep2010
      psi1 = 20;
      Psi[i] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
     } // end of test for positive (not inhibited) psi1; 8sep2010
    } // end of test for 8=pos verb; 8sep2010
  }
}
 
function PsiClear() {
  for (i = t; i>0; --i) {
    Psi[i].psiExam();
    if (psi1 > 0) { // if not inhibited below zero; 8sep2010
      Psi[i] = new psiNode(psi0,0,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
    } // end of test for positive (not inhibited) psi1; 8sep2010
  }
}
 
 
function PsiDecay() {  // replacement for old PsiDecay(); 14may2011
  actran = 0;  // preserve-inhibition test; 14jun2011
  for (i = t; i>midway; --i) {
    Psi[i].psiExam();
    if (psi1 > 0) { // Avoid inhibited nodes;  8jun2011
      actran = 0;  // preserve-inhibition test; 14jun2011
      if (psi1 > 40) actran = 34;  // 8jun2011
      if (psi1 > 50) actran = 35;  // 8jun2011
      if (psi1 > 60) actran = 36;  // 8jun2011
      if (psi1 > 70) actran = 37;  // 8jun2011
      if (psi1 > 80) actran = 38;  // 8jun2011
      if (psi1 > 90) actran = 39;  // highest going last; 8jun2011 
      if (actran > 0) psi1 = actran; // Differential act; 8jun2011
      actran = 0;  // Reset to zero for safety;  8jun2011
      --psi1;  // Decrement the psi1 activation-level; 8sep2010
      if (psi0 == 781) psi1 = 0;  // 781=CHTO (what); 11jan2012
      if (psi0 == 830) psi1 = 8;  // 830=DYELAT' (do); 22sep2012
      Psi[i] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
    } //  End of if-clause finding and reducing positive activations
    Psi[i].psiExam();  // test; REMOVE; 14jun2011
    if (psi1 < 0) {  // If act. negative (inhibited); 8sep2010
      ++psi1;  // Increment psi1 up towards zero; 8sep2010
      Psi[i] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
    } // End of test for inhibited nodes;  8jun2011 
  } // End of loop in search of conceptual activation-levels.
} // End of PsiDecay(); 14may2011
 
 
function PsiDamp() {
  residuum = 16;
  if (urpsi==57) urpsi = 58;  // 57=AM;  15aug2011
  if (urpsi==66) urpsi = 58;  // 66=IS;  15aug2011
  if (urpsi==67) urpsi = 58;  // 67=ARE; 15aug2011
  for (i = t; i>midway; --i) {
   Psi[i].psiExam();
   if (urpsi > 0) {  // 20sep2006 To prevent needless dampings.
    if (psi0==urpsi) { 
     if (psi1 > -1) {  // positive activation?; 27oct2011
      Psi[i] = new psiNode(psi0,residuum,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
     }  // end of test to avoid inhibited concepts; 8sep2010
    }
   }
  }
  residuum = 0;
// PsiDecay();  // Testing to see if new version works well; 25may2011
// PsiDecay();  // Commenting out; 26ysep2012
}  // End of PsiDamp(); 15nov2010

 
function RuDamp() {  // Wiki-page form of name; 5jan2012
  for (i = (t + 1); i>midway; --i) {
    ruLexicon[i].ruExam();  // 5jan2012
    ruLexicon[i] = new ruNode(ru0,0,ru2,ru3,ru4,ru5,ru6,ru7,ru8);
  }  // end of passage through Ru(ssian) array; 5jan2012
}  // end of RuDamp() fashioned from EnDamp(); 5jan2012

 
function audDamp() {
  for (i = t; i > midway; --i) {
    audMemory[i].audExam();
 // if (aud4 == 1) aud5 = 0;
 // if (aud4 == 1) aud5 = 0;  // commenting out on 15jan2012
    audMemory[i] = new audNode(aud0,0,aud2,aud3,aud4,aud5);
  }
}


function Shutdown() {
  if (document.all["cb4"].checked == true) {
    life = false;
apb = "You have halted the Dushka AI at Rejuvenation cycle #"+rjc+".";
    Voice();
  }
  if (document.all["cb4"].checked == false) {
    life = true;
    document.forms[1].ear.focus();
    TID=window.setTimeout("MainLoop();",1000);
  }
}


function Destroy() {
  document.forms[1].ear.focus();
  life = false;
  apb = "Closing the window will destroy the AI.";
  Voice();
  alert("The AI Mind is alive. You may unclick your decision.");
  TID=window.setTimeout("window.close();",500);
}

 
function Transcribe() {
  if (hardcopy == true) {  
    dialog += ("<P>Robot: " + output);  // moved up on 27oct2011
    dialog += ("<BR>Human: <b>" + userline + '<\/b>');
    output = "";  // avoid spurious repeats; 6nov2011
    userline = "";
  }
}


function Transcript() {
  if (document.all["cb1"].checked == true) {
    document.all["cb2"].checked = false;
    document.all["cb3"].checked = false;
    document.all.tabula.innerHTML = "";
    document.all.psicolumn.innerHTML = "";
    document.all.rucolumn.innerHTML = "";  // 5jan2012
    document.all.audcolumn.innerHTML = "";
    trouble = false;
    hardcopy = true;
    fyi = 1;
    now = new Date(); 
adcopy=("<font size='+2'>Dushka AI version "+vrsn+" on " +now+"<\/b><\/font>");
    document.all.souvenir.innerHTML = adcopy;
  }
  Transcribe();
  if (hardcopy == true) {
    document.all.psicolumn.innerHTML = "";
    document.all.rucolumn.innerHTML = "";  // 5jan2012
    document.all.audcolumn.innerHTML = "";
  }
  document.all.tabula.innerHTML = dialog;
  if (document.all["cb1"].checked == false) {
    document.all.souvenir.innerHTML = "";
    hardcopy = false;
    document.all.tabula.innerHTML = "";
  }
  if (hardcopy == false) html = "";
}


function psiList() {
  for (i = nonce; i < (t +1); i++) {
    Psi[i].psiExam();
    psidata += ("<BR>" +i+ ". <b>" +psi0+ "<\/b> " +psi1+ " " +psi2);
    psidata += (" "+psi3+" "+psi4+" "+psi5+" "+psi6+" "+psi7+" "+psi8);
  }
}


function ruList() {  // 22dec2011
  for (i = nonce; i < (t +1); i++) {
    ruLexicon[i].ruExam();
    rudata += ("<BR>"+i+". <b>" +ru0+"<\/b> "+ru1+" "+ru2);
    rudata += (" "+ru3+" "+ru4+" "+ru5+" "+ru6+" "+ru7+" "+ru8);
  }  // 2jan2012
}  // end of ruList(); 22dec2011


function audList() {
  for (i = nonce; i < (t +1); i++) {
    audMemory[i].audExam();  // again removing bold; 10jan2012
    auddata += ("<BR>" + i + ". ");
    if (aud2 == "*") auddata += ("<font color='red'>");
    auddata += (aud0 + " ");  // removing bold; 10jan2012
    if (aud2 == "*") auddata += ("<\/font>");
    if (aud0 == " ") aud1 = " ";
    auddata += (aud1+" "+aud2+" "+aud3+" "+aud4+" "+aud5); 
  }
}
 
 
function SpreadAct() {
  if (prepsi > 0) {  // deglobalized; 1oct2010
   for (j = zone; j > midway; --j) {
    Psi[j].psiExam();
    if (psi0 == prepsi) {  // deglobalized; 1oct2010
     psi1 = (psi1 + 1);
     Psi[j] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,psi6,psi7,psi8); 
    }
    if (j < (zone - 6)) break; // eventually 64; 12nov2010
   }
  }
  if (seqpsi > 0) {  // deglobalized variable; 1oct2010
    for (j = zone; j < t; ++j) {
      Psi[j].psiExam();
      tag0 = psi0;
      tag1 = psi1;
      tag2 = psi2;
      tag3 = psi3;
      tag4 = psi4;
      tag5 = psi5;
      tag6 = psi6;
      tag7 = psi7;
      tag8 = psi8;  // Prevent corruption of values; 13oct2011
      if (psi0 == seqpsi) {  // deglobalized; 1oct2010
        if (fyi == 2) {
          if (pov == "#") {
            if (oldpsi > 0) {
              for (k=(t + 1); k>midway; --k) {
                Psi[k].psiExam();
                if (psi0 == seqpsi) {  // deglobalized; 1oct2010
                  if (psi8 > 0) {  // after adding in "tqv"; 13oct2011
                    seq7enx = psi8;  // Get seq enx as seq7enx; 13oct2011
                    for (k=t; k>midway; --k) {
                      ruLexicon[k].ruExam();
                      if (seq7enx == ru0) {  // 6jan2012
                        seq7aud = ru8; // aud for psi7 "seq";  5jan2012
                      }
                    }
                    engram = "";
                    do {
                      audMemory[seq7aud].audExam();  // 13oct2011
                      engram += aud0;
                      ctu = aud4;
                      seq7aud = (seq7aud + 1);  // 13oct2011
                    }
                    while (ctu == 1);
                      if (ctu == 0) {
                      pho = 32;
                    }
                    engram += " ";
                    for (k=t; k>midway; --k) {
                      ruLexicon[k].ruExam();  // 10jan2012
                      if (oldpsi == ru0) {    // 10jan2012
                        svo5aud = ru8; // 5jan2012
                        if (nouncall == 1) {
                          if (engram != "") {
                            brevity = (brevity + 1);
                            aud = svo5aud;
                            showSubject();
                          }
                        }
                         if (verbcall == 1) {
                          if (engram != "") {
                            equity = (equity + 1);
                            aud = svo5aud;
                            if (tutor == true) {
                              showVerb();
                            }
                            aud = 0;
                            sloshmark = "";
                          }
                        }
                        if (nouncall == 4) {
                          if (engram != "") {
                            city = (city + 1);
                            aud = svo5aud;
                            if (tutor == true) {
                              showObject();
                            }
                          }
                        }
                        star = 0; // Reset for showSubject(); 21may2011
                        node = 0; // Reset for showVerb(); 21may2011
                        ufo = 0;  // Reset for showObject(); 21may2011
                      }
                    }
                    break;
                  }
                }
              }
            }
          }
        }
        if (tag1 > -1) {  // avoid inhibition; 16sep2010
          if (subjectflag == 1) {  // onto verb-nodes; 18oct2010
            tag1 = (tag1 + spike); // add spike to seqpsi 18oct2010
          }  // end of test for subject-nodes; 18oct2010
          else  // in all other cases, e.g. dirobj; 18oct2010
          {  // for "dirobj" or "predflag" cases; 18oct2010
            tag1 = spike;  // Transfer absolute act; 18oct2010
          } // End of else-clause; 18oct2010
        }  // end of test to skip inhibited nodes; 16sep2010
        Psi[j] = new psiNode(tag0,tag1,tag2,tag3,tag4,tag5,tag6,tag7,tag8);
      tag0=0; tag1=0; tag2=0; tag3=0; tag4=0; tag5=0; tag6=0; tag7=0; tag8=0;
        break;  // After finding one seqpsi; 15oct2010
      }  // End of inner if-clause.
    if (j > (zone + 64)) break; // Assume single word found; 12nov2010
    }  // End of forwards loop.
  }  // End of outer if-clause.
  spike = 0;  // safety measure; 16sep2010
}  // end of SpreadAct(); 16sep2010
 

function NounAct() {
  if (nacpsi > 0) {  // noun-activand psi-concept; 15sep2012
    oldpsi = nacpsi;  // nacpsi replaces psi; 13aug2010
    for (i=(t + 1); i>midway; --i) {
      Psi[i].psiExam();
      if (psi0 == nacpsi) {  // nacpsi replaces psi; 13aug2010
        if (psi1 > -1) {   // avoid inhibition; 29oct2011
          psi1 = 26;  // start near a threshold level;  1sep2012
        }  // 
        Psi[i] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
        if (psi0 == 781) {  // 781=CHTO (what); 11jan2012    
       // PsiDecay();  // MindForth: await active subject; 13may2011
       // PsiDecay();  // MindForth: await active subject;  7jun2011
       // PsiDecay();  // Commenting out; 26ysep2012
        }  // from MindForth; 13may2011
        spike = 12;  // Aim for ample spikes;  7jun2011
        prepsi = psi4;  // deglobalized; 1oct2010
        seqpsi = psi7;  // psi6 is changing to "qtv"; 13oct2011
        zone = i;  // for use in SpreadAct;  7jun2011
        if (psi1 == 0) spike = 0;
        if (psi1 >  5) spike = 12;  // from MindForth; 25may2011
        if (psi1 > 10) spike = 24;  // from MindForth;  7jun2011
        if (psi1 > 15) spike = 26;  // from MindForth;  7jun2011
        if (psi1 > 20) spike = 27;  // 10jun2011
        if (psi1 > 25) spike = 28;  // 10jun2011
        if (psi1 > 30) spike = 29;  // 10jun2011
        if (psi1 > 35) spike = 30;  // 10jun2011
        if (psi1 > 40) spike = 31;  // 10jun2011
        if (psi1 > 45) spike = 32;  // 10jun2011
        if (psi1 > 50) spike = 33;  // 10jun2011
        if (psi1 > 55) spike = 34;  // 10jun2011
        if (psi1 > 60) spike = 35;  // 10jun2011
        if (seqpsi > 0) {  // if positive association;  7jun2011
          if (seqpsi == 55) {  // deglobalized; 1oct2010
            spike = 1;  // de-activate 55=WHO; 13aug2010
          }  // end of test for 55=WHO; 13aug2010
          if (dirobj == 1) {  // 13jul2011
            spike = 8;  // 13jul2011
          }  // 13jul2011
          SpreadAct();  // deglobalized; 1oct2010
        }  // 
        pre = precand;
        seqpsi = 0;  // deglobalized; 1oct2010
      }  // end of test for psi0 to equal nacpsi;  7jun2011
      spike = 0;  // reset for each new loop; 15oct2010
    }
  }
  oldpsi = 0;
  spike = 0;  // reset; 15oct2010
}  // End of NounAct(); 13aug2010
 
 
function VerbAct() {
  verbval = 15; // oppose stray activations;  7jun2011
  if (vacpsi > 0) {  // if a vacpsi exists;  7jun2011
    oldpsi = vacpsi;  // deglobalized; 1oct2010
    if (vacpsi==57) vacpsi = 58;  //  AM becomes BE; 11aug2011
    if (vacpsi==66) vacpsi = 58;  //  IS becomes BE; 11aug2011
    if (vacpsi==67) vacpsi = 58;  // ARE becomes BE; 11aug2011
    for (i=(t + 1); i>midway; --i) {
      Psi[i].psiExam();
      if (psi0 == vacpsi) {  // deglobalized; 1oct2010
         if (psi1 > -1) { // avoid inhibited nodes;  7jun2011
          if (moot==0) {  // deprive queries of tags; 22aug2011
           psi1 = (psi1 + verbval); // CUMULATIVE for slosh-over; 7jun2011
          }  // end of test for a moot query input; 22aug2011
         }  // end of test to skip inhibited nodes;  7jun2011
         if (psi0 == 781) {  // 781=CHTO (what); 11jan2012
           psi1 = 0;  // Set WHAT at zero activation; 7jun2011
         }  // End of test for 781=CHTO (what); 11jan2012
         Psi[i] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
         prepsi = psi4;  // deglobalized for SpreadAct; 1oct2010
         seqpsi = psi7;  // psi6 is changing to "tqv"; 13oct2011
         zone = i;  // for use in SpreadAct;  7jun2011
         if (psi1 == 0)  spike = 0;
         if (psi1 > 0)  spike = 1;
         if (psi1 > 5)  spike = 3;  // 10nov2010
         if (psi1 > 10) spike = 6;  // 10nov2010
         if (psi1 > 15) spike = 9;  // 10nov2010
         if (psi1 > 20) spike = 12;  // 10nov2010
         if (psi1 > 25) spike = 15;  // 10nov2010
         if (psi1 > 30) spike = 18;  // 10nov2010
         if (psi1 > 35) spike = 21;  // 10nov2010
         if (psi1 > 40) spike = 24;  // 10nov2010
         if (psi1 > 45) spike = 27;  // 10nov2010
         if (psi1 > 50) spike = 30;  // 10nov2010
         if (psi1 > 55) spike = 33;  // 10nov2010
         if (psi1 > 60) spike = 36;  // 10nov2010
         if (psi1 > 65) spike = 39;  // 10nov2010
         if (psi1 > 70) spike = 42;  // 10nov2010
         if (psi1 > 75) spike = 45;  // 10nov2010
         if (psi1 > 80) spike = 48;  // 10nov2010
         if (psi1 > 85) spike = 50;  //  7jun2011
         if (psi1 > 90) spike = 52;  //  7jun2011
         if (psi1 > 95) spike = 54;  //  7jun2011
         if (seqpsi > 0) SpreadAct();  // deglobalized; 1oct2010
         pre = precand;
         prepsi = precand;  // 1oct2010
         psi1 = 0;
         seqpsi = 0;  // 1oct2010
      }
      psi1 = 0;  // reset to start each loop again;  8jun2011
      spike = 0; // reset to start each loop again; 15oct2010
    }  // end of backwards search loop;  7jun2011
  }  // end of test for positive vacpsi;  7jun2011
  oldpsi = 0;
  verbcall = 0;
  verbval = 0;
}  // end of VerbAct; 1oct2010
 

function ReActivate() { // re-activate recent nodes of a concept
  spike = 0;
  if (psi > 0) {
    for (i=tov; i>midway; --i) { // Omitting current input; 27oct2011
      Psi[i].psiExam();
      if (psi0 == psi) {
       if (pov == "*") {  // Only during "*" external POV; 10may2011
        if (moot==0) {  // deprive queries of tags; 22aug2011
          if (psi1 < 0) {  // if inhibited; 27oct2011
            psi1 = (psi1 + 1);  // reactivate only slightly; 27oct2011
          }  // end of test for inhibited concept; 27oct2011
          else psi1 = psi1 + 35;  // full reactivation; 28aug2012
        }  // end of test for a moot query input; 22aug2011
        if (firstword==54) psi1 = 48;  // affirm queries; 1nov2011
        if (psi0 == 781) psi1 =  0; // 781=CHTO (what); 11jan2011
        if (psi0 == 791) psi1 =  0; // 791=KTO (who); 11jan2012
        if (lastword == true) psi1 = 24;  // test; 29jan2012
        Psi[i] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
        spike = 1;
        if (psi1 == 0)  spike = 0;
        if (psi1 > 5)   spike =  7;
        if (psi1 > 10)  spike =  8;
        if (psi1 > 15)  spike =  9;
        if (psi1 > 20)  spike = 10;
        if (psi1 > 25)  spike = 11;
        if (psi1 > 30)  spike = 12;
        if (psi1 > 35)  spike = 13;
        if (psi1 > 40)  spike = 14;
        if (psi1 > 45)  spike = 15;
        if (psi1 > 50)  spike = 16;
        if (psi1 > 55)  spike = 17;
        if (psi1 > 60)  spike = 18;
        prepsi = psi4;
        seqpsi = psi7;  // psi6 is "tqv"; 23aug2012
        zone = i;
        pre = precand;
        psi1 = 0;
        seqpsi = 0;
        spike = 1;
       }  // End of test for external "*" POV; 10may2011 
      }
    }
  }
}  // end of ReActivate() 1oct2010
 
 
function InNativate() { // quasi-instantiate EnBoot sequence; 23oct2011
  Psi[t] = new psiNode(psi,0,num,0,pre,pos,tqv,seq,rux);
}  // end of InNativate(); 23oct2011


function OutBuffer() {  // for manipulation of SpeechAct words; 4jan2012
   b01=""; b02=""; b03=""; b04=""; b05=""; b06="";  // 5sep2102
   b07=""; b08=""; b09=""; b10=""; b11=""; b12="";  // 5sep2012
   b13=""; b14=""; b15=""; b16="";  // clear tabula rasa; 5sep2012

  if (c16>"") {  // if the AudBuffer full; 4jan2012
    b16=c16; b15=c15; b14=c14; b13=c13; b12=c12; b11=c11; 
    b10=c10; b09=c09; b08=c08; b07=c07; b06=c06; b05=c05; 
    b04=c04; b03=c03; b02=v02; b01=c01;  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of a 16-character word; 4jan2012
  if (c15>"") {  
    b16=c15; b15=c14; b14=c13; b13=c12; b12=c11; b11=c10;
    b10=c09; b09=c08; b08=c07; b07=c06; b06=c05; b05=c04; 
    b04=c03; b03=c02; b02=c01; b01="";  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of a 15-character word; 4jan2012
  if (c14>"") {
    b16=c14; b15=c13; b14=c12; b13=c11; b12=c10; b11=c09;
    b10=c08; b09=c07; b08=c06; b07=c05; b06=c04; b05=c03;
    b04=c02; b03=c01; b02="";  b01="";  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of a 14-character word; 4jan2012
  if (c13>"") {
    b16=c13; b15=c12; b14=c11; b13=c10; b12=c09; b11=c08;
    b10=c07; b09=c06; b08=c05; b07=c04; b06=c03; b05=c02;
    b04=c01; b03="";  b02="";  b01="";  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of a 13-character word; 4jan2012
  if (c12>"") {
    b16=c12; b15=c11; b14=c10; b13=c09; b12=c08; b11=c07;
    b10=c06; b09=c05; b08=c04; b07=c03; b06=c02; b05=c01;
    b04="";  b03="";  b02="";  b01="";  // 4jan2012
    return;  // abandon remainder of function; 
  }  // end of transfer of a 12-character word; 4jan2012
  if (c11>"") {
    b16=c11; b15=c10; b14=c09; b13=c08; b12=c07; b11=c06;
    b10=c05; b09=c04; b08=c03; b07=c02; b06=c01; b05="";
    b04="";  b03="";  b02="";  b01="";  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of an 11-character word; 4jan2012
  if (c10>"") {
    b16=c10; b15=c09; b14=c08; b13=c07; b12=c06; b11=c05;
    b10=c04; b09=c03; b08=c02; b07=c01; b06="";  b05="";
    b04="";  b03="";  b02="";  b01="";  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of a 10-character word; 4jan2012
  if (c09>"") {
    b16=c09; b15=c08; b14=c07; b13=c06; b12=c05; b11=c04;
    b10=c03; b09=c02; b08=c01; b07="";  b06="";  b05="";
    b04="";  b03="";  b02="";  b01="";  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of a 9-character word; 4jan2012
  if (c08>"") {
    b16=c08; b15=c07; b14=c06; b13=c05; b12=c04; b11=c03;
    b10=c02; b09=c01; b08="";  b07="";  b06="";  b05="";
    b04="";  b03="";  b02="";  b01="";  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of an 8-character word; 4jan2012
  if (c07>"") {
    b16=c07; b15=c06; b14=c05; b13=c04; b12=c03; b11=c02;
    b10=c01; b09="";  b08="";  b07="";  b06="";  b05="";
    b04="";  b03="";  b02="";  b01="";  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of a 7-character word; 4jan2012
  if (c06>"") {
    b16=c06; b15=c05; b14=c04; b13=c03; b12=c02; b11=c01;
    b10="";  b09="";  b08="";  b07="";  b06="";  b05="";
    b04="";  b03="";  b02="";  b01="";  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of a 6-character word; 4jan2012
  if (c05>"") {
    b16=c05; b15=c04; b14=c03; b13=c02; b12=c01; b11="";
    b10="";  b09="";  b08="";  b07="";  b06="";  b05="";
    b04="";  b03="";  b02="";  b01="";  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of a 5-character word; 4jan2012
  if (c04>"") {
    b16=c04; b15=c03; b14=c02; b13=c01; b12="";  b11="";
    b10="";  b09="";  b08="";  b07="";  b06="";  b05="";
    b04="";  b03="";  b02="";  b01="";  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of a 4-character word; 4jan2012
  if (c03>"") {
    b16=c03; b15=c02; b14=c01; b13=""; b12="";  b11="";
    b10="";  b09="";  b08="";  b07="";  b06="";  b05="";
    b04="";  b03="";  b02="";  b01="";  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of a 3-character word; 4jan2012
  if (c02>"") {
    b16=c02; b15=c01; b14="";  b13=""; b12="";  b11="";
    b10="";  b09="";  b08="";  b07="";  b06="";  b05="";
    b04="";  b03="";  b02="";  b01="";  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of a 2-character word; 4jan2012
  if (c01>"") {
    b16=c01; b15=""; b14="";  b13=""; b12="";  b11="";
    b10="";  b09="";  b08="";  b07="";  b06="";  b05="";
    b04="";  b03="";  b02="";  b01="";  // 4jan2012
    return;  // abandon remainder of function; 4jan2012
  }  // end of transfer of a 1-character word; 4jan2012
}  // end of OutBuffer called from AudListen(); 12jan2012
 

function AudBuffer() {  // for transfer of words to OutBuffer.
  phodex = (phodex + 1);  // unitary increment; 4jan2012
  if (phodex==1) {  // 4jan2012
    c01=abc; c02=""; c03=""; c04=""; c05=""; c06=""; c07=""; c08=""; 
    c09="";  c10=""; c11=""; c12=""; c13=""; c14=""; c15=""; c16="";
  }   // end of using phodex=1 to blank out the AudBuffer; 4jan2012
  if (phodex==2)  c02=abc;  //  4jan2012
  if (phodex==3)  c03=abc;  //  4jan2012
  if (phodex==4)  c04=abc;  //  4jan2012
  if (phodex==5)  c05=abc;  //  4jan2012
  if (phodex==6)  c06=abc;  //  4jan2012
  if (phodex==7)  c07=abc;  //  4jan2012
  if (phodex==8)  c08=abc;  //  4jan2012
  if (phodex==9)  c09=abc;  //  4jan2012
  if (phodex==10)  c10=abc;  // 4jan2012
  if (phodex==11)  c11=abc;  // 4jan2012
  if (phodex==12)  c12=abc;  // 4jan2012
  if (phodex==13)  c13=abc;  // 4jan2012
  if (phodex==14)  c14=abc;  // 4jan2012
  if (phodex==15)  c15=abc;  // 4jan2012
  if (phodex==16)  c16=abc;  // 4jan2012
}  // end of AudBuffer() called from AudListen() or elsewhere.
 

function psiExam() {
  psi0 = this.psi;
  psi1 = this.act;
  psi2 = this.num;
  psi3 = this.jux;
  psi4 = this.pre;
  psi5 = this.pos;
  psi6 = this.tqv;  // time-point for "verblock" or "nounlock"; 2jan2012
  psi7 = this.seq;  // subSEQuent concept; 2jan2012
  psi8 = this.rux;  // Russian-transfer tag; 2jan2012
}


function psiNode(psi,act,num,jux,pre,pos,tqv,seq,rux) { // 2jan2012
  this.psi = psi;
  this.act = act;
  this.num = num;
  this.jux = jux;
  this.pre = pre;
  this.pos = pos;
  this.tqv = tqv;
  this.seq = seq;
  this.rux = rux;  // 2jan2012
  this.psiExam = psiExam;
}


function InStantiate() {
  if (seqneed == 0) seqneed = 5;  // for dir.obj. of verb; 23aug2012
  if (precand > 0) pre = precand;
  if (ordo == 1) prevtag = 0;
  if (firstword==781) moot = 1;  // 781=CHTO (what); 11jan2012
  if (firstword==59 || firstword==87) {  // 59=DO; 87=DOES; 22aug2011
    moot = 1;  // deprive queries of "pre" and "seq" tags; 22aug2011
  }  // end of test for a DO-query; 24oct2011
  if (lastword == true) {
    seq = 0;
 // lastword = false;
 // lastword = false; // Commenting out on 29jan2012
  }
  if (t > 201) {  
    if (pos == 6) {
      nounduck = 1;
    }
  }
 if (t > 201) {  
    if (nounduck == 0) {
      if (pos == 5) {
        presubj = psi;
      }
    }
  }
  if (presubj > 0) {
    if (pos == 8) {
      prevtag = presubj;
      presubj = 0;
      if (nounduck == 1) nounduck = 0;
    }
  }
 if (t > 201) {
    if (psi == 55) {
      whoskip = 1;
      act = 0;
    }
  }
  if (t > 201) {
    if (whoskip == 1) {
      if (psi == 57) presubj = 50;
      if (psi == 67) presubj = 0;
      if (psi == 57) preverb = 57;
      if (psi == 56) {
        lastword = false;
        seq = preverb;
        preverb = 0;
        whoskip = 0;
      }
    }
  }
  if (singflag==1) {  // if set recently; 6nov2011
    if (pos==5) {  // after "a(n)" wait for a noun; 6nov2011
      num = 1;  // even if previously "0" by default; 6nov2011
      singflag = 0;  // reset after use; 6nov2011
    }  // end of test for a noun; 6nov2011
  }  // end of test of singularity-flag; 6nov2011
  if (psi==1 || psi==83) singflag = 1;  // after a(n); 6nov2011
// if (psi==54) {  // Special handling of psi #54 WHAT; 19apr2011
  if (psi==781) {  // Special handling of psi #781 CHTO (what)
    indefartcon = 1;  // Set indefinite article condition; 19apr2011
    act = 0; // suppress "what" in queries; 16sep2010 
  }  // Changing from one line to multiple lines; 19apr2011
// if (psi==55) {  // Special handling of psi #55 WHO; 19apr2011
  if (psi==791) {  // Special handling of psi #791 KTO (who)
    defartcon = 1;  // Set definite article condition; 19apr2011
    act = 0;  // To suppress "WHO" during answer; 19apr2011
  }  // End of test for psi #55 WHO; 19apr2011
  if (pov == "*") {  // If POV is external; 20jul2011
    if (pos == 5 || pos == 7) {  // if noun or pronoun; 22jan2012
       if (recnum > 0) {  // If positive recog-num; 20jul2011
         num = recnum;  // Override num(ber); 20jul2011
         recnum = 0;  // reset for safety; 20jul2011
       }  // End of test for positive recog-num; 20jul2011
       quobj = psi;  // query-object for AskUser; 18aug2011
    }  // End of test for a noun; 20jul2011
  }  // End of test for external "*" point-of-view; 20jul2011
  if (pov == "#") {  // If POV is ASCII 35 "#" internal; 1may2011
    act = 0; // 0 activation for ReEntry concepts; 1may2011
  }  // End of test for "#" internal POV;  1may2011
  if (seq == 0) tqv = 0; // avoid spurious carry-overs; 23aug2012
  Psi[t] = new psiNode(psi,act,num,jux,prevtag,pos,tqv,seq,rux);
  act = 0;  // reset for safety; 27oct2011
  inhibcon = 0;  // reset for safety; 27oct2011
  instnum = num;  // instantiation num(ber); 27oct2011
  if (jux == 250) jux = 0;  // reset after use; 6jan2012
  if (prejux == 250) { // 250=Nye in Russian; 6jan2012
    jux = 250;  // set jux for next instantiand; 6jan2012
    prejux = 0;  // reset for safety; 24jul2011
  }  // end of post-instantiation test; 24jul2011
  if (mfn == 1 || mfn == 2) {  // for calling WhoBe; 3aug2011
    mfnflag = mfn;  // both positive and specific; 3aug2011
  }  // end of test to set mfnflag; 3aug2011
  if (mfn == 0) mfnflag = 0;  // reset for safety; 3aug2011 
  preset = 0;
  prevtag = psi;
  if (seqneed == 8 && c == 32) {  // test; 9feb2012
   if (pov == "*") {  // only during input; 12feb2012
    t = (t+1)  // increment "t" to create a gap; 10feb2012
    pho=" "; act=0; pov="*"; beg=1; ctu=0; // 12feb2012 
    audpsi = 800;  // 800=BWIT' (to be); 10feb2012
    audMemory[t] = new audNode(pho,0,pov,beg,ctu,audpsi); // 8dec2009
 // Psi[t] = new psiNode(psi,act,num,jux,prevtag,pos,tqv,seq,rux);
 // Psi[t] = new psiNode(800,0,num,0,prevtag,8,0,seq,800);  // 12feb2012
    // adding space for sake of finding "verblock"; test; 10sep2012
    Psi[t+1] = new psiNode(800,0,num,0,prevtag,8,0,seq,800);  // 10sep2012
 // ruLexicon[t] = new ruNode(nru,act,num,mfn,dba,fex,pos,fin,aud);
 // ruLexicon[t] = new ruNode(800,0,0,0,dba,800,8,800,t);
    // adding space for sake of finding "verblock"; test; 10sep2012
    ruLexicon[t+1] = new ruNode(800,0,0,0,dba,800,8,800,t);
    psi = 800;  // to become "seq" of the subject; 11feb2012
    pos = 8;  // 8=verb so next code creates "seq"; 11feb2012
    prevpsi = 800;  // to enable cancellation of be-verb; 14feb2012
    t = (t+1)  // increment "t" to create an ending gap; 10feb2012
   }  // end of test for external "*" POV; 12feb2012
  }  // end of test for SPACE-input during need for a verb; 11feb2w012
  if (prevpsi == 800 && seqneed == 5) {  // test; 14feb2012
    if (prevpsi == 800 && pos == 8) { // if real verb follows pseudo-be-verb;
      seqneed = 8;  // the seq to the real verb is needed; 14feb2012
      prevpsi = 0;  // reset after using; 14feb2012
    }  // end of test for pseudo-be-verb and real verb; 14feb2012
  }  // end of test for wrong seqneed; 14feb2012
  if (seqneed==8) {  // if looking for a verb; 27jan2012
    if (pos==8) {  // if part-of-speech is verb; 27jan2012
      jux = -1;  // a default to be reset for dir. obj; 29jan2012
      seq = psi;  // because a verb has arrived; 27jan2012
      seqpos = pos;  // possibly for tqv; 27jan2012
      if (psi != 800) seqneed = 0; // skip imaginary BeVerb; 12feb2012
    }  // end of test for 8=pos verb; 27jan2012
    for (i=(t-2); i>vault; --i) {  // find noun needing seq; 27jan2012
      Psi[i].psiExam();  // examine the Psi concept array; 27jan2012
      if (psi5==5 || psi5==7) {  // noun or pronoun? 27jan2012
        if (moot==0) {  // deprive queries of tags; 27jan2012
          Psi[i] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,psi6,seq,psi8);
          if (seqpos==8) {  // a verb? 27jan2012
            tqv = t;  // assign "tqv" value; 27jan2012
            Psi[i].psiExam();  // 27jan2012
            Psi[i] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,t,psi7,psi8);
          }  // end of seqpos=verb test; 27jan2012
        }  // end of test for a moot query input; 27jan2012
        break;  // Change only one seq; 27jan2012
      }  // end of test for subject noun or pronoun; 27jan2012      
    }  // end of backwards loop; 27jan2012
  }  // end of test for needing a verb; 27jan2012
  // if (pos != 8 && jux == -1) jux = 0;  // Reset; 29jan2012
  if (seqneed==5) {  // if looking for a noun; 4oct2011
    if (pos==5 || pos==7) {  // if noun or pronoun; 4oct2011
      dba = 4;  // assuming an accusative direct object; 29jan2012
      seq = psi;  // because a (pro)noun has arrived; 4oct2011
      // Next two lines affect objects of transitive verbs; 1feb2012
      ruLexicon[t].ruExam();  // adding a "dba" of 4; 1feb2012
      ruLexicon[t] = new ruNode(ru0,ru1,ru2,ru3,4,ru5,ru6,ru7,ru8);
      seqpos = pos;  // possibly for tqv; 4oct2011
      seqneed = 0;  // zero out after use; 4oct2011
    }  // end of test for 5=pos noun or 7=pos pronoun; 4oct2011
    for (i=(t-2); i>vault; --i) {  // look for verb needing seq; 4oct2011
      Psi[i].psiExam();  // examine the Psi concept array; 4oct2011
        if (psi5==8) {  // verb? 4oct2011
         if (moot==0) {  // deprive queries of tags; 4oct2011
          Psi[i] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,psi6,seq,psi8);
          if (seqpos==5 || seqpos==7) {  // (pro)noun? 25oct2011
            tqv = t;  // assign "tqv" value; 25oct2011
            Psi[i].psiExam();  // 25oct2011
            Psi[i] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,t,psi7,psi8);
          }  // end of seqpos=(pro)noun test; 25oct2011          
         }  // end of test for a moot query input; 4oct2011
         break;  // Change only one seq; 4oct2011
        }  // end of test for verb; 4oct2011      
    }  // end of backwards loop; 4oct2011
  }  // end of test for needing a noun; 4oct2011
  if (ordo > 1) {  // 4oct2011
    seq = psi;  // 4oct2011
    if (lastword == true) {  // 4oct2011
      seq = 0;  // 4oct2011
   // lastword = false;  // 4oct2011
   // lastword = false;  // Commenting out on 29jan2012
    }  // 4oct2011
  }  // 4oct2011
  if (pos==5 || pos==7) seqneed = 8; // if noun need verb; 4oct2011
  if (pos==6) seqneed = 5;  // if preposition need noun; 4oct2011
  if (pos==8) seqneed = 5;  // if verb need noun;  1feb2012
  recnum = 0;  // lest carry-over to other words; 20jul2011
  seq = 0;
} // End of InStantiate(); 4sep2010


function ruExam() {  // transferred from ru120104 on 5jan2012
  ru0 = this.nru;  // was "nen" in English; 2jan2012
  ru1 = this.act;
  ru2 = this.num;
  ru3 = this.mfn; 
  ru4 = this.dba;  // 2jan2012
  ru5 = this.fex;
  ru6 = this.pos;
  ru7 = this.fin;
  ru8 = this.aud;  // nine flags, including zero; 2jan2012
}


function ruNode(nru,act,num,mfn,dba,fex,pos,fin,aud) {
  this.nru = nru;  // was "nen" in English; 2jan2012
  this.act = act;
  this.num = num;
  this.mfn = mfn;
  this.dba = dba;  // 2jan2012
  this.fex = fex;
  this.pos = pos;
  this.fin = fin;
  this.aud = aud;
  this.ruExam = ruExam;  // 2jan2012
}  // transferred from ru120104.html on 5jan2012


function RuVocab() {  // adding "dba"; 2jan2012
  ruLexicon[t] = new ruNode(nru,act,num,mfn,dba,fex,pos,fin,aud);
}  // 2jan2012
 
 
function RuParser() {  // renamed; 5jan2012
  bias = 5;
  act = 30;  // MindForth: Activate lower than ReActivate; 8jun2011
  if (pov == "*") {  // only during external input; 15oct2010
 // act = 40; // test; 29jan2012
    act = 32;  // test; 23aug2012
  }  // end of test for external POV; 15oct2010
  InStantiate();
  if (pos == 5) bias = 8;
  if (pos == 7) bias = 8;  // from MindForth; 15oct2010
  if (pos == 8) bias = 5;
}  // End of RuParser(); 5jan2012


function RuReify() {  // adapted from EnReify; 5jan2012
  for (i = t; i>midway; --i) {  // from MindForth; test; 8jun2011
    Psi[i].psiExam();
    num = psi2;  // test; 17jan2012
    if (psi1 > 0) {
      lexact = psi1;  // from MindForth;  8jun2011
      ruLexicon[i].ruExam();  // examine Russian array; 5jan2012
      ruLexicon[i] = new ruNode(ru0,lexact,num,ru3,ru4,ru5,ru6,ru7,ru8);
    }  // end of test for a psi with positive activation; 9aug2011
    lexact = 0;  // reset for safety; 8jun2011
  }  // end of looping through the Psi concept array;  9aug2011
}  // End of RuReify(); return to NounPhrase or VerbPhrase; 5jan2012
 

function KbRetro() {  // for yes-or-no answers; 29jun2011
  if (oldpsi == 432 || oldpsi == 427) {  // if yes or no; 11jan2012
    if (oldpsi == 427) {  // 427=NYET (no); 11jan2012
      Psi[tkbv].psiExam(); // expose all values to change two; 3jul2011
      Psi[tkbv] = new psiNode(psi0,64,psi2,12,psi4,psi5,psi6,psi7,psi8);
    }  // End of test for "no" answer; 29jun2011
    if (oldpsi == 432) {  // 432=DA (yes); 11jan2012
      Psi[tkbv].psiExam(); // expose all values to change one; 3jul2011
      Psi[tkbv] = new psiNode(psi0,64,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
    }  // End of test for a "yes" answer; 3jul2011
  }  // end of test for either yes or no; 3jul2011
  else {  // if neither; 29jun2011
  Psi[tkbn].psiExam(); // remove associative tags from noun; 29jun2011
  Psi[tkbn] = new psiNode(psi0,psi1,psi2,psi3,0,psi5,psi6,0,psi8);
  Psi[tkbv].psiExam(); // remove associative tags from verb; 29jun2011
  Psi[tkbv] = new psiNode(psi0,psi1,psi2,psi3,0,psi5,psi6,0,psi8);
  }  // end of else-clause; 29jun2011
  kbcon = 0;  // temporarily here turn off kbcon; 29jun2011
  tkbn = 0;  // reset for safety; 3jul2011
  tkbv = 0;  // reset for safety; 3jul2011
  PsiDecay()  // for distribution of PsiDecay influence; 3jul2011
}  // End of KbRetro(); return to OldConcept(); 30jun2011
 
 
function OldConcept() {
  ordo = (ordo + 1);  // increment for any word; test; 29jan2012
//  act = 28;  // from MindForth; test;  8jun2011
//  act = 28;  // Commenting out above line as test; 29jan2012
  act = (35 - (ordo * 2));  // descending input act; 29jan2012
  for (i=t; i>midway; --i) {
    ruLexicon[i].ruExam();  // 5jan2012
    if (ru0 == oldpsi) {  // conformance with MindForth; 5jan2012
      if (ru2 > 0) unk = ru2; //  5jan2012
      if (ru2 > 0) recnum = ru2;  // test; 22jan2012
      if (ru3 > 0) mfn = ru3; //  5jan2012
      if (ru4 > 0) dba = ru4; // for verb-recognition; 20sep2012
      if (ru5 > 0) fex = ru5; //  5jan2012
      if (ru6 > 0) pos = ru6; //  5jan2012
      if (ru7 > 0) fin = ru7; //  5jan2012
    break;
    }
  }
 // if (pos == 8) unk = numsubj; // assume agreement; 18jun2011; 17jan2012
  if (oldpsi==57) tbev = t;  // 57=AM; 15aug2011
  if (oldpsi==58) tbev = t;  // 58=BE; 15aug2011
  if (oldpsi==66) tbev = t;  // 66=IS; 15aug2011
  if (oldpsi==67) tbev = t;  // 67=ARE; 15aug2011
  if (pos == 5 || pos == 7) dba = 1;  // default before changes; 29jan12  
// if ((pos == 5 || pos == 7) && (lastword == true)) dba = 4; // 29jan12 
// Commenting out the above line for SV/SVO input; 31jan2012
// if (seqneed == 5 && pos == 5) {  // 29jan2012
//  if  ((seqneed == 5) && (pos == 5 || pos == 7)) {  // 29jan2012
//    dba = 4;  // accusative; 29jan2w012
//  }  // 29jan2012
  if (subjectflag == 1) dba = 1;  // nominative for subject; 31jan2012
  if (dirobj == 1) dba = 4;  // acc. for direct objects; 31jan2012
// ruLexicon[t] = new ruNode(oldpsi,0,unk,mfn,dba,fex,pos,fin,aud);
  ruLexicon[t] = new ruNode(oldpsi,0,unk,mfn,prsn,fex,pos,fin,aud);
  mfn = 0;  // reset to prevent carry-over; test; 22jan2012
  if (pov == "{") oldpsi = fex;  // deglobalizing psi; 3jul2011
  if (pov == "#") oldpsi = fex;  // deglobalizing psi; 3jul2011
  if (pov == "}") oldpsi = fex;  // deglobalizing psi; 3jul2011
  if (pov == "*") oldpsi = fin;  // deglobalizing psi; 3jul2011
  rux = oldpsi;  // 5jan2012
  if (oldpsi==12) {  // 12=NOT; 15aug2011
     if (tbev > 0) {  // 15aug2011
       Psi[tbev].psiExam();  // examine Psi array at "tbev"; 15aug2011
       psi3 = 12;  // set verb "jux" to 12=NOT; 15aug2011
       Psi[tbev] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
       tbev = 0;  // reset for safety; 15aug2011
     }  // end of test for positive time-of-beverb; 15aug2011
  }  // end of test for 12=NOT; 15aug2011
  if (oldpsi == 370) {  // 370=POCHEMU (why); 11jan2012
    act = 8;  // subactivate question "why".
    questype = 370;  // Keep track of what was asked; 11jan2012
    // so that ConJoin() may provide the conjunction "because".
  }  // End of test to deal with "why" questions.
  if (oldpsi == 7) act = 0;  // 7=THE; deglobalizing psi; 3jul2011
  if (kbcon > 0) {  // if user answers yes-or-no question; 3jul2011
    KbRetro();  // retroactively adjust knowledge base; 3jul2011
    kbcon = 0;  // reset for safety; 3jul2011
  }  // User has had one chance to answer yes-or-no question.
// if (oldpsi == 707) act = 34;  // Enhance Ty (you); test; 26jan2012
// if (oldpsi == 707) act = 34;  // Commenting out; 26sep2012
  if (oldpsi == 781) act = 0;  // Suppress 781=CHTO (what); 11jan2012
  if (oldpsi == 791) act = 0;  // Subactivate 791=KTO (who); 11jan2012
  if (oldpsi == 250) {  // upon recognition of 250=NYE (not); 11jan2012
    prejux = 250;  // flag for concept to be negated; 11jan2012
  }  // end of test for input or ReEntry of 250=NYE (not); 11jan2012
  psi = oldpsi;  // from MindForth; 3jul2011
  RuParser();  // 5jan2012
  pos = 0;
  if (pov == "*") {
    urpre = pre;
    caller = "OldConcept";
    ReActivate();
    caller = " ";  // reset after calling;  7jul2011
    pre = urpre;
  }
  unk = 0;
  act = 0;
  dba = 0;  // Reset to prevent carry-over; 26jan2012
  if (pos == 8) {  // if a verb; 30jun2011
    quverb = psi;  // for yes-or-no question; 30jun2011
  }  // end of test for incoming verb; 30jun2011
  num = 0;  // test; remove; 18jun2011
  psi = 0;  // test; remove; 30jun2011
}  // End of OldConcept; return to AudInput(); 22aug2011


function NewConcept() {
  ordo = (ordo + 1);  // increment for any word; test; 29jan2012
  nru = (nru + 1);  // 5jan2012
  psi = nru;  // 5jan2012
  fex = nru;  // 5jan2012
  fin = nru;  // 5jan2012
  mfn = 0;  // test; 17jan2012
  act = 24;
  pos = bias;
  RuVocab();  // 5jan2012
  dba = 0;  // reset after storing value; 12jan2012
  fin = 0;
  fex = 0;
  rux = nru;  // 5jan2012
  RuParser();  // 5jan2012
  if (pos == 5) {
    cogpsi = nru;  // for WhatBe; 5jan2012
    cognum = instnum;  // from InStantiate; 27oct2011
    recon = 1;
    topic = nru;  // potentially a query "topic";  5jan2012
    quobj = nru;  // for AskUser; test;  5jan2012
  }
  if (pos == 8) quverb = nru;  // for AskUser; test; 6jan2012
  if (kbcon > 0) {  // if user answers yes-or-no question; 3jul2011
    KbRetro();  // retroactively adjust knowledge base; 3jul2011
    kbcon = 0;  // reset for safety; 3jul2011
  }  // User has had one chance to answer yes-or-no question.
  pos = 0;
  act = 0;
}  // End of NewConcept(); return to AudInput(); 12may2011
 
 
function VisRecog() {  // identification of objects seen by a robot
  if (svo3==0) {  // if no direct object is available; 25sep2011
    for (i = t; i>midway; i--) {  // search for an automatic default
      ruLexicon[i].ruExam();  // examine the Russian lexicon; 10jan2012
      if (ru0 == 760) {  // 760=NICHEGO (nothing); 10jan2012; 19sep2012
        aud = ru8; // hold address for SpeechAct; 10jan2012
        break;  // search no further after finding engram; 25sep2011
      }  // end of test for default "760=NICHEGO"; 19sep2012
    }  // end of Russian lexicon search loop; 10jan2012
  }  // end of test for zero direct object; 25sep2011
}  // End of VisRecog(); return to VerbPhrase(); 25sep2011


function AudRecog() {
  psi = 0;
  act = 8;
  actbase = 0;
  audpsi = 0;  // for safety; 15jan2012
  for (i=spt; i>midway; i--) {
    audMemory[i].audExam();
    if (aud0 == pho) {
      if (aud1 == 0) {
        if (aud3 == 1) {  // if beg=1 on matching no-act aud engram;
         if (audrun < 2) {  // If comparing start of word; 13jul2010
          if (aud4 == 1) {  // If beg-aud0 has ctu=1 continuing,
            if (aud5 > 0) { 
              prc = aud5;  // provisional recognition; 26jan2012
            }  // 15jan2012
            j = (i + 1); // 8apr2009 Target next-in-line time-point.
            audMemory[j].audExam();  // Fetch audNode at i+1
            aud1 = 8;  // 16aug2008 Activate next-in-line char,
            audMemory[j] = new audNode(aud0,aud1,aud2,aud3,aud4,aud5);
            psi = 0;  // Revoke any assignment of a matching psi-tag.
            j = 0;  // reset for safety
          }  // end of test for continuation of beg-aud0
          else
          {                  // 16aug2008 ProfJS p. 582
            if (len == 1) {  // 16aug2008 From MindForth
              monopsi = aud5;
            }  // End of test for one char length.
          }  // End of else-clause; 13jul2010
         }  // End of test for audrun=1 start of word; 13jul2010
        }  // end of test for a beg(inning) non-active aud0
      }  // end of test for matching aud0 with no activation
      audMemory[i].audExam();
      if (aud1 > 0) {
        psi = 0;
        if (aud4 == 1) {
          if (aud5 > 0) {
            prc = aud5;  // provisional recognition? 26jan2012
          }  // 15jan2012
          act = (act + 2);
          psi = 0;
          j = (i + 1);
          audMemory[j].audExam();
          aud1 = act;
          audMemory[j] = new audNode(aud0,aud1,aud2,aud3,aud4,aud5);
          j = 0;
        }
        audMemory[i].audExam();
        if (aud4 == 0) {
          if (len == 2) {
            if (aud1 > 0) {
              psibase = aud5;
            }  // 15apr2009
          }  // 15apr2009
          if (aud1 > 8) {
            if (aud4 == 0) {
              if (aud1 > actbase) {
                psi = aud5;
                subpsi = aud5;
                zad1 = aud5;  // back-one; test; 4feb2012
                sublen = len;
                psibase = aud5;
                Psi[i].psiExam();  // 20jul2011
                if (psi2 > 0) recnum = psi2;  // 20jul2011
                Psi[i+1].psiExam();  // 20jul2011
                if (psi2 > 0) recnum = psi2;  // 20jul2011                
                actbase = aud1;
              }
            }
          }
        }
        else
        {
          if (prc == 0) psi = 0;  // 26jan2012
          if (monopsi > 0) {
            psi = monopsi;
            Psi[i+1].psiExam();  // test; 22jan2012
            recnum = psi2;  // test; 22jan2012
            monopsi = 0;
          }  // End of test for a lurking one-letter word.
        }  // 16aug2008 End of "else" statement.
      }  // End of test for matching aud0 with activation.
    }  // End of test for a character matching "pho".
   if (i == (midway+1)) {  // If a loop reaches midway; 13jul2010
      audrun = (audrun + 1);  // Increment audrun; 13jul2010
   }  // End of test for loop reaching midway; 13jul2010
  }  // End of looping backwards from "spt".
  act = 0;      // 16aug2008 Reset act to zero.
  actbase = 0;  // 16aug2008 Reset to zero.
  if (psibase > 0) {
    psi = psibase;
  }
  if (psi == 0) {
    if (monopsi > 0) {
      if (len < 2) {
        psi = monopsi;
      }
      monopsi = 0;
    }
  }
  psibase = 0;
  if (psi==0 && prc > 0) {  // test; 4feb2012
    psi = prc;  // prov. recog; 26jan2012
  }  // test; 4feb2012
  if (psi == 0) {
    psi = morphpsi;
    if (sublen > 0)  {
      stemgap = (len - sublen);
    }
    if (stemgap < 0) stemgap = 0;
    if (stemgap > 1) subpsi = 0;
    if (stemgap > 1) morphpsi = 0;
    if (stemgap > 1) psi = 0;
  }
  morphpsi = subpsi;
  psibase = 0;
  subpsi = 0;
  if (psi > 0) {
    if (stemgap > 2) {
      psi = 0;
    }
//  if (pho == "S") {  // changes for Russian AI? 25jan2012
//    num = 2;  // perhaps use OutBuffer for Russian plurals
//  }  // Save this location for Russian noun-recognition.
//  else num = 0;  // a default quasi-singular; 6nov2011
    if (recnum > 0) num = recnum;  // override; 20jul2011
  }
  if (psi == 0) psi = prc;  // provisional recognition; 26jan2012
  if (psi == 0 && zad1 > 0) {  // test; 4feb2012
    psi = zad1;  // retrieve back-one recog; 4feb2012
    zad1 = 0;  // reset for safety; 4feb2012
  }  // test; 4feb2012
  audpsi = psi;  // 9dec2009 For transfer from AudRecog() to AudMem()
  morphpsi = 0;  // reset until further notice; 15jan2015
  stemgap = 0;  // safety measure; 25sep2011
}  // End of AudRecog(); return to AudMem(); 15jan2012


function audExam() {
  aud0 = this.pho;
  aud1 = this.act;
  aud2 = this.pov;
  aud3 = this.beg;
  aud4 = this.ctu;
  aud5 = this.audpsi;  // 8dec2009 deglobalizing from "psi"
}


function audNode(pho,act,pov,beg,ctu,audpsi) {
  this.pho = pho;
  this.act = act;
  this.pov = pov;
  this.beg = beg;
  this.ctu = ctu;
  this.audpsi = audpsi;  // 8dec2009 deglobalizing from "psi"
  this.audExam = audExam;
}


function AudMem() {
  if (t > vault) {
    AudRecog();
    if (audpsi == 0) {  // 15jan2012
      if (prc > 0) audpsi = prc;  // prov. recog; 26jan2012
   //   if (prc > 0) { // test; 4feb2012
      prc = 0;  // reset in any case; 26jan2012
    }  // 15jan2012
  }
  tult = (t - 1);
  audMemory[tult].audExam();
  if (aud0 == 0) beg = 1;
  if (aud0 == 0) { 
    spt = tult;
  }
  if (beg == 1) onset = t;
  if (aud0 == " ") beg = 1;
  audMemory[t] = new audNode(pho,0,pov,beg,ctu,audpsi); // 8dec2009
// if (ctu==0) quobj = audpsi; // for AskUser; test; 22jun2011
}  // end of AudMem; return to AudListen or ReEntry; 25jan2012


function Attention() {
  brain = false;
  danger = false;
  freedom = false;
  if (skip < 1) {  
    danger = true;
    TID=window.setTimeout("SeCurity();",20000);
    skip = skip+1;
  }
}


function AudListen() {
  quiet = false;
  apb = "Calling AudListen module; when done press [ENTER]";
  Voice();
  if (skip < 1) {
  Attention();
  }
  inert = 0;
  pov = "*";
  document.onkeypress = function (evt) {
    c = event.keyCode;
    inert = 0;  // User input cancels "inert" status; 18oct2011
    kbtv = 0;
    lurk = 0;  // de-lurk if user enters datum; 29sep2010
    if (c == 63) alert("Please use no punctuation.");
    if (c == 27) {
      brain = false;
      danger = false;
      freedom = false;
    }
    if (c == 27) {
      document.all["cb4"].checked = true;
      Shutdown();
    }
    if (c != 27) {
      if (life == false) {
        life = true;
        apb = ("AI alive again.");
        Voice();
      }
    }
    if (c == 32 || c == 13) {  // space-bar or CR; 12jan2012
      OutBuffer();  // to right-justify word from AudBuffer
      c01=""; c02=""; c03=""; c04="";  // empty AudBuffer
      c05=""; c06=""; c07=""; c08=""; 
      c09=""; c10=""; c11=""; c12=""; 
      c13=""; c14=""; c15=""; c16="";
      if (b16==String.fromCharCode(1070)) {  // "YU" 18jan2012
         num = 1;  // singular verb form; 18jan2012
         dba = 1;  // first person verb form; 18jan2012
         bias = 8; // overrule pre-existing setting; 18jan2012
         pos = 8;  // part of speech is 8=verb; 18jan2012
         b01=""; b02=""; b03=""; b04="";  // 18jan2012
         b05=""; b06=""; b07=""; b08="";  // 18jan2012
         b09=""; b10=""; b11=""; b12="";  // 18jan2012 
         b13=""; b14=""; b15=""; b16="";  // 18jan2012
      }  // end of nested if-clause; 18jan2012
      if (b14==String.fromCharCode(1045)) {  // "E" 18jan2012
        if (b15==String.fromCharCode(1064)) {  // "SH" 18jan2012
          if (b16==String.fromCharCode(1068)) {  // "b" 18jan2012
            num = 1;  // singular verb form; 12jan2012
            dba = 2;  // 2nd person verb form; 12jan2012
            bias = 8; // overrule pre-existing setting; 12jan2012
            pos = 8;  // part of speech is 8=verb; 12jan2012
            b01=""; b02=""; b03=""; b04="";  // 12jan2012
            b05=""; b06=""; b07=""; b08="";  // 12jan2012
            b09=""; b10=""; b11=""; b12="";  // 12jan2012 
            b13=""; b14=""; b15=""; b16="";  // 12jan2012
      } } }  // end of nested if-clauses; 12jan2012
      if (b15==String.fromCharCode(1045)) {  // "E" 18jan2012
        if (b16==String.fromCharCode(1058)) {  // "T" 18jan2012
          num = 1;  // singular verb form; 18jan2012
          dba = 3;  // 3rd person verb form; 18jan2012
          bias = 8; // overrule pre-existing setting; 18jan2012
          pos = 8;  // part of speech is 8=verb; 18jan2012
          b01=""; b02=""; b03=""; b04="";  // 18jan2012
          b05=""; b06=""; b07=""; b08="";  // 18jan2012
          b09=""; b10=""; b11=""; b12="";  // 18jan2012 
          b13=""; b14=""; b15=""; b16="";  // 18jan2012
      } }  // end of nested if-clauses; 18jan2012
      if (b15==String.fromCharCode(1045)) {  // "E" 18jan2012
        if (b16==String.fromCharCode(1052)) {  // "M" 18jan2012
          num = 2;  // plural verb form; 18jan2012
          dba = 1;  // 1st person verb form; 18jan2012
          bias = 8; // overrule pre-existing setting; 18jan2012
          pos = 8;  // part of speech is 8=verb; 18jan2012
          b01=""; b02=""; b03=""; b04="";  // 18jan2012
          b05=""; b06=""; b07=""; b08="";  // 18jan2012
          b09=""; b10=""; b11=""; b12="";  // 18jan2012 
          b13=""; b14=""; b15=""; b16="";  // 18jan2012
      } }  // end of nested if-clauses; 18jan2012
      if (b14==String.fromCharCode(1045)) {  // "E" 18jan2012
        if (b15==String.fromCharCode(1058)) {  // "T" 18jan2012
          if (b16==String.fromCharCode(1045)) {  // "E" 18jan2012
            num = 2;  // plural verb form; 18jan2012
            dba = 2;  // 2nd person verb form; 18jan2012
            bias = 8; // overrule pre-existing setting; 18jan2012
            pos = 8;  // part of speech is 8=verb; 18jan2012
            b01=""; b02=""; b03=""; b04="";  // 18jan2012
            b05=""; b06=""; b07=""; b08="";  // 18jan2012
            b09=""; b10=""; b11=""; b12="";  // 18jan2012 
            b13=""; b14=""; b15=""; b16="";  // 18jan2012
      } } }  // end of nested if-clauses; 18jan2012
      if (b15==String.fromCharCode(1070)) {  // "YU" 18jan2012
        if (b16==String.fromCharCode(1058)) {  // "T" 18jan2012
          num = 2;  // plural verb form; 18jan2012
          dba = 3;  // 3rd person verb form; 18jan2012
          bias = 8; // overrule pre-existing setting; 18jan2012
          pos = 8;  // part of speech is 8=verb; 18jan2012
          b01=""; b02=""; b03=""; b04="";  // 18jan2012
          b05=""; b06=""; b07=""; b08="";  // 18jan2012
          b09=""; b10=""; b11=""; b12="";  // 18jan2012 
          b13=""; b14=""; b15=""; b16="";  // 18jan2012
      } }  // end of nested if-clauses; 18jan2012
    }  // end of test for a space-bar or carriage-return.
    pho = String.fromCharCode(c);
    if (hardcopy == true) {
      inbuffer += pho; 
    }
    ++t;
    if (eot == 13) {
      beg = 1;
      c = 32;
   // output = "";  // end on-screen persistence of output; 6nov2011
   // outputplus = "";  // end on-screen persistence of output.
      phodex = 0;  // reset for AudBuffer(); 12jan2012
    }
    if (c == 32) { // From CR or space-bar; 12jul2010.
      audrun = 1;  // Reset to 1 at end of word; 12jul2010.
      phodex = 0;  // reset for AudBuffer(); 12jan2012
      if (ordo==1) firstword = audpsi;  // 22aug2011
      AudInput();  // To register a space-bar; 12jul2010.
    }  // End of expanded if-clause; 12jul2010.
    beg = 1;
    ctu = 1;
    pho = pho.toUpperCase();
    abc = pho;  // for transfer to AudBuffer; 12jan2012
    AudBuffer();  // to transfer engrams; 12jan2012
    onset = (spt + 1);
    if (onset == t) beg = 1;
    else beg = 0;
    if (c > 32) {
      len = (len + 1);
      AudMem();
    }
    c = " ";
    pho = " ";
    return true;
  }
}  // End of AudListen(); wait for keystroke event; 25jan2012
 

function Tab() {
  document.forms[1].ear.focus();
  fyi = (fyi + 1);
   if (fyi == 0)  {
    document.all.souvenir.innerHTML = "Cycling through display modes.";
    document.all["cb1"].checked = false;
    document.all["cb2"].checked = false;
    document.all["cb3"].checked = false;
    trouble = false;
   }
   if (fyi == 1)  {
    document.all["cb2"].checked = false;
    document.all["cb3"].checked = false;
    trouble = false;
    document.all.psicolumn.innerHTML = "";
    document.all.rucolumn.innerHTML = "";  // 5jan2012
    document.all.audcolumn.innerHTML = "";
    document.all["cb1"].checked = true;
   }
  if (fyi == 2) {
    document.all["cb1"].checked = false;
    document.all.psicolumn.innerHTML = "";
    document.all.rucolumn.innerHTML = "";  // 5jan2012
    document.all.audcolumn.innerHTML = "";
    document.all["cb3"].checked = false;
    trouble = false;
    document.all.souvenir.innerHTML = "Tutorial has been called.";
    document.all.tabula.innerHTML = "Watch the artificial mind think.";
    document.all["cb2"].checked = true;
    tutor = true;
  }
   if (fyi == 3)  {
    document.all["cb1"].checked = false;
    document.all["cb2"].checked = false;
    document.all.souvenir.innerHTML = "Diagnostic mode has been called.";
    document.all.tabula.innerHTML = "Diagnostic troubleshoot mode.";
    document.all["cb3"].checked = true;
    trouble = true;
   }
  if (fyi > 3) {
    document.all["cb1"].checked = false;
    document.all["cb2"].checked = false;
    document.all["cb3"].checked = false;
    trouble = false;
    document.all.psicolumn.innerHTML = ""; 
    document.all.rucolumn.innerHTML = "";  // 5jan2012
    document.all.audcolumn.innerHTML = "";
    document.all.souvenir.innerHTML = "Tab key changes display modes.";
    fyi = 0;
  }
  TID=window.setTimeout("CR();",1000);
}


function CR() {
  document.forms[1].elements[0].value = "";
  if (trouble == true) Diagnostic();
  userline = inbuffer;
  inbuffer = "";
  spt = t;
  audMemory[t] = new audNode(" ",0," "," "," "," ");
  lastword = true;
  audrun = 1; // Reset to 1 at CR end of input; 12jul2010.
  beg = 1;  // no "if CR 13" is required within CR().
  eot = 13; // for use in AudListen() to indicate CR.
  c = 32;   // as if SPACE-BAR "32" were pressed
  phodex = 0;  // a reset at end of word; 12jan2012
  c01=""; c02=""; c03=""; c04=""; c05=""; c06=""; c07=""; c08=""; 
  c09=""; c10=""; c11=""; c12=""; c13=""; c14=""; c15=""; c16="";
  b01=""; b02=""; b03=""; b04=""; b05=""; b06=""; b07=""; b08="";
  b09=""; b10=""; b11=""; b12=""; b13=""; b14=""; b15=""; b16="";
  AudInput();  // Imitating AudListen(); 12jan2012
  eot = 0;
  firstword = 0;  // not valid beyond current input; 1nov2011
  moot = 0;  // assuming end of moot user queries; 1nov2011
  quiet = true;
// output = "";  // end on-screen persistence of output; 6nov2011
// outputplus = "";  // end on-screen persistence of output;
}
 

function AudInput() {
  spt = t;
  upnext = 0;
  if (urpsi > 0) {
    audDamp();
  }
  tult = (t - 1);
  audMemory[tult].audExam();
  audMemory[tult] = new audNode(aud0,aud1,aud2,aud3,0,aud5);
  if (audpsi > 0) {   // concept recognized by AudRecog; 25jan2012
    aud = onset;
    audMemory[tult].audExam();
    if (aud4 == 0) {  // If "continuation" is false; 12may2011
      if (pov == "*") {  // only during input; 15jan2012
        recogcon = true;  // word or stem has been recognized; 15jan2012
      }  // end of test for input-only; 15jan2012
      audMemory[tult] = new audNode(aud0,aud1,aud2,aud3,aud4,audpsi);
    }  // end of "aud4" continuation-test; 15jan2012
    if (recogcon == true) {  // is word recognized? 15jan2012
      if (len > 3) {  // if long enough for inflection; 15jan2012
        audMemory[tult-3].audExam();  // far enough back for stem? 15jan2012
        audMemory[tult-3] = new audNode(aud0,aud1,aud2,aud3,aud4,audpsi);
        audMemory[tult-2].audExam();  // two phonemes back; 15jan2012
        audMemory[tult-2] = new audNode(aud0,aud1,aud2,aud3,aud4,audpsi);
        audMemory[tult-1].audExam();  // penultimate phoneme; 15jan2012
        audMemory[tult-1] = new audNode(aud0,aud1,aud2,aud3,aud4,audpsi);
       }  // end of test of length of recognized word; 15jan2012
       recogcon = false;  // reset after use; 15jan2012
    }  // 15jan2012
    recogcon = false;   // reset; 15jan2012
    oldpsi = audpsi;  // for conformance with MindForth; 3jul2011
    prc = 0; // reset provisional recognition at end of word; 26jan2012
    OldConcept();
    psi = 0;
    audpsi = 0;
    aud5 = 0;  // test; remove; 15jan2012
    aud = 0;
  } else {  // i.e., if AudRecog has not recognized word; 12may2011
 // if (len > 0) {
    if (len > 0 && pho != 32) {  // avoid 32=space-bar; 24jan2012
      aud = onset;
      NewConcept();  // AudInput() calls NewConcept(); 12may2011
      audMemory[tult].audExam();
      if (aud4 == 0) {
        audMemory[tult] = new audNode(aud0,aud1,aud2,aud3,aud4,nru);
      }
    }
  }
  audDamp();
  len = 0;
  onset = 0;
  aud = 0;
} // End of AudInput; return to AudListen(), CR() or ReEntry().

 
function SensoryInput() {
  // navigator.geolocation.getCurrentPosition(lost,found) // 16oct2010
  if (life == true) {
    document.forms[1].ear.focus();
  }
}


function RuBoot() {  // diverging from English AI; 7jan2012
TuringTest();
act = 0;    // 8dec2009
jux = 0;    // 8dec2009
pov = "#";  // 8dec2009
t = 0;      // 8dec2009
spt = t;    // 8dec2009
// 582 OSHIBKA (error) first word so any bug will announce itself 
t=1;c=1054; beg=1; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 7jan2012
t=2;c=1064; beg=0; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 7jan2012
t=3;c=1048; beg=0; ctu=1; audpsi=0;     
    pho = String.fromCharCode(c); AudMem();  // 7jan2012
t=4;c=1041; beg=0; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 7jan2012
t=5;c=1050; beg=0; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 7jan2012
t=6;c=1040; beg=0; ctu=0; audpsi=582; 
    pho = String.fromCharCode(c); AudMem();  // 7jan2012
nru=582; mfn=2; dba=1; fex=582; pos=5; fin=582; aud=1;
psi=582; num=1; pre=0; seq=0; rux=582; RuVocab(); InNativate();

// 270 AVOS' (maybe) for KbRetro to treat as answer; 9jan2012
t=8;c=1040; beg=1; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 9jan2012
t=9;c=1042; beg=0; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 9jan2012
t=10;c=1054; beg=0; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 9jan2012
t=11;c=1057; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem();  // 9jan2012
t=12;c=1068; beg=0; ctu=0; audpsi=270; 
     pho = String.fromCharCode(c); AudMem();  // 9jan2012
nru=270; mfn=0; dba=0; fex=270; pos=2; fin=270; aud=8;
psi=270; num=0; pre=0; seq=0; rux=800; RuVocab(); InNativate();

// 813 BWIVAT' (to occur) verb; infinitive 9jan2012
t=14;c=1041; beg=1; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 9jan2012
t=15;c=1067; beg=0; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 9jan2012
t=16;c=1042; beg=0; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 9jan2012
t=17;c=1040; beg=0; ctu=1; audpsi=813;  // provisional; 15jan2012
    pho = String.fromCharCode(c); AudMem();  // 9jan2012
t=18;c=1058; beg=0; ctu=1; audpsi=813;  // provisional; 15jan2012 
     pho = String.fromCharCode(c); AudMem();  // 7jan2012
t=19;c=1068; beg=0; ctu=0; audpsi=813; 
     pho = String.fromCharCode(c); AudMem();  // 7jan2012
nru=813; mfn=0; dba=0; fex=813; pos=8; fin=813; aud=14;
psi=813; num=0; pre=0; seq=0; rux=813; RuVocab(); InNativate();

// 800 BWIT' (to be) verb; irreg; infinitive 4jan2012
t=21;c=1041; beg=1; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 7jan2012
t=22;c=1067; beg=0; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 7jan2012
t=23;c=1058; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem();  // 7jan2012
t=24;c=1068; beg=0; ctu=0; audpsi=800; 
     pho = String.fromCharCode(c); AudMem();  // 7jan2012
nru=800; mfn=0; dba=0; fex=800; pos=8; fin=800; aud=21;
psi=800; num=0; pre=0; seq=0; rux=800; RuVocab(); InNativate();
 
// 807 BUDU (will be) verb; irreg; 1st person future 4jan2012
t=26;c=1041; beg=1; ctu=1; audpsi=0;
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=27;c=1059; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=28;c=1044; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=29;c=1059; beg=0; ctu=0; audpsi=807; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=807; mfn=0; dba=1; fex=807; pos=8; fin=800; aud=26;
psi=800; num=1; pre=0; seq=0; rux=807; RuVocab(); InNativate();

// 820 VEEDYET' ("to see"); verb; infinitive; 19sep2012
t=31;c=1042; beg=1; ctu=1; audpsi=0; // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=32;c=1048; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=33;c=1044; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=34;c=1045; beg=0; ctu=1; audpsi=820;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=35;c=1058; beg=0; ctu=1; audpsi=820;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=36;c=1068; beg=0; ctu=0; audpsi=820;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
nru=820; mfn=0; dba=0; fex=820; pos=8; fin=820; aud=31; 
psi=820; num=0; pre=0; seq=0; rux=820; RuVocab(); InNativate();

// 820 VEEZHU ("I see"); verb for VisRecog; 19sep2012
t=38;c=1042; beg=1; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=39;c=1048; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=40;c=1046; beg=0; ctu=1; audpsi=820;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=41;c=1059; beg=0; ctu=0; audpsi=820;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
nru=820; mfn=0; dba=1; fex=820; pos=8; fin=820; aud=38; 
psi=820;  num=1; pre=0; seq=0; rux=820; RuVocab(); InNativate();

// 820 VEEDYEESH ("you see"); verb for VisRecog; 19sep2012
t=43;c=1042; beg=1; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=44;c=1048; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=45;c=1044; beg=0; ctu=1; audpsi=820;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=46;c=1048; beg=0; ctu=1; audpsi=820; // prov. 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=47;c=1064; beg=0; ctu=1; audpsi=820; // prov. 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=48;c=1068; beg=0; ctu=0; audpsi=820; // prov. 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
nru=820; mfn=0; dba=2; fex=820; pos=8; fin=820; aud=43; 
psi=820; num=1; pre=0; tqv=0; seq=0; rux=820; RuVocab(); InNativate();

// 820 VEEDYEET ("he sees"); verb for VisRecog; 19sep2012
t=50;c=1042; beg=1; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=51;c=1048; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=52;c=1044; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=53;c=1048; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=54;c=1058; beg=0; ctu=0; audpsi=820;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
nru=820; mfn=0; dba=3; fex=820; pos=8; fin=820; aud=50; 
psi=820;  num=1; pre=0; seq=0; rux=820; RuVocab(); InNativate();

// 820 VEEDYEEM ("we see"); verb for VisRecog; 19sep2012
t=56;c=1042; beg=1; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=57;c=1048; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=58;c=1044; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=59;c=1048; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=60;c=1052; beg=0; ctu=0; audpsi=820;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
nru=820; mfn=0; dba=1; fex=820; pos=8; fin=820; aud=56; 
psi=820;  num=2; pre=0; seq=0; rux=820; RuVocab(); InNativate();

// 820 VEEDYEETYE ("you see"); verb; plural; 19sep2012
t=62;c=1042; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=63;c=1048; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=64;c=1044; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=65;c=1048; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=66;c=1058; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=67;c=1045; beg=0; ctu=0; audpsi=820;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
nru=820; mfn=0; dba=2; fex=820; pos=8; fin=820; aud=62; 
psi=820;  num=2; pre=0; seq=0; rux=820; RuVocab(); InNativate();

// 820 VEEDYAT ("they see"); verb; 3rd pers. plural; 19sep2012
t=69;c=1042; beg=1; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=70;c=1048; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=71;c=1044; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=72;c=1071; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
t=73;c=1058; beg=0; ctu=0; audpsi=820;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 19sep2012
nru=820; mfn=0; dba=3; fex=820; pos=8; fin=820; aud=69; 
psi=820; num=2; pre=0; seq=0; rux=820; RuVocab(); InNativate();

// 737 VWI (you) pronoun; familiar nom. plural; 11jan2012
t=75;c=1042; beg=1; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=76;c=1067; beg=0; ctu=0; audpsi=737;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=737; mfn=0; dba=1; fex=737; pos=7; fin=731; aud=75;
psi=737; num=2; pre=0; seq=0; rux=737; RuVocab(); InNativate();
 
// 737 VAS (of you) pronoun; familiar gen. plural; 23jan2012
t=78;c=1042; beg=1; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=79;c=1040; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=80;c=1057; beg=0; ctu=0; audpsi=737;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=737; mfn=0; dba=2; fex=737; pos=7; fin=731; aud=78;
psi=737; num=2; pre=0; seq=0; rux=737; RuVocab(); InNativate();
 
// 737 VAM (to you) pronoun; familiar dat. plural; 23jan2012
t=82;c=1042; beg=1; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=83;c=1040; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=84;c=1052; beg=0; ctu=0; audpsi=737;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=737; mfn=0; dba=3; fex=737; pos=7; fin=731; aud=82;
psi=737; num=2; pre=0; seq=0; rux=737; RuVocab(); InNativate();
 
// 737 VAS (you) pronoun; familiar acc. plural; 23jan2012
t=86;c=1042; beg=1; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=87;c=1040; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=88;c=1057; beg=0; ctu=0; audpsi=737;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=737; mfn=0; dba=4; fex=737; pos=7; fin=731; aud=86;
psi=737; num=2; pre=0; seq=0; rux=737; RuVocab(); InNativate();
 
// 737 VAMI (you) pron; familiar instrumental plural; 23jan2012
t=90;c=1042; beg=1; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=91;c=1040; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=92;c=1052; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=93;c=1048; beg=0; ctu=0; audpsi=737;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=737; mfn=0; dba=5; fex=737; pos=7; fin=731; aud=90;
psi=737; num=2; pre=0; seq=0; rux=737; RuVocab(); InNativate();
 
// 737 VAS (you) pron; familiar prep. plural; 23jan2012
t=95;c=1042; beg=1; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=96;c=1040; beg=0; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=97;c=1057; beg=0; ctu=0; audpsi=737;       // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=737; mfn=0; dba=6; fex=737; pos=7; fin=731; aud=95;
psi=737; num=2; pre=0; seq=0; rux=737; RuVocab(); InNativate();

// 749 VWI (you) pronoun; formal nom. sing. 2jan2012
t=99;c=1042; beg=1; ctu=1; audpsi=0;         // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=100;c=1067; beg=0; ctu=0; audpsi=749;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=749; mfn=0; dba=1; fex=749; pos=7; fin=701; aud=99;
psi=749; num=1; pre=0; seq=0; rux=749; RuVocab(); InNativate();
 
// 749 VAS (of you) pronoun; formal gen. sing. 22jan2012
t=102;c=1042; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=103;c=1040; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=104;c=1057; beg=0; ctu=0; audpsi=749;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=749; mfn=0; dba=2; fex=749; pos=7; fin=701; aud=102;
psi=749; num=1; pre=0; seq=0; rux=749; RuVocab(); InNativate();

// 749 VAM (to you) pronoun; formal dat. sing. 23jan2012
t=106;c=1042; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=107;c=1040; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=108;c=1052; beg=0; ctu=0; audpsi=749;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=749; mfn=0; dba=3; fex=749; pos=7; fin=701; aud=106;
psi=749; num=1; pre=0; seq=0; rux=749; RuVocab(); InNativate();
 
// 749 VAS (you) pronoun; formal acc. sing. 23jan2012
t=110;c=1042; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=111;c=1040; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=112;c=1057; beg=0; ctu=0; audpsi=749;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=749; mfn=0; dba=4; fex=749; pos=7; fin=701; aud=110;
psi=749; num=1; pre=0; seq=0; rux=749; RuVocab(); InNativate();
 
// 749 VAMI (you) pron; formal instrumental sing. 23jan2012
t=114;c=1042; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=115;c=1040; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=116;c=1052; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=117;c=1048; beg=0; ctu=0; audpsi=749;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=749; mfn=0; dba=5; fex=749; pos=7; fin=701; aud=114;
psi=749; num=1; pre=0; seq=0; rux=749; RuVocab(); InNativate();
 
// 749 VAS (you) pron; formal prep. sing. 23jan2012
t=119;c=1042; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=120;c=1040; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=121;c=1057; beg=0; ctu=0; audpsi=749;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=749; mfn=0; dba=6; fex=749; pos=7; fin=701; aud=119;
psi=749; num=1; pre=0; seq=0; rux=749; RuVocab(); InNativate();

// 755 VWI (you) pronoun; formal nom. plural; 11jan2012
t=123;c=1042; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=124;c=1067; beg=0; ctu=0; audpsi=755;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=755; mfn=0; dba=1; fex=755; pos=7; fin=731; aud=123;
psi=755; num=2; pre=0; seq=0; rux=755; RuVocab(); InNativate();
 
// 755 VAS (of you) pronoun; formal gen. plural 23jan2012
t=126;c=1042; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=127;c=1040; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=128;c=1057; beg=0; ctu=0; audpsi=755;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=755; mfn=0; dba=2; fex=755; pos=7; fin=731; aud=126;
psi=755; num=2; pre=0; seq=0; rux=755; RuVocab(); InNativate();

// 755 VAM (to you) pronoun; formal dat. plural; 23jan2012
t=130;c=1042; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=131;c=1040; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=132;c=1052; beg=0; ctu=0; audpsi=755;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=755; mfn=0; dba=3; fex=755; pos=7; fin=731; aud=130;
psi=755; num=2; pre=0; seq=0; rux=755; RuVocab(); InNativate();
 
// 755 VAS (you) pronoun; formal acc. plural; 23jan2012
t=134;c=1042; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=135;c=1040; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=136;c=1057; beg=0; ctu=0; audpsi=755;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=755; mfn=0; dba=4; fex=755; pos=7; fin=731; aud=134;
psi=755; num=2; pre=0; seq=0; rux=755; RuVocab(); InNativate();
 
// 755 VAMI (you) pron; formal instrumental plural 23jan2012
t=138;c=1042; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=139;c=1040; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=140;c=1052; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=141;c=1048; beg=0; ctu=0; audpsi=755;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=755; mfn=0; dba=5; fex=755; pos=7; fin=731; aud=138; 
psi=755; num=2; pre=0; seq=0; rux=755; RuVocab(); InNativate();
 
// 755 VAS (you) pron; formal prep. plural; 23jan2012
t=143;c=1042; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=144;c=1040; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=145;c=1057; beg=0; ctu=0; audpsi=755;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=755; mfn=0; dba=6; fex=755; pos=7; fin=731; aud=143;
psi=755; num=2; pre=0; seq=0; rux=755; RuVocab(); InNativate();

// 432 DA (yes) interjection 4jan2012
t=147;c=1044; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=148;c=1040; beg=0; ctu=0; audpsi=432;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=432; mfn=0; dba=0; fex=432; pos=4; fin=432; aud=147;
psi=432; num=0; pre=0; seq=0; rux=432; RuVocab(); InNativate();

// 830 DELAT' ("to do"); sample verb; 9jan2012; 19sep2012

// 830 DELAYU ("I do"); sample verb; 19sep2012
t=150;c=1044; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=151;c=1045; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=152;c=1051; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=153;c=1040; beg=0; ctu=1; audpsi=830;      // 22sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=154;c=1070; beg=0; ctu=0; audpsi=830;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
// nru=830; mfn=0; dba=1; fex=821; pos=8; fin=823; aud=150; 
nru=830; mfn=0; dba=1; fex=830; pos=8; fin=830; aud=150; 
// psi=830;  num=1; pre=0; seq=0; rux=821; RuVocab(); InNativate();
psi=830;  num=1; pre=0; seq=0; rux=830; RuVocab(); InNativate();

// 514 DETYI (children) noun; plural; 9jan2012
t=156;c=1044; beg=1; ctu=1; audpsi=0;
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=157;c=1045; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=158;c=1058; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=159;c=1048; beg=0; ctu=0; audpsi=807; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
nru=514; mfn=0; dba=1; fex=514; pos=5; fin=514; aud=156;
psi=514; num=2; pre=0; seq=0; rux=514; RuVocab(); InNativate();
 
// 840 DUMAT' ("to think"); verb; infinitive; 19sep2012
t=161;c=1044; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=162;c=1059; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=163;c=1052; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=164;c=1040; beg=0; ctu=1; audpsi=840;  // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=165;c=1058; beg=0; ctu=1; audpsi=840;  // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=166;c=1068; beg=0; ctu=0; audpsi=840;  // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=840; mfn=0; dba=0; fex=840; pos=8; fin=840; aud=161; 
psi=840;  num=0; pre=0; seq=0; rux=840; RuVocab(); InNativate();

// 521 DUSHKA ("little soul"); name of the Russian AI; 4jan2012
t=168;c=1044; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=169;c=1059; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=170;c=1064; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=171;c=1050; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=172;c=1040; beg=0; ctu=0; audpsi=521; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=521; mfn=2; dba=1; fex=521; pos=5; fin=521; aud=168; 
psi=521;  num=1; pre=0; seq=0; rux=521; RuVocab(); InNativate();
 
// 803 YEST' ("there is"); verb; 4jan2012
t=174;c=1045; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=175;c=1057; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=176;c=1058; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=177;c=1068; beg=0; ctu=0; audpsi=803; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=803; mfn=0; dba=3; fex=803; pos=8; fin=803; aud=174;
psi=803; num=1; pre=0; seq=0; rux=803; RuVocab(); InNativate();
 
// 850 ZNAT' ("to know"); sample verb; 19sep2012
t=179;c=1047; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=180;c=1053; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=181;c=1040; beg=0; ctu=1; audpsi=850;  // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=182;c=1058; beg=0; ctu=1; audpsi=850;  // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=183;c=1068; beg=0; ctu=0; audpsi=850;  // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=850; mfn=0; dba=0; fex=850; pos=8; fin=850; aud=179;
psi=850; num=0; pre=0; seq=0; rux=850; RuVocab(); InNativate();
 
// 360 EE ("and") conjunction; 4jan2012
t=185;c=1048; beg=1; ctu=0; audpsi=360; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=360; mfn=0; dba=0; fex=360; pos=3; fin=360; aud=185;
psi=360; num=0; pre=0; seq=0; rux=360; RuVocab(); InNativate();

// 340 ILI (or) conjunction; 9jan2012
t=187;c=1048; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=188;c=1051; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=189;c=1048; beg=0; ctu=0; audpsi=340; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=340; mfn=0; dba=0; fex=340; pos=3; fin=340; aud=187;
psi=340; num=0; pre=0; seq=0; rux=340; RuVocab(); InNativate();

// 266 INACHE ("else"); conjunction; 9jan2012
t=191;c=1048; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=192;c=1053; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=193;c=1040; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=194;c=1063; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=195;c=1045; beg=0; ctu=0; audpsi=266;      // 5sep2012
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
nru=266; mfn=0; dba=0; fex=266; pos=3; fin=266; aud=191; 
psi=266;  num=0; pre=0; seq=0; rux=266; RuVocab(); InNativate();

// 791 KTO (who) pronoun; 9jan2012
t=197;c=1050; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=198;c=1058; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=199;c=1054; beg=0; ctu=0; audpsi=791; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
nru=791; mfn=0; dba=1; fex=791; pos=7; fin=791; aud=197;
psi=791; num=1; pre=0; seq=0; rux=791; RuVocab(); InNativate();

// 320 LI (whether) adverb; 9jan2012
t=201;c=1051; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=202;c=1048; beg=0; ctu=0; audpsi=250; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
nru=320; mfn=0; dba=0; fex=320; pos=3; fin=320; aud=201;
psi=320; num=0; pre=0; seq=0; rux=320; RuVocab(); InNativate();

// 587 LYUDI (people) noun; plural; 4jan2012
t=204;c=1051; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=205;c=1070; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=206;c=1044; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=207;c=1048; beg=0; ctu=0; audpsi=587; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=587; mfn=0; dba=1; fex=587; pos=5; fin=587; aud=204;
psi=587; num=2; pre=0; seq=0; rux=587; RuVocab(); InNativate();

// 731 MWI (we) pronoun; 10jan2012
t=209;c=1052; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=210;c=1067; beg=0; ctu=0; audpsi=731; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
nru=731; mfn=0; dba=1; fex=731; pos=7; fin=737; aud=209;
psi=731; num=2; pre=0; seq=0; rux=731; RuVocab(); InNativate();

// 731 NAS (us) pron. genitive plural; 23jan2012
t=212;c=1053; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=213;c=1040; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=214;c=1057; beg=0; ctu=0; audpsi=731;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=731; mfn=0; dba=2; fex=731; pos=7; fin=737; aud=212;
psi=731; num=2; pre=0; seq=0; rux=731; RuVocab(); InNativate();

// 731 NAM (to us) pron. dative plural; 23jan2012
t=216;c=1053; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=217;c=1040; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=218;c=1052; beg=0; ctu=0; audpsi=733; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=731; mfn=0; dba=3; fex=731; pos=7; fin=737; aud=216;
psi=731; num=2; pre=0; seq=0; rux=731; RuVocab(); InNativate();

// 731 NAS (us) pron. accusative plural; 23jan2012
t=220;c=1053; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=221;c=1040; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=222;c=1057; beg=0; ctu=0; audpsi=731;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=731; mfn=0; dba=2; fex=731; pos=7; fin=737; aud=220;
psi=731; num=2; pre=0; seq=0; rux=731; RuVocab(); InNativate();

// 731 NAMI (us) pron; instrumental plural; 23jan2012
t=224;c=1053; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=225;c=1040; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=226;c=1052; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=227;c=1048; beg=0; ctu=0; audpsi=731;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=731; mfn=0; dba=5; fex=731; pos=7; fin=737; aud=224;
psi=731; num=1; pre=0; seq=0; rux=731; RuVocab(); InNativate();

// 731 NAS (us) pron. prepositional plural; 23jan2012
t=229;c=1053; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=230;c=1040; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=231;c=1057; beg=0; ctu=0; audpsi=731;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=731; mfn=0; dba=6; fex=731; pos=7; fin=737; aud=229;
psi=731; num=2; pre=0; seq=0; rux=731; RuVocab(); InNativate();
 
// 250 NYE (not) adverb for negation; 2jan2012
t=233;c=1053; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=234;c=1045; beg=0; ctu=0; audpsi=250;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=250; mfn=0; dba=0; fex=250; pos=2; fin=250; aud=233;
psi=250; num=0; pre=0; seq=0; rux=250; RuVocab(); InNativate();
 
// 427 NYET (no) interjection; 4jan2012
t=236;c=1053; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=237;c=1045; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=238;c=1058; beg=0; ctu=0; audpsi=427;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=427; mfn=0; dba=0; fex=427; pos=4; fin=427; aud=236;
psi=427; num=0; pre=0; seq=0; rux=427; RuVocab(); InNativate();
 
// 228 NYETU (is not) adverb; 9jan2012
t=240;c=1053; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=241;c=1045; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=242;c=1058; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=243;c=1059; beg=0; ctu=0; audpsi=228;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
nru=228; mfn=0; dba=0; fex=228; pos=2; fin=228; aud=240;
psi=228; num=0; pre=0; seq=0; rux=228; RuVocab(); InNativate();

// 760 NICHEGO ("nothing"); pronoun; 26jan2012
t=245;c=1053; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=246;c=1048; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=247;c=1063; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=248;c=1045; beg=0; ctu=1; audpsi=0;        // 19sep2102
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=249;c=1043; beg=0; ctu=1; audpsi=0;        // 19sep2102
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=250;c=1054; beg=0; ctu=0; audpsi=760;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
nru=760; mfn=3; dba=4; fex=760; pos=7; fin=760; aud=245;
psi=760; num=1; pre=0; seq=0; rux=760; RuVocab(); InNativate();

// 713 ON (he) pronoun; nom. sing. masc. 10jan2012
t=252;c=1054; beg=1; ctu=1; audpsi=0;        // 19sep2102
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=253;c=1053; beg=0; ctu=0; audpsi=713;      // 19sep2102
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
nru=713; mfn=1; dba=1; fex=713; pos=7; fin=713; aud=252;
psi=713; num=1; pre=0; seq=0; rux=713; RuVocab(); InNativate();

// 713 EGO (of him) pronoun; gen. sing. masc. 23jan2012
t=255;c=1045; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=256;c=1043; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=257;c=1054; beg=0; ctu=0; audpsi=713;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=713; mfn=1; dba=2; fex=713; pos=7; fin=713; aud=255;
psi=713; num=1; pre=0; seq=0; rux=713; RuVocab(); InNativate();

// 713 EMU (to him) pronoun; dat. sing. masc. 23jan2012
t=259;c=1045; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=260;c=1052; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=261;c=1059; beg=0; ctu=0; audpsi=713;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=713; mfn=1; dba=3; fex=713; pos=7; fin=713; aud=259;
psi=713; num=1; pre=0; seq=0; rux=713; RuVocab(); InNativate();

// 713 EGO (him) pronoun; acc. sing. masc. 23jan2012
t=263;c=1045; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=264;c=1043; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=265;c=1054; beg=0; ctu=0; audpsi=713;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=713; mfn=1; dba=4; fex=713; pos=7; fin=713; aud=263;
psi=713; num=1; pre=0; seq=0; rux=713; RuVocab(); InNativate();

// 713 IM (him) pronoun; instrumental sing. masc. 23jan2012
t=267;c=1048; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=268;c=1052; beg=0; ctu=0; audpsi=713;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
nru=713; mfn=1; dba=5; fex=713; pos=7; fin=713; aud=267;
psi=713; num=1; pre=0; seq=0; rux=713; RuVocab(); InNativate();

// 713 NYOM (him) pronoun; prepositional sing. masc. 23jan2012
t=270;c=1053; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=271;c=1025; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=272;c=1052; beg=0; ctu=0; audpsi=717;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=713; mfn=1; dba=6; fex=713; pos=7; fin=713; aud=270;
psi=713; num=1; pre=0; seq=0; rux=713; RuVocab(); InNativate();

// 719 ONA (she) pronoun; nom. sing. fem. 10jan2012
t=274;c=1054; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=275;c=1053; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=276;c=1040; beg=0; ctu=0; audpsi=719;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=719; mfn=2; dba=1; fex=719; pos=7; fin=719; aud=274;
psi=719; num=1; pre=0; seq=0; rux=719; RuVocab(); InNativate();

// 719 YEYO (of her) pronoun; gen. sing. fem. 23jan2012
t=277;c=1045; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=278;c=1025; beg=0; ctu=0; audpsi=719;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
nru=719; mfn=2; dba=2; fex=719; pos=7; fin=719; aud=277;
psi=719; num=1; pre=0; seq=0; rux=719; RuVocab(); InNativate();

// 719 YEY (to her) pronoun; dat. sing. fem. 23jan2012
t=280;c=1045; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=281;c=1049; beg=0; ctu=0; audpsi=719;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
nru=719; mfn=2; dba=3; fex=719; pos=7; fin=719; aud=280;
psi=719; num=1; pre=0; seq=0; rux=719; RuVocab(); InNativate();

// 719 YEYO (her) pronoun; acc. sing. fem. 23jan2012
t=283;c=1045; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=284;c=1025; beg=0; ctu=0; audpsi=719;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
nru=719; mfn=2; dba=4; fex=719; pos=7; fin=719; aud=283;
psi=719; num=1; pre=0; seq=0; rux=719; RuVocab(); InNativate();

// 719 YEY (her) pronoun; instrumental. sing. fem. 23jan2012
t=286;c=1045; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=287;c=1049; beg=0; ctu=0; audpsi=719;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
nru=719; mfn=2; dba=5; fex=719; pos=7; fin=719; aud=286;
psi=719; num=1; pre=0; seq=0; rux=719; RuVocab(); InNativate();

// 719 NYEY (her) pronoun; prepositional sing. fem. 19jan2012
t=289;c=1053; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=290;c=1045; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=291;c=1049; beg=0; ctu=0; audpsi=719;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=719; mfn=2; dba=6; fex=719; pos=7; fin=719; aud=289;
psi=719; num=1; pre=0; seq=0; rux=719; RuVocab(); InNativate();

// 725 ONO (it) pronoun; nom. sing. neuter; 10jan2012
t=293;c=1054; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=294;c=1053; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=295;c=1054; beg=0; ctu=0; audpsi=725;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=725; mfn=3; dba=1; fex=725; pos=7; fin=725; aud=293;
psi=725; num=1; pre=0; seq=0; rux=725; RuVocab(); InNativate();

// 725 EGO (of it) pronoun; gen. sing. neuter; 23jan2012
t=297;c=1045; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=298;c=1043; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=299;c=1054; beg=0; ctu=0; audpsi=725;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=725; mfn=3; dba=2; fex=725; pos=7; fin=725; aud=297;
psi=725; num=1; pre=0; seq=0; rux=725; RuVocab(); InNativate();

// 725 EMU (to it) pronoun; dat. sing. neuter; 23jan2012
t=301;c=1045; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=302;c=1052; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=303;c=1059; beg=0; ctu=0; audpsi=725;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=725; mfn=3; dba=3; fex=725; pos=7; fin=725; aud=301;
psi=725; num=1; pre=0; seq=0; rux=725; RuVocab(); InNativate();

// 725 EGO (it) pronoun; acc. sing. neuter; 23jan2012
t=305;c=1045; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=306;c=1043; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=307;c=1054; beg=0; ctu=0; audpsi=725;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=725; mfn=3; dba=4; fex=725; pos=7; fin=725; aud=305;
psi=725; num=1; pre=0; seq=0; rux=725; RuVocab(); InNativate();

// 725 IM (it) pronoun; instrumental sing. neuter; 23jan2012
t=309;c=1048; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=310;c=1052; beg=0; ctu=0; audpsi=725;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
nru=725; mfn=3; dba=5; fex=725; pos=7; fin=725; aud=309;
psi=725; num=1; pre=0; seq=0; rux=725; RuVocab(); InNativate();

// 725 NYOM (it) pronoun; prepositional sing. neuter; 23jan2012
t=312;c=1053; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=313;c=1025; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=314;c=1052; beg=0; ctu=0; audpsi=725;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=725; mfn=3; dba=6; fex=725; pos=7; fin=725; aud=312;
psi=725; num=1; pre=0; seq=0; rux=725; RuVocab(); InNativate();

// 743 ONI (they) pronoun; nom. plural; 10jan2012
t=316;c=1054; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=317;c=1053; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=318;c=1048; beg=0; ctu=0; audpsi=743;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
nru=743; mfn=0; dba=1; fex=743; pos=7; fin=743; aud=316;
psi=743; num=2; pre=0; seq=0; rux=743; RuVocab(); InNativate();

// 743 IKH (of them) pronoun; gen. plural 23jan2012
t=320;c=1048; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=321;c=1061; beg=0; ctu=0; audpsi=743;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
nru=743; mfn=0; dba=2; fex=743; pos=7; fin=743; aud=320;
psi=743; num=2; pre=0; seq=0; rux=743; RuVocab(); InNativate();

// 743 IM (to them) pronoun; dative plural; 23jan2012
t=323;c=1048; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=324;c=1052; beg=0; ctu=0; audpsi=743;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
nru=743; mfn=0; dba=3; fex=743; pos=7; fin=743; aud=323;
psi=743; num=2; pre=0; seq=0; rux=743; RuVocab(); InNativate();

// 743 IKH (them) pronoun; acc. plural 23jan2012
t=326;c=1048; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
t=327;c=1061; beg=0; ctu=0; audpsi=743;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  9jan2012
nru=743; mfn=0; dba=4; fex=743; pos=7; fin=743; aud=326;
psi=743; num=2; pre=0; seq=0; rux=743; RuVocab(); InNativate();

// 743 IMI (them) pronoun; instrumental plural; 23jan2012
t=329;c=1048; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=330;c=1052; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); //  7jan2012
t=331;c=1048; beg=0; ctu=0; audpsi=743;  // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=743; mfn=0; dba=5; fex=743; pos=7; fin=743; aud=329;
psi=743; num=2; pre=0; seq=0; rux=743; RuVocab(); InNativate();

// 743 NIKH (they) pronoun; prepositional plural; 23jan2012
t=333;c=1053; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=334;c=1048; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=335;c=1061; beg=0; ctu=0; audpsi=743;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=743; mfn=0; dba=6; fex=743; pos=7; fin=743; aud=333;
psi=743; num=2; pre=0; seq=0; rux=743; RuVocab(); InNativate();

// 870 PONIMAT' ("to understand"); sample verb; 19sep2012
t=337;c=1055; beg=1; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=338;c=1054; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=339;c=1053; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=340;c=1048; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=341;c=1052; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=342;c=1040; beg=0; ctu=1; audpsi=870;  // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=343;c=1058; beg=0; ctu=1; audpsi=870;  // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=344;c=1068; beg=0; ctu=0; audpsi=870;  // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=870; mfn=0; dba=0; fex=870; pos=8; fin=870; aud=337;
psi=870; num=0; pre=0; seq=0; rux=870; RuVocab(); InNativate();

// 370 POCHEMU ("why"); conjunction; 9jan2012
t=346;c=1055; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=347;c=1054; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=348;c=1063; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=349;c=1045; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=350;c=1052; beg=0; ctu=1; audpsi=0;        // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=351;c=1059; beg=0; ctu=0; audpsi=370;      // 19sep2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=370; mfn=0; dba=0; fex=370; pos=3; fin=370; aud=346;
psi=370; num=0; pre=0; seq=0; rux=370; RuVocab(); InNativate();
}}}