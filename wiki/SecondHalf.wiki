#summary Second half of Russian AI Mind
#labels source

{{{
// 571 ROBOT ("robot"); noun; nominative 4jan2012
t=362;c=1056; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=363;c=1054; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=364;c=1041; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=365;c=1054; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=366;c=1058; beg=0; ctu=0; audpsi=571; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=571; mfn=1; dba=1; fex=571; pos=5; fin=571; aud=362; 
psi=571;  num=1; pre=0; seq=0; rux=571; RuVocab(); InNativate();

// 680 S ("with") preposition; 4jan2012
t=368;c=1057; beg=1; ctu=0; audpsi=680; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=680; mfn=0; dba=0; fex=680; pos=6; fin=680; aud=368;
psi=680; num=0; pre=0; seq=0; rux=680; RuVocab(); InNativate();
 
// 681 SO ("with") preposition; 4jan2012
t=370;c=1057; beg=1; ctu=1; audpsi=0; AudMem();
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=371;c=1054; beg=0; ctu=0; audpsi=681; AudMem();
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
nru=681; mfn=0; dba=0; fex=681; pos=6; fin=680; aud=370;
psi=680; num=0; pre=0; seq=0; rux=681; RuVocab(); InNativate();

// 170 TAKOYE ("such"); adjective; 9jan2012
t=373;c=1058; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=374;c=1040; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=375;c=1050; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=376;c=1054; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=377;c=1045; beg=0; ctu=0; audpsi=170; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
nru=170; mfn=3; dba=1; fex=170; pos=1; fin=170; aud=373;
psi=170; num=0; pre=0; seq=0; rux=170; RuVocab(); InNativate();

// 880 TREBOVAT' ("to demand"); verb; infinitive; 4jan2012
t=379;c=1058; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=380;c=1056; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=381;c=1045; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=382;c=1041; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=383;c=1054; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=384;c=1042; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=385;c=1040; beg=0; ctu=1; audpsi=880;  // provisional; 15jan2012 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=386;c=1058; beg=0; ctu=1; audpsi=880;  // provisional; 15jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=387;c=1068; beg=0; ctu=0; audpsi=880; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=880; mfn=0; dba=0; fex=880; pos=8; fin=880; aud=379;
psi=880; num=0; pre=0; seq=0; rux=880; RuVocab(); InNativate();
 
// 707 TY ("you") pronoun; familiar; nom. sing. 11jan2012
t=389;c=1058; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=390;c=1067; beg=0; ctu=0; audpsi=707; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=707; mfn=0; dba=1; fex=707; pos=7; fin=701; aud=389;
psi=707; num=1; pre=0; seq=0; rux=707; RuVocab(); InNativate();
 
// 707 TEBYA ("of you") pronoun; familiar; gen. sing. 21jan2012
t=392;c=1058; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=393;c=1045; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=394;c=1041; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=395;c=1071; beg=0; ctu=0; audpsi=707;  // 21jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=707; mfn=0; dba=2; fex=707; pos=7; fin=701; aud=392;
psi=707; num=1; pre=0; seq=0; rux=707; RuVocab(); InNativate();

// 707 TEBYE ("to you") pronoun; familiar; dat. sing. 4jan2012
t=397;c=1058; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=398;c=1045; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=399;c=1041; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=400;c=1045; beg=0; ctu=0; audpsi=707;  // 21jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=707; mfn=0; dba=3; fex=707; pos=7; fin=701; aud=397;
psi=707; num=1; pre=0; seq=0; rux=707; RuVocab(); InNativate();
 
// 707 TEBYA ("you") pronoun; familiar; acc. sing. 21jan2012
t=402;c=1058; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=403;c=1045; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=404;c=1041; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=405;c=1071; beg=0; ctu=0; audpsi=707;  // 21jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=707; mfn=0; dba=4; fex=707; pos=7; fin=701; aud=402;
psi=707; num=1; pre=0; seq=0; rux=707; RuVocab(); InNativate();
 
// 707 TOBOY ("you") pronoun; familiar; instrumental sing. 21jan2012
t=407;c=1058; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=408;c=1054; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=409;c=1041; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=410;c=1054; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=411;c=1049; beg=0; ctu=0; audpsi=701;  // 21jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=707; mfn=0; dba=5; fex=707; pos=7; fin=701; aud=407;
psi=707; num=1; pre=0; seq=0; rux=707; RuVocab(); InNativate();

// 707 TEBYE ("you") pronoun; familiar; prep. sing. 4jan2012
t=413;c=1058; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=414;c=1045; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=415;c=1041; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=416;c=1045; beg=0; ctu=0; audpsi=707;  // 21jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=707; mfn=0; dba=6; fex=707; pos=7; fin=701; aud=413;
psi=707; num=1; pre=0; seq=0; rux=707; RuVocab(); InNativate();

// 816 KHOCHU ("want") verb; 1st pers. sing. 11jan2012
t=418;c=1061; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=419;c=1054; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=420;c=1063; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
t=421;c=1059; beg=0; ctu=0; audpsi=816; 
     pho = String.fromCharCode(c); AudMem(); // 9jan2012
nru=816; mfn=0; dba=6; fex=816; pos=8; fin=816; aud=418;
psi=811; num=1; pre=0; seq=0; rux=616; RuVocab(); InNativate();

// 581 CHELOVEK ("human being") noun; nom. sing. 4jan2012
t=423;c=1063; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=424;c=1045; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=425;c=1051; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=426;c=1054; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=427;c=1042; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=428;c=1045; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=429;c=1050; beg=0; ctu=0; audpsi=581; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=581; mfn=1; dba=1; fex=581; pos=5; fin=581; aud=423; 
psi=581;  num=1; pre=0; seq=0; rux=581; RuVocab(); InNativate();

// 781 CHTO (what) pronoun; nominative singular 10jan2012
t=431;c=1063; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=432;c=1058; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=433;c=1054; beg=0; ctu=0; audpsi=781; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=781; mfn=3; dba=1; fex=781; pos=7; fin=781; aud=431; 
psi=781; num=1; pre=0; seq=0; rux=781; RuVocab(); InNativate();

// 310 CHTO (that) conjunction; 10jan2012
t=435;c=1063; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=436;c=1058; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=437;c=1054; beg=0; ctu=0; audpsi=310; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=310; mfn=0; dba=0; fex=310; pos=3; fin=310; aud=435;
psi=310; num=0; pre=0; seq=0; rux=310; RuVocab(); InNativate();

// 701 YA (I) pronoun; nom. sing. 2jan2012
t=439;c=1071; beg=1; ctu=0; audpsi=701; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=701; mfn=0; dba=1; fex=701; pos=7; fin=707; aud=439;
psi=701; num=1; pre=0; seq=831; rux=701; RuVocab(); InNativate();
 
// 701 MENYA ("of me") pronoun; familiar; gen. sing. 21jan2012
t=441;c=1052; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=442;c=1045; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=443;c=1053; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=444;c=1071; beg=0; ctu=0; audpsi=701;  // 21jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=701; mfn=0; dba=2; fex=701; pos=7; fin=707; aud=441;
psi=701; num=1; pre=0; seq=0; rux=701; RuVocab(); InNativate();

// 701 MNYE ("to me") pronoun; familiar; dat. sing. 21jan2012
t=446;c=1052; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=447;c=1053; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=448;c=1045; beg=0; ctu=0; audpsi=701;  // 21jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=701; mfn=0; dba=3; fex=701; pos=7; fin=707; aud=446;
psi=701; num=1; pre=0; seq=0; rux=701; RuVocab(); InNativate();

// 701 MENYA ("me") pronoun; familiar; acc. sing. 21jan2012
t=450;c=1052; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=451;c=1045; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=452;c=1053; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=453;c=1071; beg=0; ctu=0; audpsi=701;  // 21jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=701; mfn=0; dba=4; fex=701; pos=7; fin=707; aud=450;
psi=701; num=1; pre=0; seq=0; rux=701; RuVocab(); InNativate();

// 701 MNOY ("me") pronoun; familiar; instr. sing. 4jan2012
t=455;c=1052; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=456;c=1053; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=457;c=1054; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=458;c=1049; beg=0; ctu=0; audpsi=701;  // 21jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=701; mfn=0; dba=5; fex=701; pos=7; fin=707; aud=455;
psi=701; num=1; pre=0; seq=0; rux=701; RuVocab(); InNativate();

// 701 MNYE ("me") pronoun; familiar; prep. sing. 21jan2012
t=460;c=1052; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=461;c=1053; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=462;c=1045; beg=0; ctu=0; audpsi=701;  // 21jan2012
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
nru=701; mfn=0; dba=6; fex=701; pos=7; fin=707; aud=460;
psi=701; num=1; pre=0; seq=0; rux=701; RuVocab(); InNativate();

// 707 TY ("you") pronoun; familiar; nom. sing. 23jan2012
t=464;c=1058; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=465;c=1067; beg=0; ctu=0; audpsi=707; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
nru=707; mfn=0; dba=1; fex=707; pos=7; fin=701; aud=464;
psi=707; num=1; pre=0; seq=830; rux=707; RuVocab(); InNativate();

// 830 DUMAYESH ("think"); verb; 2nd person sing. 23jan2012
t=467;c=1044; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=468;c=1059; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=469;c=1052; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=470;c=1040; beg=0; ctu=1; audpsi=830;  // provisional; 23jan2012 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=471;c=1045; beg=0; ctu=1; audpsi=830;  // provisional; 23jan2012 
     pho = String.fromCharCode(c); AudMem(); // 7jan2012
t=472;c=1064; beg=0; ctu=1; audpsi=830;  // provisional; 23jan2012 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=473;c=1068; beg=0; ctu=0; audpsi=830; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
nru=830; mfn=0; dba=2; fex=830; pos=8; fin=830; aud=467; 
psi=830;  num=1; pre=0; tqv=0;seq=0; rux=830; RuVocab(); InNativate();
 
// 787 CHTO-NIBUD (something) pronoun; acc. singular 23jan2012
t=475;c=1063; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=476;c=1058; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=477;c=1054; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=478;c=45; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=479;c=1053; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=480;c=1048; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=481;c=1041; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=482;c=1059; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=483;c=1044; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=484;c=1068; beg=0; ctu=0; audpsi=787;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
nru=787; mfn=3; dba=1; fex=787; pos=7; fin=787; aud=475; 
psi=787; num=1; pre=0; seq=0; rux=787; RuVocab(); InNativate();

// 587 LYUDI (people) noun; plural; 23jan2012
t=486;c=1051; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=487;c=1070; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=488;c=1044; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=489;c=1048; beg=0; ctu=0; audpsi=587; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
nru=587; mfn=0; dba=1; fex=587; pos=5; fin=587; aud=486;
psi=587; num=2; pre=0; seq=0; rux=587; RuVocab(); InNativate();

// 890 CHITAYUT ("they read"); verb; 3rd pers. plural; 23jan2012
t=491;c=1063; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=492;c=1048; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=493;c=1058; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=494;c=1040; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=495;c=1070; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=496;c=1058; beg=0; ctu=0; audpsi=890;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
nru=890; mfn=0; dba=3; fex=890; pos=8; fin=890; aud=491; 
psi=890;  num=2; pre=0; seq=0; rux=890; RuVocab(); InNativate();

// 540 KNIGI (books) noun, acc. plural; 23jan2012
t=498;c=1050; beg=1; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 23jan2012
t=499;c=1053; beg=1; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 23jan2012
t=500;c=1048; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem();  // 23jan2012
t=501;c=1043; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem();  // 23jan2012
t=502;c=1048; beg=0; ctu=0; audpsi=540; 
     pho = String.fromCharCode(c); AudMem();  // 23jan2012
nru=540; mfn=2; dba=4; fex=540; pos=5; fin=540; aud=498;
psi=540; num=2; pre=0; seq=0; rux=540; RuVocab(); InNativate();

// 701 YA (I) pronoun; nom. sing. 23jan2012
t=504;c=1071; beg=1; ctu=0; audpsi=701; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
nru=701; mfn=0; dba=1; fex=701; pos=7; fin=707; aud=504;
psi=701; num=1; pre=0; seq=860; rux=701; RuVocab(); InNativate();

// 860 PONIMAYU ("understand"); verb; 1st person sing; 23jan2012
t=506;c=1055; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); //23jan2012
t=507;c=1054; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); //23jan2012
t=508;c=1053; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); //23jan2012
t=509;c=1048; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=510;c=1052; beg=0; ctu=1; audpsi=860;  // provisional; 23jan2012 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=511;c=1040; beg=0; ctu=1; audpsi=860;  // provisional; 23jan2012 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=512;c=1070; beg=0; ctu=0; audpsi=860; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
nru=860; mfn=0; dba=1; fex=860; pos=8; fin=860; aud=506;
psi=860; num=1; pre=701; tqv=517; seq=707; rux=860; RuVocab(); InNativate();

// 707 TEBYA ("you") pronoun; familiar; acc. sing. 23jan2012
t=514;c=1058; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=515;c=1045; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=516;c=1041; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=517;c=1071; beg=0; ctu=0; audpsi=707;  // 23jan2012
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
nru=707; mfn=0; dba=4; fex=707; pos=7; fin=701; aud=514;
psi=707; num=1; pre=0; seq=0; rux=707; RuVocab(); InNativate();
 
// 501 BOG (God) noun, singular; 9jan2012
t=519;c=1041; beg=1; ctu=1; audpsi=0; 
    pho = String.fromCharCode(c); AudMem();  // 9jan2012
t=520;c=1054; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem();  // 9jan2012
t=521;c=1043; beg=0; ctu=0; audpsi=501; 
     pho = String.fromCharCode(c); AudMem();  // 9jan2012
nru=501; mfn=1; dba=1; fex=501; pos=5; fin=501; aud=519;
psi=501; num=1; pre=0; seq=840; rux=501; RuVocab(); InNativate();

// 840 ZNAYET ("knows"); verb; 3rd person sing. 23jan2012
t=523;c=1047; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=524;c=1053; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=525;c=1040; beg=0; ctu=1; audpsi=840;  // provisional; 23jan2012
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=526;c=1045; beg=0; ctu=1; audpsi=840;  // provisional; 23jan2012 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=527;c=1058; beg=0; ctu=0; audpsi=840; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
nru=840; mfn=0; dba=3; fex=840; pos=8; fin=840; aud=523;
psi=840; num=1; pre=0; seq=777; rux=840; RuVocab(); InNativate();

// 777 VSYO (everything) pronoun; accusative singular 23jan2012
t=529;c=1042; beg=1; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=530;c=1057; beg=0; ctu=1; audpsi=0; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
t=531;c=1025; beg=0; ctu=0; audpsi=777; 
     pho = String.fromCharCode(c); AudMem(); // 23jan2012
nru=777; mfn=3; dba=4; fex=777; pos=7; fin=777; aud=529; 
psi=777; num=1; pre=0; seq=0; rux=777; RuVocab(); InNativate();
// t = 476;  // approximate source of "vault" value; 9jan2012
t = 532;  // approximate source of "vault" value; 23jan2012
  audpsi = 0;  // lest pass through AudInput to EnParser; 22aug2011
  indefartcon = 0;  // lest WHO trigger EnArticle; 17jun2011
  psi = 0;
  pre = 0;
  t = (t+1);
  vault = t;
  t = (t+1);
// tqv = 0;  // Reset; 23jan2012
// tqv = 0;  // C-ing out as test on 23aug2012
  spt = t;
  nlt = t;
  tov = t;  // For the sake of EnReify(); 24may2011
  pho=" ";
  nru = 900; // to avoid confusion with verbs; 12jan2012 
  bias = 5;  // from MindForth; 15oct2010
  lurk = 0;  // 15oct2010
  mfn = 0;  // prevent carry-over; 15oct2010
  num = 0;
  apb = "RuBoot: Russian bootstrap has loaded; calling MainLoop()";
  Voice();
  document.forms[1].ear.focus();
  MainLoop();
}  // end of RuBoot Russian bootstrap; 5jan2012

function KbTraversal() {
  if (kbtv==0) kbtv = 1;  // Input sets to zero; 23may2011
  apb=("Rejuvenation count is at " + rjc); // 24may2011
  if (kbtv==1) {  // State the concept by name; 20may2011
    apb=("KbTraversal activates concept of YOU in the knowledge base.");
  }  // End of test to identify concept by name; 20may2011
  if (kbtv==2) {  // State the concept by name; 20may2011
    apb=("KbTraversal activates concept of ROBOT in the knowledge base.");
  }  // End of test to identify concept by name; 20may2011
  if (kbtv==3) {  // State the concept by name; 20may2011
    apb=("KbTraversal activates concept of I in the knowledge base.");
  }  // End of test to identify concept by name; 20may2011
  if (kbtv==4) {  // State the concept by name; 20may2011
    apb=("KbTraversal activates concept of GOD in the knowledge base.");
  }  // End of test to identify concept by name; 20may2011
  Voice(); // speak the all-points-bulletin "apb"; 29sep2010  
  pov = "#";  // Internal point-of-view; 24may2011
  if (kbtv > 4) kbtv = 1;
  if (kbtv==1) {
    kbyn = 1;  // for AskUser Y/N query subject; 30jun2011
    psi = 707;    // Russian "Ty" for "you"; 11jan2012
    nacpsi = 707; // Russian "Ty" for "you"; 11jan2012
    qusub = 707;  // Russian "Ty" for "you"; 11jan2012
    subjpsi = 56;  // a test to help WhoBe; 13aug2010
    nounval = 62;
    defcon = nounval;  // force majeure into NounAct; 17nov2010
    NounAct();
    nacpsi = 0;  // reset for safety; 13aug2010
  }
  if (kbtv==2) {
    kbyn = 2;  // for AskUser Y/N query subject; 30jun2011
    psi = 571;   // 571=ROBOT (robot); 11jan2012
    nacpsi = 571;  // 11jan2012
    qusub = 571;  // in case a query will be made; 11jan2012
    subjpsi = 571;  // provisional subject of a query; 11jan2012
    nphrnum = 1;  // prescriptive for sing. ROBOT; 11jan2012
    nounval = 62;
    defcon = nounval;  // force majeure into NounAct; 17nov2010
    NounAct();
    nacpsi = 0;  // reset for safety; 13aug2010
  }
  if (kbtv==3) {
    kbyn = 3;  // for AskUser Y/N query subject; 30jun2011
    psi = 701;  // 701=YA (I); 11jan2012
    nacpsi = 701;  // 11jan2012
    qusub = 701;  // in case a query will be made; 11jan2012
    subjpsi = 701;  // provisional subject of a query; 11jan2012
    nounval = 8;  // test; 27oct2011
    defcon = nounval;  // force majeure into NounAct; 17nov2010
    NounAct();
    nacpsi = 0;  // reset for safety; 13aug2010
  }
  if (kbtv==4) {
    kbyn = 4;  // for AskUser Y/N query subject; 30jun2011
    psi = 501;  // 501=BOG (God); 11jan2012
    nacpsi = 501;  // noun-activation-psi; 11jan2012
    qusub = 501;  // in case a query will be made; 11jan2012
    subjpsi = 501;  // provisional subject of a query; 11jan2012
    nounval = 62;
    defcon = nounval;  // force majeure into NounAct; 17nov2010
    NounAct();
    nacpsi = 0;  // reset for safety; 13aug2010
  }
  defcon = 0;   // reset for safety; 17nov2010
  lurk = 0;  // reset invoker of KbTraversal; 17nov2010
  nounval = 0;  // reset for safety; 17nov2010
}  // End of KbTraversal; return to ReJuvenate or ThInk;  7jul2011
 
 
function ReJuvenate() {
  edge = 0;
  rjc = (rjc+1);
  if (rjc > 99999) rjc = 1; 
    apb=("<font color='red'>"+"Rejuvenating; please wait!"+"<\/font>");
    Voice();
  for (i = (vault+coda); i<(t+2); ++i) {
    jrt = (i - coda);
    if (edge == 1) {
      Psi[i].psiExam(); // subtracting coda from psi6 to keep tqv valid; 23aug2012
      Psi[jrt] = new psiNode(psi0,psi1,psi2,psi3,psi4,psi5,(psi6-coda),psi7,psi8);
      Psi[i] = new psiNode(" "," "," "," "," "," "," "," "," "); // 13oct
    }
    if (edge == 1) {
      ruLexicon[i].ruExam();  // 5jan2012
        if (ru8 > (vault+coda)) { // 6jan2012
          ru8 = (ru8 - coda); // 5jan2012
        } // 5jan2012
      ruLexicon[jrt] = new ruNode(ru0,ru1,ru2,ru3,ru4,ru5,ru6,ru7,ru8);
      ruLexicon[i] = new ruNode(" "," "," "," "," "," "," "," "," ");
    }
    if (edge == 1) {
      audMemory[i].audExam();
      audMemory[jrt] = new audNode(aud0,aud1,aud2,aud3,aud4,aud5);
      audMemory[i] = new audNode(" ",0," "," "," "," ");
    }
    if (edge == 0) {
      audMemory[i].audExam();
   // if (aud2 == "{") edge = true;
      if (aud2 == "{") edge = 1;  // a one-time switch; 14jul2011
      audMemory[jrt] = new audNode(" ",0," "," "," "," ");
      ruLexicon[jrt] = new  ruNode(" "," "," "," "," "," "," "," "," ");
      Psi[jrt] = new psiNode(" "," "," "," "," "," "," "," "," "); 
    }
  }
  t = jrt;
  for (j = t; j < cns; ++j) {  // adding " " for enNode; 5apr2010
    audMemory[j] = new audNode(" ",0," "," "," "," "); // 6jan2012:
    ruLexicon[j] = new  ruNode(" "," "," "," "," "," "," "," "," ");
          Psi[j] = new psiNode(" "," "," "," "," "," "," "," "," ");
  }
  kbtv = (kbtv + 1);
  if (kbtv > 0) {
    KbTraversal();
  }
}  // End of ReJuvenate(); return to SeCurity(); 12jul2011
 
function EmotiOn() {
  apb = "EmotiOn module has been called.";
  Voice();
}

function ReEntry() {
  pov = "#";
  t = (t + 1);
  onset = (spt + 1);
  upnext = (upnext + 1);
  if (upnext == 1) {
    if (urpsi > 1) {
    }
  }
  if (onset == t) beg = 1;
  else beg = 0;
  if (dirobj == 1) dba = 4;  // test; 29jan2012
  if (pho != 32) {
    len = (len +1);
    if (psi == 0) psi = nru;  // test; 31jan2012
    AudMem();
  }  // End of test that input "pho" is not a "space".
  if (pho == 32) { // If pho is a "space".
    audrun = 1;  // Reset to 1 at end of word; 13jul2010
    AudInput();  // Re-entry into audition; 13jul2010
  }  // End of test for space-bar re-entry; 13jul2010
}  // End of ReEntry(); return to SpeechAct().


function Voice() {
outputplus = ("<font size='+3' color='navy'>"+output+"<\/b><\/font>");
  document.all.mouth.innerHTML = outputplus;
  document.all.brain.innerHTML = apb;
}
 
function SpeechAct() {  // output of a word as text or sound
  if (aud == 0) aud = 1;  // say diagnostic "ERROR"; 16jul2011
  ctu = 1;
  spt = (t - 1 );
  do {
    audMemory[aud].audExam();
    pho = aud0;
    lastpho = aud0;  // Keep track of previous pho. 2sep2010
    output += aud0;
    ctu = aud4;
    pov = "#";
    ReEntry();
    aud = (aud + 1);
  }
  while (ctu == 1);
  if (ctu == 0) {
    pho = 32;
    ReEntry();
  }
  output += " ";
  Voice();
}  // End of SpeechAct(); 13aug2010

 
function AuxVerb() {  // 12jan2012
  // Removing code for English "DO" or "DOES"; 12jan2012
  // Saving AuxVerb() for Russian MOGU or KHOCHU; 12jan2012
}  // End of AuxVerb()


function WhatSVerb() {  // What Do Subjects Verb; 10jan2012
  for (i = t; i>midway; i--) {  // search backwards in time.
    ruLexicon[i].ruExam();  // examine Russian lexixon; 10jan2012
    if (ru0 == 781) {  // 781=CHTO (what); 10jan2012
      aud = ru8; // beginning of auditory engram; 10jan2012
      break;  // one instance is enough; 10jan2012
    }
  }
  SpeechAct();
  for (i = t; i>midway; i--) {
    ruLexicon[i].ruExam();
    if (ru0 == topic) {  // if same subject found; 10jan2012
      aud = ru8;  // recall-vector for subject topic; 10jan2012
      break;  // one instance is enough; 10jan2012
    }  // end of test to find "topic"; 10jan2012
  }  // end of backwards loop; 10jan2012
  SpeechAct();
  if (verbpsi == 0) verbpsi = 820;  // 820=Delat' default;
  for (i = t; i>midway; i--) {
    ruLexicon[i].ruExam();
    if (ru0 == verbpsi) {  // if concept number of verb; 10jan2012
      if (ru2 == 2) {  // assume plural is like infinitive; 10jan2012
        aud = ru8; // recall-vector for verb-form; 10jan2012
        break;  // one instance is enough; 10jan2012
      }  // end of test for plural verb as if infinitive; 10jan2012
    }  // end of test to find same verb; 10jan2012
  }  // end of backwards loop; 10jan2012
  if (aud==0) {  // if no plural accept singular; 10jan2012
    for (i = t; i>midway; i--) {  // search backwards; 10jan2012
      ruLexicon[i].ruExam();  // examine Russian lexicon; 10jan2012
      if (ru0 == verbpsi) {  // if concept number of verb; 10jan2012
        aud = ru8; // recall-vector for verb-form; 10jan2012
        break;  // one instance is enough; 10jan2012
      }  // end of test to find same verb; 10jan2012
    }  // end of backwards loop; 10jan2012
  }  // end of test for no engram found; 10jan2012
  SpeechAct();
}  // end of Russian WhatSVerb module; 10jan2012


function WhatSDo() {  // modified from WhatAuxSDo(); 10jan2012
  tov = t;
  for (i = t; i>midway; i--) {
    ruLexicon[i].ruExam();
    if (ru0 == 781) {  // 781=CHTO (what); 10jan2012
      aud = ru8; // 10jan2012
      break;  // exit loop after first find; 10jan2012
    }
  }
  SpeechAct();
  flex1 = "";  // reset for safety; 10jan2012
  for (i = t; i>midway; i--) { 
    ruLexicon[i].ruExam();  
    if (ru0 == 820) {  // 820=DELAT' ("do"); 10jan2012
      aud = ru8; // 10jan2012
      break;  // exit loop after first find; 10jan2012
    } 
  }
  SpeechAct();
  topic = ""; 
}  // 10jan2012

 
function WhoBe() {  // for asking WHO IS-AM-ARE; 10jan2012
  tqv = 0;  // prevent spurious carry-over values; 23aug2012
  moot = 1;  // prevent storage of spurious ideas; 10jan2012
  if (topic > 0) qusub = topic;  // not yet definite source; 3aug2011
  if (subjpsi > 0) qusub = subjpsi;  // not yet sure source; 3aug2011
  for (i = t; i>midway; i--) {  // first look for 55=WHO; 13aug2010
    ruLexicon[i].ruExam();  // examine Russian lexicon; 10jan2012
    if (ru0 == 791) {  // if 791=KTO (who) is found; 10jan2012
      aud = ru8;  // assign most recent recall-tag; 10jan2012
      break;  // exit the loop after first find; 10jan2012
    }  // end of test for 791=KTO (who); 10jan2012 
  }  // end of loop in search of 791=KTO (who); 10jan2012
  SpeechAct();  // say word starting at "aud" value; 10jan2012
  if (subjpsi==701) prsn=1; // 1st person "I"; 10jan2012
  if (subjpsi==731) prsn=1; // 1st person "WE" 10jan2012
  if (subjpsi==707) prsn=2; // 2nd person YOU; 11jan2012
  if (subjpsi==713) prsn=3; // 3rd person HE;  10jan2012
  if (subjpsi==719) prsn=3; // 3rd person SHE; 10jan2012
  if (subjpsi==725) prsn=3; // 3rd person IT;  10jan2012
  if (subjpsi==743) prsn=3; // 3rd person THEY; 10jan2012
  for (i = t; i>midway; i--) { // search for who-query subject
    ruLexicon[i].ruExam();  // examine Russian lexicon; 6jan2012
    if (ru0 == qusub) {  // if qusub found; 6jan2012
      motjuste = qusub;  // also = ru0; 6jan2012
      aud = ru8;  // assign most recent recall-tag; 6jan2012
      break;  // one exemplar is enough; 10jan2012
    }  // end of test for subject; 10jan2012
  }  // end of search-loop; 10jan2012
  SpeechAct();  // say word starting at "aud" value; 10jan2012
  if (recon != 250) recon = 0;  // test for yes-or-no; 6jan2012
  moot = 0;  // end of not tagging query-concepts; 10jan2012 
}  // End of WhoBe(); return to AskUser(); 10jan2012

function WhatBe() {  // what AM/IS/ARE Subjects
  moot = 1;  // prevent storage of spurious ideas; 24oct2011
  tqv = 0;  // prevent spurious carry-over values; 23aug2012
  for (i = t; i>midway; i--) {  // 19jun2011
    ruLexicon[i].ruExam();  // 10jan2012
    if (ru0 == 781) {  // 781=CHTO (what); 10jan2012
      aud = ru8; // 10jan2012
      break;  // 19jun2011
    }  // 19jun2011
  }  // end of search loop; 19jun2011
  SpeechAct();  // 19jun2011
  for (i = t; i>midway; i--) { // 19jun2011
    ruLexicon[i].ruExam(); // 10jan2012
    if (ru0 == qusub) {  // 10jan2012
      aud = ru8; // 10jan2012
      break;     // 19jun2011
    } // end of test for subjpsi;  5jul2011
  }  // end of search of En array; 19jun2011
  SpeechAct();  // 19jun2011
  PsiDecay();  // from MindForth;  3jul2011
  for (i = t; i>midway; i--) {  // 11jan2012
    ruLexicon[i].ruExam();  // 11jan2012
    if (ru0 == 170) {  // 170=TAKOYE for idiomatic questions.
      aud = ru8; // recall-vector; 11jan2012
      break;  // one engram is enough; 11jan2012
    }  // end of test for 170=TAKOYE; 11jan2012
  }  // end of search loop; 11jan2012
  SpeechAct();  // speak word starting at "aud" location; 11jan2012
  cognum = 0;  // reset for safety; 27oct2011
  cogpsi = 0;  // let another new word call WhatBe; 18oct2011
  indefmust = 0;  // reset for safety; 23oct2011
  moot = 0;  // resume associative tagging of valid ideas; 24oct2011
  qusub = 0;  // reset for safety; 27oct2011
  qusubnum = 0;  // reset for safety; 27oct2011
}  // End of WhatBe(); 27oct2011
 
 
function AskUser() {  // selector of question formats; 13aug2010
  if (posflag==7 || posflag==5) {  // noun or pronoun; 13aug2010
//  WhoBe();  // to generate a who-question; 13aug2010; 15oct2010
  }  // end of test of posflag; 13aug2010
  if (kbyn == 0) {  // 30jun2011
    qusub = 571;  // start with 571=ROBOT (robot); 11jan2012
    prsn = 3;  // third person; 30jun2011
    numsubj = 1;  // singular; 11jan2012
    snu = 1;  // singular; 22jan2012
  }  // 30jun2011
  if (ynverb == 0) {  // ask y/n question only once; 30jun2011
    ynverb = quverb;  // isolate at start; 30jun2011
    if (kbyn == 1) {  // from KbTraversal; 30jun2011
      qusub = 707;  // 707=TY (you) to ask questions about; 11jan2012
      prsn = 2;  // YOU is second person; 30jun2011
      numsubj = 1;  // assume YOU is singular; 30jun2011
      snu = 1;  // assume TY (you) is singular; 22jan2012
    }  // end of test for KbTraversal; 30jun2011
    if (kbyn == 2) {  // from KbTraversal; 30jun2011
      qusub = 571;  // 571=ROBOT (robot) to ask questions about.
      prsn = 3;  // ROBOT is third person; 11jan2012
      numsubj = 1;  // singular; 11jan2012
      snu = 1;  // singular; 22jan2012
    }  // end of test for KbTraversal; 30jun2011
    if (kbyn == 3) {  // from KbTraversal; 30jun2011
      qusub = 701;  // 701=YA (I) to ask questions about; 11jan2012
      prsn = 1;  // "I" is first person; 30jun2011
      numsubj = 1;  // since "I" is singular; 30jun2011
      snu = 1;  // since "YA" ("I" is singular; 22jan2012
    }  // end of test for KbTraversal; 30jun2011
    if (kbyn == 4) {  // from KbTraversal; 30jun2011
      qusub = 501;  // 501=BOG (God) to ask questions about.
      prsn = 3;  // GOD is third person; 30jun2011
      numsubj = 1;  // GOD is singular; 30jun2011
      snu = 1;  // BOG (God) is singular; 22jan2012
    }  // end of test for KbTraversal; 30jun2011
    for (i = t; i>midway; i--) {  // seek query-subject; 30jun2011
      ruLexicon[i].ruExam();  // examine Russian lexicon; 11jan2012
      if (ru0 == qusub) {  // if query-subject found; 11jan2012
        aud = ru8;  // assign auditory recall-tag; 11jan2012
        break;  // exit the loop after first find; 30jun2011
      }  // end of test for query-subject; 30jun2011
    }  // end of loop in search of qusub; 30jun2011
    SpeechAct();  // say word starting at "aud" value; 30jun2011
    tkbn = t; // if engram is to be changed; 29jun2011
    nacpsi = qusub;  // 30jun2011
    nounval = 62;  // 22jun2011 
    NounAct();  // 22jun2011
    for (i = t; i>midway; i--) {  // 11jan2012
      ruLexicon[i].ruExam();  // 11jan2012
      if (ru0 == 320) {  // 320=LI (whether) for asking a question.
        aud = ru8; // recall-vector; 11jan2012
        break;  // one engram is enough; 11jan2012
      }  // end of test for 320=LI; 11jan2012
    }  // end of search loop; 11jan2012
    SpeechAct();  // speak word starting at "aud" location; 11jan2012
    if (quverb == 0) quverb = 820;  // 820=DELAT' (do) by default.
    for (i = t; i>midway; i--) {  // seek yn query-verb; 30jun2011
      ruLexicon[i].ruExam();  // examine Russian lexicon; 11jan2012
      if (ru0 == quverb) {  // if yn query-verb found; 11jan2012
        aud = ru8;  // assign most recent recall-tag; 11jan2012
        break;  // exit the loop after first find; 30jun2011
      }  // end of test for quverb; 30jun2011
    }  // end of loop in search of yn quverb; 30jun2011
    nacpsi = ynverb;  // transfer activand; 30jun2011
    verbval = 62;  // prime VerbAct(); 30jun2011
    VerbAct();  // activate the yn query verb; 25jun2011
    SpeechAct();  // say word starting at "aud" value; 30jun2011
    tkbv = t; // if engram is to be changed; 30jun2011
 // if (quobj == 0) quobj = 110;  // 110=ANYTHING default; 19jul2011
    for (i = t; i>midway; i--) {  // look for quobj; 30jun2011
      ruLexicon[i].ruExam();  // examine Russian lexicon; 11jan2012
      if (ru0 == quobj) {  // if query-object found; 11jan2012
        aud = ru8;  // assign most recent recall-tag; 11jan2012
        break;  // exit the loop after first find; 30jun2011
      }  // end of test for quobj; 30jun2011
    }  // end of loop in search of quobj; 30jun2011
    SpeechAct();  // say word starting at "aud" value; 30jun2011
    yncon = 0;  // because question has been asked; 30jun2011
    kbcon = 1;  // because waiting for answer; 30jun2011
    ynverb = 0;  // zero out; prevent repeat of query; 30jun2011
  }  // end of test of ynverb; 30jun2011
  if (subjpsi==701) prsn=1; // 1st person "I"; 11jan2012
  if (subjpsi==731) prsn=1; // 1st person "WE" 11jan2012
  if (subjpsi==707) prsn=2; // 2nd person YOU; 11jan2012
  if (subjpsi==713) prsn=3; // 3rd person HE;  11jan2012
  if (subjpsi==719) prsn=3; // 3rd person SHE; 11jan2012
  if (subjpsi==725) prsn=3; // 3rd person IT;  11jan2012
  if (subjpsi==743) prsn=3; // 3rd person THEY; 11jan2012
  numsubj = 0;  // reset for safety; 22jun2011
  qusubj = 0;  // reset for safety; 22jun2011
  quobj = 0;  // reset for safety; 22jun2011
  recon = 0;  // 
  bias = 5;  // restore expectation of a noun; 30jun2011
}  // End of AskUser(); return to RuCog(); 11jan2012


function NounPhrase() {
  audjuste = 0;  // prevent carry-over; 24oct2011
  if (verblock > 0) {  // 24oct2011
    Psi[verblock].psiExam(); // expose all values to change one; 24oct2011
    nounlock = psi6;  // time-point of "seq" engram; 24oct2011
    motjuste = psi4;  // let "pre" = motjuste?; test; 30oct2011
  }  // end of test for a positive verblock; 24oct2011
  RuReify();  // 5jan2012
  for (i = t; i>midway; i--) {
    ruLexicon[i].ruExam();  // 5jan2012
    if (ru0 == 704) {  // accusative; 5jan2011
      audme = ru8; // 5jan2012
      break;
    }
  }
  abort = false;
  act = 0;  // Start with zero to look for en1 higher than act.
  defact = -8;  // for default comparisons with "50=I"; 29oct2011
  motjuste = 0;
  nphrnum = 0;  // prevent carry-overs; 24oct2011
  num = 0;   // without prejudice; 2sep2010
  prsn = 0;  // without prejudice; 2sep2010
  if (nounlock > 0) {  // already a nounlock? 24oct2011
    Psi[nounlock].psiExam(); // find nounlock inside Psi array; 1nov2011
    motjuste = psi0;  // test;  inov2011
    ruLexicon[nounlock].ruExam();  // examine Russian lexicon; 11jan2012
    audjuste = ru8;  // hold the auditory recall-vector;  5jan2012
  }  // end of test for a positive nounlock; 24oct2011
  opt = 5; // 
  subjectflag = 1;  // 9dec2009 A default until countermanded 
  if (dirobj == 1) subjectflag = 0;  // toggle; 24oct2011
  if (dirobj == 1) dba = 4;  // seek accusative case; 21jan2012
  if (predflag == 1) subjectflag = 0;  // toggle; 24oct2011
  if (predflag == 1) dba = 1;  // seek nominative case; 21jan2012
  psi = 0;  // The "psi-tag" carried by the "en0" flag.
  for (i = t; i>midway; --i) {
    Psi[i].psiExam(); // examine Psi array for most active concept.
    if (psi5 == 5 || psi5 == 7) {  // Logical OR; 13aug2011
      if (subjectflag == 1) {  // selecting a subject? 24oct2011
     // if (psi1 > act) {  // If psi1 is higher than "act"; 13aug2011
     // if (psi1 > act && psi6 > 0) {  // tqv-check; 24oct2011
        if (psi1 > act && psi6 > 0) {  // tqv-check; 23aug2012
     // if (psi1 > act) {  // without tqv-check; 22jan2012
     // if (psi1 > act) {  // Commenting-out; 23aug2012
       // if (psi7 > 0) {  // Testing for seq-concept; 24oct2011
           if (psi7 > 0) {  // Testing for seq-concept; 23aug2011
            tsels = i;  // retain time of subject; 24oct2011
            tseln = i;  // time of selected noun; 10may2011
            motjuste = psi0; // store psi-tag of noun/pronoun; 13aug2011
            nphrnum = psi2;  // 13aug2011
            snu = psi2;  // for parameter in verb-selection; 22jan2012
      //  }  // for subjects; 24oct2011
          }  // for subjects; 24oct2011; 23aug2012
          snu = psi2;  // for parameter in verb-selection; 22jan2012
          subjpsi = psi0;  // 13aug2011
          putnum = psi2;  // putative num for verb; 24oct2011
          nphrpos = psi5;  // NounPhrase part-of-speech; 13aug2011
          posflag = psi5; // AskUser discriminand; 13aug2011
       // if (psi1 > act && psi7 > 0) {  // seq-check; 25oct2011
          if (psi1 > act) {  // without seq-check; test; 22jan2012
            verblock = psi6;  // tqv of seq-concept; 24oct2011
            for (j = t; j>midway; --j) {  // 22jan2012
             ruLexicon[j].ruExam();  // examine Russian lexicon; 5jan2012
             if (ru0 == motjuste) {  // 22jan2012
               if (ru2 == snu && ru4 == 1) {  // dba must be "1"; 27JAN2012
                audjuste = ru8;  // avoid the spurious; 24oct2011; 5jan2012
              }  // 22jan2012   
             }  // 22jan2012
            }  // end of search of ruLexicon; 22jan2012
            if (motjuste == 701) {  // guarantee "I"; 5jan2012
              for (i = t; i>midway; i--) {  //search backwards; 25oct2011
                ruLexicon[i].ruExam(); // examine Russian lexicon; 5jan2012
                if (ru0 == 701) {  // "701=Ya"; 5jan2012
                  if (ru4 == 1) {  // dba must be "1"; 27jan2012
                    audjuste = ru8;  // auditory recall-vector;  5jan2012
                    snu = 1;  // try to influence InStantiate; 27jan2012
                    dba = 1;  // try to influence InStantiate; 27jan2012
                    break; // one I-engram is enough; 25oct2011
                  }  // end of test for dba==1; 27jan2012
                }  // end of test for "701=Ya";  5jan2012 
              }  // end of backwards loop; 25oct2011
            }  // end of test for "701=Ya"; 5jan2012
            if (motjuste == 707) {  // guarantee "Ty"; 21jan2012
              for (i = t; i>midway; i--) {  //search backwards; 25oct2011
                ruLexicon[i].ruExam(); // examine Russian lexicon; 5jan2012
                if (ru0 == 707) {  // "707=Ty"; 21jan2012
                  if (ru4 == 1) {  // dba must be "1"; 27jan2012
                    audjuste = ru8;  // auditory recall-vector;  5jan2012
                    snu = 1;  // try to influence InStantiate; 27jan2012
                    dba = 1;  // try to influence InStantiate; 27jan2012
                    break; // one you-engram is enough;  5jan2012
                  }  // end of test for dba==1; 27jan2012
                }  // end of test for "707=Ty"; 21jan2012
              }  // end of backwards loop; 25oct2011
            }  // end of test for "707=Ty"; 21jan2012
            if (ru6 == 5) prsn = 3; // assume 3rd prsn noun;  5jan2012
            act = psi1; // after passing seq-check; 24oct2011
          }  // prevent false motjuste; 24oct2011
        }  // End of test for a higher activation; 24oct2011
      }  // end of test for 1=subjectflag; 24oct2011
      if (subjectflag == 0) {  // i.e., dir.obj or pred.nom; 24oct2011
        if (psi1 > act) {  // If psi1 is higher than "act"; 24oct2011
          tseln = i;  // retain time of motjuste; 24oct2011
          motjuste = psi0;  // 24oct2011
          if (nounlock > 0) {  // if positive nounlock exists; 24oct2011
            if (i == nounlock) {  // upon reaching engram; 24oct2011
              motjuste = psi0;  // grab nounlock psi; 24oct2011
              nphrnum = psi2;  // NounPhrase num(ber) 24oct2011
              ruLexicon[i].ruExam();  // Examine Ru-lexicon;  5jan20p12
              audjuste = ru8;  // auditory fetch-tag;  5jan2012
              break;  // prevent usurpation of pre-ordained seq 24oct2011
            } // end of test for index = nounlock; 24oct2011
          }  // end of test for positive nounlock; 24oct2011
          subjpsi = psi0;  // 24oct2011
          nphrnum = psi2;  // 24oct2011
          putnum = psi2;   // putative num for verb; 24oct2011
          nphrpos = psi5;  // NounPhrase part-of-speech; 24oct2011
          if (dirobj == 1)  {  // seeking direct object? 24oct2011
            dba = 4;  // for OldConcept; test; 29jan2012
            Psi[i].psiExam(); // avoid error-on-page; 18oct2011
            nphrnum = psi2; // 13aug2011
            objold = motjuste; // a test ICW slosh-over; 18oct2010
            if (motjuste == 701) {  // 701=Ya; 5jan2012
             if (nounlock == 0) {  // test; 25oct2011
              motjuste = 704;  // 704=MENYA; 5jan2012
              aud = audme; 
              audjuste = audme;
             }  // end of anti-substitution test; 25oct2011
            }  // end of test for "701=Ya"; 5jan2012
          }  // end of test for needing a direct object; 24oct2011
          if (psi1 > act) act = psi1;  // change the metric; 24oct2011
        }  // end of test for a higher activation; 24oct2011
      }  // end of test for 0=subjectflag; test; 24oct2011
    }  // End of test of for a noun or pronoun; 24oct2011
  }  // End of backwards search for most active "motjuste"; 25may2011
  for (i = t; i>midway; i--) {  // 13aug2011
    ruLexicon[i].ruExam();      //  5jan2012
    if (ru0 == motjuste) {      //  5jan2012
      if (predflag==1) {  // only for predicate nominatives; 20sep2011
       if (nounlock == 0) {  // in absence of nounlock; 25oct2011
        if (ru2==snu) {  // num(ber) agreement? 24jan2012
          audjuste = ru8;  // set auditory recall-vector;  5jan2012
          break;  // one auditory engram is enough; 20sep2011 
        }  // end of test for agreement in num(ber); 20sep2011
      }  // end of test for absence of nounlock; 25oct2011
    }  // end of test for positive "predflag"; 20sep2011
    else  // for normal direct objects; 20sep2011
      if (verblock == 0) {  // if no verblock; 25oct2011
        if (ru4 == dba) {  // if dba-4 accusative; 21jan2012
          audjuste = ru8;  // for NounPhrase SpeechAct;  5jan2012
          break;  // one auditory engram is enough; 20sep2011
        }  // end of test for ru4 accusative dba; 21jan2012
      }  // end of test for absence of verblock; 25oct2011
    }  // end of test for motjuste; 13aug2011
  }  // end of backwards loop; 13aug2011
  star = 0;
  node = 0;
  ufo = 0;
  if (nounlock == 0) {  // if no nounlock override; 24oct2011
   if (act < 20) {  // if no subject of thought is found; 24aug2012
    if (subjectflag==1) {  // default to "I" only as subject 18oct2011
      motjuste = 701;  // default concept of an AI Mind; 5jan2012
      nphrpos = 7;  // pronoun "I"; to prevent EnArticle; 14sep2011
      subjpsi = 701;  // use elsewhere; 5jan2012
      topic = 701;  // use elsewhere; 5jan2012
      for (i = t; i>midway; i--) {  // Look for "50=I"; 9jul2011
        Psi[i].psiExam(); // examine Psi array; 25oct2011
        if (psi0 == 701 && psi7 > 0) {  // 5jan2012
          if (psi1 > defact) {  // 25oct2011 
            tsels = i;  // retain time of subject; 25oct2011
            tseln = i;  // retain time of motjuste; 25oct2011
            verblock = psi6;  // lock onto valid verb; 25oct2011
            break;  // test; 29oct2011
          }  // end of test for higher-act ego-concept; 25oct2011
        }  // end of test for "50=I" with seq-check; 29oct2011
      }  // End of search for #50 "I"; 9jul2011
      dba = 1;  // subject requires nominative case; 21jan2012
      subjpsi = 701;  // for use elsewhere;  5jan2012
      topic = 701;   // for question-asking modules;  5jan2012
      nphrnum = 1;  // for EnArticle and VerbPhrase; 29oct2011
      nphrpos = 7;  // prevent article "A" with "I"; 29oct2011
      snu = 1;  // subject-number; 22jan2012
      prsn = 1;  // for use elsewhere; 29oct2011
      for (i = t; i>midway; i--) {  // Look backwards for 50=I; 29oct2011
        ruLexicon[i].ruExam();  // examine the Russian lexicon;  5jan2012
        if (ru0 == 701) {  // If "701=Ya" is found; 5jan2012
         if (ru4 == 1) {  // ru4 = 1 = dba; 21jan2012
          audjuste = ru8;  // "I" recall-vector;  5jan2012
          break;  // Use the most recent engram of "I"; 29oct2011
         }  // end of test for nominative dba ru4; 21jan2012
        }  // End of search for "701=Ya"; 5jan2012
      }  // end of Russian lexicon search loop; 5jan2012
    }  // end of test for "I" to become subj. not obj. 18oct2011
   }  // end of threshold-test; 18oct2011
  }  // end of test for absence of pre-ordained nounlock; 24oct2011
  if (nounlock > 0) {  // from MindForth; if positive; 18aug2012
    if (nounlock > 0) {  // already a nounlock? 20aug2012
      Psi[nounlock].psiExam(); // find nounlock inside Psi array; 20aug2012
      motjuste = psi0;  // test; 20aug2012
      ruLexicon[nounlock].ruExam();  // examine Russian lexicon; 20aug2012
      audjuste = ru8;  // hold the auditory recall-vector; 20aug2012
    }  // end of test for a positive nounlock; 24oct2011; 20aug2012
    if (motjuste == 701) {  // if 701="Ya" is indicated; 18aug2012
      for (i = t; i>midway; i--) {  // Look backwards for 701=menya; 18aug2012
        ruLexicon[i].ruExam(); // examine Russian lexicon; 18aug2012
        if (ru0 == 701) {  // If #701 "menya" found; 18aug2012
          if (ru4 == 4)  {  // direct object; 19aug2012
            audjuste = ru8;  // "menya" engram 18aug2012
            break; // Use most recent engram of "menya"; 18aug2012
          }  // end of ru4 dba-test; 19aug2012
        }  // End of search for #707 "menya"; 18aug2012
      }  // End of loop finding word "menya"; 18aug2012
    }  // from MindForth; end of special override for 701=menya; 18aug2012
    if (motjuste == 707) {  // if 707="Ty" is needed; 18aug2012
      for (i = t; i>midway; i--) {  // Look backwards for 707=tebya; 18aug2012
        ruLexicon[i].ruExam(); // examine Russian lexicon; 18aug2012
        if (ru0 == 707) {  // If #707 "tebya" found; 18aug2012
          if (ru4 == 4)  {  // direct object; 18aug2012
            audjuste = ru8;  // "tebya" engram 18aug2012
            break; // Use most recent engram of "tebya"; 18aug2012
          }  // end of ru4 dba-test; 18aug2012
        }  // End of search for #707 "tebya"; 18aug2012
      }  // End of loop finding word "tebya"; 18aug2012
    }  // from MindForth; end of special override for 707=tebya; 20aug2012
    if (motjuste == 731) {  // if 731="nas" is needed; 20aug2012
      for (i = t; i>midway; i--) {  // Look backwards for 731=nas; 20aug2012
        ruLexicon[i].ruExam(); // examine Russian lexicon; 20aug2012
        if (ru0 == 731) {  // If #731 "nas" found; 20aug2012
          if (ru4 == 4)  {  // direct object; 20aug2012
            audjuste = ru8;  // "nas" engram 20aug2012
            break; // Use most recent engram of "nas"; 20aug2012
          }  // end of ru4 dba-test; 20aug2012
        }  // End of search for #731 "nas"; 20aug2012
      }  // End of loop finding word "nas"; 20aug2012
    }  // from MindForth; end of special override for 731=nas; 20aug2012
    if (motjuste == 755) {  // if 755="vas" is needed; 20aug2012
      for (i = t; i>midway; i--) {  // Look backwards for 755=vas; 20aug2012
        ruLexicon[i].ruExam(); // examine Russian lexicon; 20aug2012
        if (ru0 == 755) {  // If #755 "vas" found; 20aug2012
          if (ru4 == 4)  {  // direct object; 20aug2012
            audjuste = ru8;  // "vas" engram 20aug2012
            break; // Use most recent engram of "vas"; 20aug2012
          }  // end of ru4 dba-test; 20aug2012
        }  // End of search for #755 "vas"; 20aug2012
      }  // End of loop finding word "vas"; 20aug2012
    }  // from MindForth; end of special override for 755=vas; 20aug2012
  }  // from MindForth; end of test for a positive nounlock; 20aug2012
  if (motjuste==701) {  // if 701=Ya selected; 5jan2012
    prsn = 1;  // first person; 2sep2010
    num = 1;   // singular; 2sep2010
    nphrnum = 1;  // xfer into VerbPhrase; 2sep2010
  }  // end of test for 701=Ya; 5jan2012
  if (dirobj == 1) {  // When seeking direct object; 14jun2011
   if (nounlock == 0) {  // if no nounlock override; 24oct2011
    if (act < 20) {  // Revert to general threshold; 8jul2011
      Psi[i].psiExam(); // expose psi2 to avoid error-on-page; 18oct2011
      nphrnum = psi2; // 13aug2011
      WhatSVerb();  // Russian module without auxiliary; 10jan2012 
      return;  // Abandon the rest of NounPhrase()  14jun2011
    }  // End of test for sufficient activation; 14jun2011
   }  // end of test for a nounlock in play; 24oct2011
  }  // End of test for direct object; 14jun2011
  RuDamp();  // Wiki-page form of name; 5jan2012
  nounval = act;
  if (nphrnum != snu) {  // make sure of agreement; 24jan2012
    for (i = t; i>midway; i--) {  // Search backwards in time; 18may2011
      ruLexicon[i].ruExam();  // Examine Russian lexicon; 5jan2012
      if (ru0 == motjuste) {  // If chosen concept is found; 5jan2012
        if (ru2 == snu) {  // If matching num(ber); 24jan2012
          if (ru4 == dba) {  // if correct case; 21jan2012
            audjuste = ru8; // Switch away from wrong number; 5jan2012
            num = snu;  // For InStantiate of new engram; 24jan2012
            nphrnum = snu;  // for EnArticle; test; 24jan2012
            snu = 0;  // Reset after use for safety; 24jan2012
            break;
          }  // end of dba-test for correct case; 21jan2012
        }  // End of test for matching num(ber); 18may2011
      }  // End of search for engram of proper number; 18may2011
    }  // End of finding not only engram but proper number. 18may2011
  }  // end of test to match subject-number and found noun; 26jan2012
  anset = 0;  // Safety measure reset to zero; 4may2011
//  audMemory[aud].audExam();  // Inspect auditory memory at "aud";
//  if (aud0 == "A") anset = 65;  // If vowel "A"; 4may2011
//  if (aud0 == "E") anset = 69;  // If vowel "E"; 4may2011
//  if (aud0 == "I") anset = 73;  // If vowel "I"; 4may2011
//  if (aud0 == "O") anset = 79;  // If vowel "O"; 4may2011
//  if (aud0 == "U") anset = 85;  // If vowel "U"; 4may2011
  ghost = 0;
  xthe = 0;  
    urpsi = motjuste; // prepare to psi-damp; 18oct2010
  urpsi = 0;  // reset for safety; 18oct2010
  urpsi = objold; // prepare to psi-damp; 18oct2010
// PsiDamp();  // Commenting out as a test; 29oct2011 
  urpsi = 0;  // reset for safety; 18oct2010
  psi = 0;
  aud = audjuste; 
  SpeechAct();  // main call from NounPhrase to SpeechAct; 18may2011
  if (dirobj==1 || predflag==1) {  // d.o. OR pred.nom. 30may2011
    Psi[t].psiExam(); // expose all values to change one; 14jun2011
    Psi[t] = new psiNode(psi0,-32,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
    // Try accentuating object nouns to start the next thought; 29oct2011
 // Psi[t] = new psiNode(psi0,48,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
  }  // only inhibit predicate nominatives; 16sep2010
  if (motjuste != 701) {  // if not 701=Ya; 5jan2012
    if (motjuste != 707) {  // not 707=Ty; 11jan2012
      if (motjuste != 731) {  // not 731=MWI (we); 11jan2012
        prsn = 3;  // third person; not I YOU WE; 2sep2010
      }  // end of test for 53=WE; 2sep2010
    }  // end of test for 56=YOU; 2sep2010
  }  // end of test for "not I"; 2sep2010
  if (subjcall == 1) {  // _After_ any call to EnArticle(); 21may2011
    nouncall = 1;  // 1=nom.; (2=gen.); (3=dat.); 4=acc.; 21may2011
  }  // End of test to prevent showSubject() of articles; 21may2011
  if (dirobj == 1) {  // _After_ any call to EnArticle(); 21may2011
    nouncall = 4;  // 1=nom.; (2=gen.); (3=dat.); 4=acc.; 21may2011
  }  // End of test to prevent showObject() of articles; 21may2011
  caller = "NounPhrase";
  urpre = pre;
  psi = motjuste; 
  nacpsi = motjuste;  // de-globalized psi for NounAct; 13aug2010
  nounval = 32;  // arbitrary test value;  9jul2011
  NounAct();
  nouncall = 0;  // Reset, whether subj. or dir. obj.; 21may2011
  nounval = 0;
  Psi[tsels].psiExam(); // impose neural inhibition on subject; 27oct2011
  Psi[tsels] = new psiNode(psi0,-64,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
  tsels = 0;  // reset for safety after inhibiting; 27oct2011
  if (dirobj==1 || predflag==1) { // noun after verb; 30may2011
 // NounClear();  // deactivate before inhibiting; 18aug2011
    Psi[tseln].psiExam(); // expose all values to change one; 30may2011
    // following line inhibits old KB noun-node; 24may2011; 30may2011
    Psi[tseln] = new psiNode(psi0,-64,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
    tseln = 0;  // Reset after use; 24may2011
    Psi[t].psiExam(); // expose all values to change one; 14jun2011
    Psi[t] = new psiNode(psi0,-64,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
    motjuste = psi0;   // test; 29oct2011
    // Try accentuating, not inhibiting; 29oct2011
 // Psi[t] = new psiNode(psi0,48,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
    PsiDecay();  // Try _differential_ psi-decay; 14may2011
    PsiDecay();  // MindForth: try to knock out also-rans; 8jun2011
  }  // end of test for positive predflag; 16sep2010
  inhibcon = 1;  // flag for OldConcept and InStantiate; 27oct2011
  if (dirobj != 1 && predflag !=1 ) { // only subjects; 29oct2011
    Psi[t].psiExam(); // inhibit subjects to a shallow depth; 27oct2011
    Psi[t] = new psiNode(psi0,-64,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
    motjuste = psi0;  // test; 29oct2011
  }  // end of test to avoid inhibiting prednoms and dirobjs; 29oct2011
  topic = motjuste;  // needed by WhatAuxSVerb()  14jun2011
  pre = urpre;  // from before call to NounAct; 27oct2011
  if (dirobj == 1 || predflag == 1) {  // other than subject; 27oct2011
    caller = "NounPhrase";
    urpsi = motjuste;
    PsiDamp();  // commenting out as test; 14jun2011
    urpsi = 0;  // reset for safety; 18oct2010
  }  // end of test for a non-subject (pro)noun; 27oct2011
  act = 0;
  motjuste = 0;
  nounlock = 0;  // after causing selection of VPhr seq-noun; 24oct2011
  psi = 0;
}  // End of NounPhrase; return to VerbPhrase or RuCog; 9jan2012


function ConJoin() { 
  if (questype == 370) {  // 370=POCHEMU (why?); 11jan2012
    conj = 350;  // 350=___ (because) to answer "why?"; 11jan2012
  } else conj = 360;  // 360=EE (and) default conjunction.
  for (i = t; i>midway; i--) {
    ruLexicon[i].ruExam();  // 11jan2012
      if (ru0 == conj) {  // 5jan2012
        aud = ru8; // 5jan2012
        break;
      }
    }
  SpeechAct();
  questype = 0;
}  // End of ConJoin(); currently not called; 13aug2010
 

function VerbGen() {  // to create missing verb-forms; 18jan2012
  do {  // first loop fills in AudBuffer
    audMemory[audbase].audExam();
    pho = aud0;
    abc = aud0;  // for AudBuffer(); 18jan2012
    AudBuffer();  // to transfer engrams; 18jan2012
    if (aud4==0) {  // no continuation; 19jan2012
      OutBuffer();   // 18jan2012
    }  // 19jan2012
    if (b14==String.fromCharCode(1045)) { // "E"; 19jan2012
      aud0="";  // 25jan2012
    }  // 19jan2012
    if (b14==String.fromCharCode(1045)) { // "E"; 19jan2012
      aud0="";  // 25jan2012
      if (b15==String.fromCharCode(1064)) {  
        aud0=" ";  // "SH"; 19jan2012
        if (b16==String.fromCharCode(1068)) {  // 19jan2012
          aud0=" ";  // "b"; 19jan2012
        }  // 19jan2012
      }  // 19jan2012
    }  // 19jan2012
    ctu = aud4;  // continuation criterion; 18jan2012
    audbase = (audbase + 1);  // increment; 18jan2012
  } 
  while (ctu == 1);  // during continuation; 18jan2012
  if (ctu == 0) {  // 19jan2012
    OutBuffer();  // upon end of word display OutBuffer; 18jan2012
  }  // 19jan2012
  do {  // second loop uses OutBuffer; 19jan2012  
    OutBuffer();  // 19jan2012
    pov = "#";  // from SpeechAct; 19jan2012
      if (binc==1) {  // 21jan2012
        if (b01 > "") {  // 21jan2012
          output += b01;  // 21jan2012
          pho = b01;  // for ReEntry; 21jan2012
          ctu = 1;  // for auditory continuation; 19aug2012
          ReEntry();  // for record of thought; 25jan2012
        }  // end of test for content; 21jan2012
      }  // 21jan2012
      if (binc==2) {  // 21jan2012
        if (b02 > "") {  // 21jan2012
          output += b02;  // 21jan2012
          pho = b02;  // for ReEntry; 21jan2012
          ctu = 1;  // for auditory continuation; 19aug2012
          ReEntry();  // for record of thought; 25jan2012
        }  // end of test for content; 21jan2012
      }  // 21jan2012
      if (binc==3) {  // 21jan2012
        if (b03 > "") {  // 21jan2012
          output += b03;  // 21jan2012
          pho = b03;  // for ReEntry; 21jan2012
          ctu = 1;  // for auditory continuation; 19aug2012
          ReEntry();  // for record of thought; 25jan2012
        }  // end of test for content; 21jan2012
      }  // 21jan2012
      if (binc==4) {  // 21jan2012
        if (b04 > "") {  // 21jan2012
          output += b04;  // 21jan2012
          pho = b04;  // for ReEntry; 21jan2012
          ctu = 1;  // for auditory continuation; 19aug2012
          ReEntry();  // for record of thought; 25jan2012
        }  // end of test for content; 21jan2012
      }  // 21jan2012 
      if (binc==5) {  // 21jan2012
        if (b05 > "") {  // 21jan2012
          output += b05;  // 21jan2012
          pho = b05;  // for ReEntry; 21jan2012
          ctu = 1;  // for auditory continuation; 19aug2012
          ReEntry();  // for record of thought; 25jan2012
        }  // end of test for content; 21jan2012
      }  // 21jan2012
      if (binc==6) {  // 21jan2012
        if (b06 > "") {  // 21jan2012
          output += b06;  // 21jan2012
          pho = b06;  // for ReEntry; 21jan2012
          ctu = 1;  // for auditory continuation; 19aug2012
          ReEntry();  // for record of thought; 25jan2012
        }  // end of test for content; 21jan2012
      }  // 21jan2012
      if (binc==7) {  // 21jan2012
        if (b07 > "") {  // 21jan2012
          output += b07;  // 21jan2012
          pho = b07;  // for ReEntry; 21jan2012
          ctu = 1;  // for auditory continuation; 19aug2012
          ReEntry();  // for record of thought; 25jan2012
        }  // end of test for content; 21jan2012
      }  // 21jan2012
      if (binc==8) {  // 21jan2012
        if (b08 > "") {  // 21jan2012
          output += b08;  // 21jan2012
          pho = b08;  // for ReEntry; 21jan2012
          ctu = 1;  // for auditory continuation; 19aug2012
          ReEntry();  // for record of thought; 25jan2012
        }  // end of test for content; 21jan2012
      }  // 21jan2012
      if (binc==9) {  // 21jan2012
        if (b09 > "") {  // 21jan2012
          output += b09;  // 21jan2012
          pho = b09;  // for ReEntry; 21jan2012
          ctu = 1;  // for auditory continuation; 19aug2012
          ReEntry();  // for record of thought; 25jan2012
        }  // end of test for content; 21jan2012
      }  // 21jan2012 
      if (binc==10) {  // 19jan2012
        if (b10 > "") {  // 21jan2012
          output += b10;  // 19jan2012
          pho = b10;  // for ReEntry; 19jan2012
          ctu = 1;  // for auditory continuation; 19aug2012
          ReEntry();  // for record of thought; 25jan2012
        }  // end of test for content in b10; 21jan2012
      }  // 19jan2012
      if (binc==11) {  // 19jan2012
        if (b11 > "") {  // 21jan2012
          output += b11;  // 19jan2012
          pho = b11;  // for ReEntry; 19jan2012
          ctu = 1;  // for auditory continuation; 19aug2012
          ReEntry();  // for record of thought; 25jan2012
        }  // end of test for content in b11; 21jan2012
      }  // 19jan2012 
      if (binc==12) {  // 19jan2012
        if (b12 > "") {  // 21jan2012
          output += b12;  // 19jan2012
          pho = b12;  // for ReEntry; 19jan2012
          ctu = 1;  // test; 19aug2012
          ReEntry();  // for record of thought; 25jan2012
        }  // end of test for content in b12; 21jan2012
      }  // 19jan2012
      if (binc==13) {  // 19jan2012
        if (b13 > "") {  // changing above line; 30jan2012
          prc = vip;  // for "audpsi"; test; 31jan2012
          output += b13;  // 19jan2012
          pho = b13;  // for ReEntry; 19jan2012
          ctu = 1;  // test; 19aug2012
          ReEntry();  // for record of thought; 25jan2012
        }  // end of test for content in b13; 21jan2012
      }  // 19jan2012
      if (binc==14) {  
        if (b14==String.fromCharCode(1045)) b14 = "";  // "E"
        output += b14;  // 19jan2012
        pho = b14;  // for ReEntry; 19jan2012
        ctu = 1;  // test; 19aug2012
        if (pho != "") ReEntry();  // avoid empty aud; 30jan2012
      }  // 19jan2012
      if (binc==15) {  // "EM" or "ET" or "ESHb"; 22jan2012
        if (b15==String.fromCharCode(1045)) b15 = ""; // "E"
        if (b15==String.fromCharCode(1058)) b15 = ""; // "T"
        if (b15==String.fromCharCode(1064)) b15 = ""; // "SH"
        output += b15;  // no change; 22jan2012
        pho = b15;  // for ReEntry; 22jan2012
        ctu = 1;  // test; 19aug2012
        if (pho != "") ReEntry();  // avoid empty aud; 30jan2012
      }  // 19jan2012
      if (binc==16) {  // for present-tense endings 22jan2012
        if (b16==String.fromCharCode(1045)) b16 = ""; // "ETE"
        if (b16==String.fromCharCode(1052)) b16 = ""; // "EM"
        if (b16==String.fromCharCode(1058)) b16 = ""; // "ET, YUT"
        if (b16==String.fromCharCode(1068)) b16 = ""; // "b"
        if (b16==String.fromCharCode(1070)) b16 = ""; // "YU"
        output += b16;  // no change; 22jan2012
        pho = b16;  // for ReEntry; 22jan2012
        ctu = 0;  // terminate continuation "ctu"; 19aug2012
        if (pho != "") ReEntry();  // avoid empty aud; 30jan2012
       }  // end of test of final position in OutBuffer; 25jan2012
      binc = (binc + 1);  // increment; 19jan2012
    }  // end of looping through OutBuffer; 19jan2012
    while (binc < 17);  // while inspecting OutBuffer; 19jan2012
    binc = 0;  // reset after use; 19jan2012
     if (dba == 1) {  // first person; 22jan2012
      if (snu == 1) {  // a parameter; 24jan2012
        output += "&#1070;"  // "YU"; 21jan2012
        pho = "&#1070;"  // "YU"; 21jan2012
        ReEntry();  // for record of thought; 25jan2012
      }  // 21jan2012
     if (snu == 2) {  // subject-number parameter; 25jan2012
        output += "&#1045;";  // "E"; 30jan2012
        pho = "&#1045;";  // for ReEntry; 30jan2012
        ReEntry();  // for record of thought; 25jan2012
        output += "&#1052;";  // "M"; 30jan2012
        pho = "&#1052;";  // for ReEntry; 30jan2012
        ReEntry();  // for record of thought; 25jan2012
      }  // end of test for plural subject-number; 25jan2012
    }  // end of test for first-person; 25jan2012
    if (dba == 2) {  // second person; 22jan2012
      if (snu == 1) {  // a parameter; 24jan2012
        output += "&#1045;";  // "YE"; 30jan2012
        pho = "&#1045;"  // for ReEntry; 30jan2012
        ReEntry();  // for record of thought; 25jan2012
        output += "&#1064;";  // "SH"; 30jan2012  
        pho = "&#1064;";  // for ReEntry; 30jan2012
        ReEntry();  // for record of thought; 25jan2012
        output += "&#1068;";  // "b"; 30jan2012  
        pho = "&#1068;";  // for ReEntry; 30jan2012
        ReEntry();  // for record of thought; 25jan2012
      }  // end of test for singular subject-number; 25jan2012
      if (snu == 2) {  // subject-number parameter; 25jan2012
        output += "&#1045;"  // "E"; 25jan2012
        pho = "&#1045;"  // for ReEntry; 25jan2012
        ReEntry();  // for record of thought; 25jan2012
        output += "&#1058;"  // "T"; 25jan2012
        pho = "&#1058;"  // for ReEntry; 25jan2012
        ReEntry();  // for record of thought; 25jan2012
        output += "&#1045;"  // "E"; 25jan2012  
        pho = "&#1045;"  // for ReEntry; 25jan2012
        ReEntry();  // for record of thought; 25jan2012
      }  // end of test for plural subject-number; 25jan2012
    }  // end of test for second-person; 25jan2012
    if (dba == 3) {  // third person; 25jan2012
      if (snu == 1) {  // subject-number parameter; 25jan2012
        output += "&#1045;"  // "E"; 25jan2012
        pho = "&#1045;"  // for ReEntry; 25jan2012
        ReEntry();  // for record of thought; 25jan2012
        output += "&#1058;"  //  "T"; 25jan2012  
        pho = "&#1058;"  // for ReEntry; 25jan2012
        ReEntry();  // for record of thought; 25jan2012
      }  // end of test for singular subject-number; 25jan2012
      if (snu == 2) {  // subject-number parameter; 25jan2012
        output += "&#1070;"  // "YU"; 25jan2012
        pho = "&#1070;"  // for ReEntry; 25jan2012
        output += "&#1058;"  //  "T"; 25jan2012  
        pho = "&#1058;"  // for ReEntry; 25jan2012
        ReEntry();  // for record of thought; 25jan2012
      }  // end of test for plural subject-number; 25jan2012
    }  // end of test for third-person; 25jan2012
    if (ctu == 0) {  // 19jan2012
      pho = 32;  // intervening space; 19jan2012
      ReEntry();  // 19jan2012
    }  // 19jan2012
    output += " ";  // add a space; 21jan2012
    Voice();  // 21jan2012
  act = 31;  // value intended for "vphract"; 21jan2012
// gencon = 0;  // reset as test; 23aug2012
}  // end of VerbGen(); 18jan2012


function VerbPhrase() {
  if (verblock > 0) {  // positive verblock? 24oct2011
    Psi[verblock].psiExam(); // expose all values to change one; 24oct2011
    nounlock = psi6;  // time-point of "seq" engram; 24oct2011
    gencon = 0;  // try to prevent VerbGen-call; 23aug2012
  }  // 24oct2011  
  RuReify();  // 5jan2012
  act = 0;  // Start with zero to look for psi1 higher than act.
  aud = 0;
  detour = 0;
  psi5 = 0; // 13aug2011
  motjuste = 0;
  if (verblock > 0) {  // already a verblock? 24oct2011
    ruLexicon[verblock].ruExam();  // examine row in array;  5jan2012
    verbpsi = ru0;  // grab the verbpsi; test; 28aug2012
    audbase = ru8;  // parameter for VerbGen to call AudBuffer; 29aug2012
    dba = prsn;  // parameter for VerbGen; 30aug2012
     for (i = t; i>midway; i--) {  // search for verb-form; 28aug2012
      ruLexicon[i].ruExam();  // examine Russian lexicon; 28aug2012
      if (ru0 == verbpsi) {  // stick with same verb; 28aug201
        if (ru2==nphrnum && ru4==prsn) {  // 29aug2012
            vphraud = ru8;  // test; 28aug2012
            break;  // one instance is enough; 29aug2012
          }  // end of match for number and person; 28aug2012
          else { // test; 28aug2012
            gencon = 1;  // prevent usual call from VerbPhrase to SpeechAct; 29aug2012
            VerbGen();  // test; 29aug2012

       // }  // test; 28aqug2012
     // }  // end of test for correct number; 28aug2012
      }  // end of test for same verb; 28aqug2012

      }  // end of triple test of ru0; ru2; ru4; 29aug2012
    }  // end of loop in search of correct verb-form;; 28aug2012
    
 //   vphraud = ru8;  //  5jan2012; 28aug2012
  }  // end of test for a positive verblock; 24oct2011
  opt = 8;
  psi = 0;
  verbcall = 1;
  vphract = 0;  // for validity of threshold-tests; 15aug2011
// vphraud = 0;  // prevent spurious carry-overs; 24oct2011
// vphraud = 0;  // prevent spurious carry-overs; 24oct2011; 29aug2012
 if (verblock == 0) {  // prevent false negations; 24oct2011
   if (subjpsi==701) dba = 1;  // must be 1st person; 17jan2012
  for (i = t; i>midway; i--) {
    Psi[i].psiExam(); // examine Psi concept array; 13aug2011
      if (psi5 == 8) {  // if 8=pos verb; 13aug2011
        if (psi1 > act) {  // If psi1 is higher than "act"; 13aug2011
          tselv = i;  // time of selected verb; 24may2011
          motjuste = psi0; // store psi-tag of verb; 13aug2011
          verbpsi = motjuste;  // for WhatAuxSVerb;  9jul2011
          beact = psi1; // store activation of be-verb; 13aug2011
          if (maxbeact < beact) {  // if maximum is smaller; 10nov2010
            maxbeact = beact;  // for comparisons; 10nov2010
          }  // only store when beact is large; 10nov2010
          if (psi1 > 0) {  // 15aug2011
            if (psi3==250) {  // 250=NYE ("not"); 17jan2012
              negjux = psi3;  // 13oct2011
            }  // end of test for 250=NYE; 17jan2012
          }  // end of test for positive activation; 15aug2011
          if (verblock > 0) {  // if positive verblock exists; 24oct2011
            if (i == verblock) {  // upon reaching engram; 24oct2011
              motjuste = psi0;  // grab verblock psi; 24oct2011
              act = 64;  // to pass threshold-test; 24oct2011
              negjux = psi3;  // for negation of verb; 24oct2011
              nounlock = psi6;  // after verb grab "seq"; 24oct2011
              if (subjpsi==701) {  // 17jan2012
                dba = 1;  // verb must be 1st person; 17jan2012
                snu = 1;  // subject number; 22jan2012
              }  // end of test for 1st person singular; 17jan2012
              ruLexicon[i].ruExam();  // Russian lexicon;  5jan2012
              vphraud = ru8;  // for SpeechAct;  5jan2012
              break;  // prevent usurpation of pre-ordained seq; 7oct2011
            }  // end of test for index = verblock; 24oct2011
          }  // end of test for positive verblock; 24oct2011
          if (psi1 > 0) {  // positive activation? 24oct2011
            if (verblock==0) negjux = psi3; // negative be-verbs; 24oct2011
            tqv = psi6;  // underailable tqv; 24oct2011
          }  // end of test for positive activation; 24oct2011
          predpos = psi5;  // 
          Psi[i].psiExam(); // Check for negation on psi3; 29jun2011
          act = psi1; // To test for a higher psi1; 15aug2011
          if (act > 8) {
            sloshmark = "+";  // for Tutorial display; 9aug2011
          }  // end of test for positive activation; 24oct2011
        }  // end of if-clause looking for higher activation
      } else continue;
  }  // end of search for "motjuste" in Psi array; 13aug2011

 if (vphraud == 0) {  // if not substituted above; 29aug2012
   for (i = t; i>midway; i--) {  // separate search for verb-form;
    ruLexicon[i].ruExam();  // examine Russian lexicon; 17jan2012
    if (motjuste != 0 && ru0 == motjuste) {  // look for motjuste; 17jan2012
    audbase = ru8;  // location of quasi-stem for VerbGen(); 18jan2012
      if (ru4 == dba)  {  // for proper person; 17jan2012
        if (ru2 == snu) {  // num(ber) parameter; 24jan2012
          vphraud = ru8;  // auditory recall-vector; 17jan2012
          break;  // exit the loop after first find; 17jan2012
        }  // end of number-parameter test; 17jan2012
      }  // end of dba-parameter test; 17jan2012
   // gencon = 1;  // status flag for detour into VerbGen; 19jan2012
   // gencon = 1;  // Unnecessary? Commenting out as test; 23aug2012
      dba = 3;  // a default unless countermanded; 31jan2012
      if (subjpsi == 701) dba = 1;  // YA (I) 1st p. sing; 29jan2012
      if (subjpsi == 707) dba = 2;  // TY (you) 2nd p. sing 29jan2012
      if (subjpsi == 713) dba = 3;  // ON (he) 3rd p. sing; 29jan2012
      if (subjpsi == 719) dba = 3;  // ONA (she) 3rd p. s; 29jan2012
      if (subjpsi == 725) dba = 3;  // ONO (it) 3rd p. s; 29jan2012
      if (subjpsi == 731) dba = 1;  // MWI (we) 1st p. pl; 29jan2012
      if (subjpsi == 737) dba = 2;  // VWI (you) 2nd p. pl; 29jan2012
      if (subjpsi == 749) dba = 2;  // VWI (you) 2nd p. s; 29jan2012
      if (subjpsi == 755) dba = 2;  // VWI (you) 2nd p. pl; 29jan2012
      if (subjpsi == 743) dba = 3;  // ONI (they) 3rd p. p; 29jan2012
      vip = motjuste;  // for setting "audpsi" on engram; 31jan2012
      vip = 0;  // reset for safety; 31jan2012
    break;  // test; 19jan2019
    }  // end of test for motjuste; 17jan2012
  }  // end of loop in search of motjuste; 17jan2012
 }  // end of test against zero-vphraud; 29aug2012
} // end of verblock-test to prevent false negations; 20oct2011
  if (verblock > 0) {  // 24oct2011
    Psi[verblock].psiExam(); // expose all values to change one; 24oct2011
    motjuste = psi0;  // verblock override of activational competition;
    negjux = psi3;  // capture any "12=NOT" during override; 25oct2011
    if (subjpsi==701) {  // 17jan2012
       dba = 1;  // verb must be 1st person; 17jan2012
    }  // end of test for 1st person singular; 17jan2012
    ruLexicon[verblock].ruExam();  // examine Russian lexicon; 5jan2012
    vphraud = ru8;  // hold the auditory recall-vector;  5jan2012
    act = 64;  // prevent rejection of selection; 24oct2011
  }  // 24oct2011
  if (verblock > 0) {  // 19aug2012
    if (dba == 1) {  // if first person; 19aug2012
      for (i = t; i>midway; i--) {  // Look backwards for 701=menya; 18aug2012
        ruLexicon[i].ruExam(); // examine Russian lexicon; 19aug2012
        if (ru0 == motjuste) {  // If motjuste is found; 19aug2012
          if (ru4 == dba) {  // if dba matches; 19aug2012
            if (ru2 == verbnum) {  // number-match? 19aug2012
              vphraud = ru8;  // engram of verb; 19aug2012
              break; // Use most recent engram; 19aug2012
            }  // end of verbnum-match; 19aug2012
            else {  // if no form found; 20aug2012
              gencon = 1;  // status flag for detour into VerbGen; 20aug2012
              VerbGen();  // Generate a missing verb-form; 20aug2012
              audbase = 0;  // reset for safety; 20aug2012
            }  // end of else-clause; 20aug2012
          }  // end of dba-test; 19aug2012
        }  // End of search for motjuste; 19aug2012
      }  // End of loop finding verb-form; 19aug2012
    }  // end of override to find correct verb-form; 19aug2012
    if (dba == 2) {  // if second person; 20aug2012
      for (i = t; i>midway; i--) {  // Look backwards for 707=ty; 20aug2012
        ruLexicon[i].ruExam(); // examine Russian lexicon; 20aug2012
        if (ru0 == motjuste) {  // If motjuste is found; 20aug2012
          if (ru4 == dba) {  // if dba matches; 20aug2012
            if (ru2 == verbnum) {  // number-match? 20aug2012
              vphraud = ru8;  // engram of verb; 20aug2012
              break; // Use most recent engram; 20aug2012
            }  // end of verbnum-match; 20aug2012
            else {  // if no form found; 20aug2012
              gencon = 1;  // status flag for detour into VerbGen; 20aug2012
              VerbGen();  // Generate a missing verb-form; 20aug2012
              audbase = 0;  // reset for safety; 20aug2012
            }  // end of else-clause; 20aug2012
          }  // end of dba-test; 20aug2012
        }  // End of search for motjuste; 20aug2012
      }  // End of loop finding verb-form; 20aug2012
    }  // end of override to find correct verb-form; 20aug2012

  }  // end of code for override of verblocked verbs; 19aug2012

  Psi[tqv].psiExam(); // examine array row at "tqv"; 24oct2011
  Psi[tqv] = new psiNode(psi0,128,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
  node = 0;  // Reset tutorial verb display for showVerb().
  vphract = act;  // from highest-activation verb; 22jun2011
  if (motjuste == 0) {
    tov = t;
    if (nphrnum == 1) {  // 19jun2011
      if (mfnflag > 0) {  // if masc. or fem.; 3aug2011
        WhoBe();  // ask WHO not WHAT; 3aug2011
        mfnflag = 0;  // reset after use; 3aug2011
        return;  // abandon rest of VerbPhrase; 3aug2011
      }  // end of test to ask WHO instead of WHAT; 3aug2011
      qusub = subjpsi;  // as set in NounPhrase; 29oct2011
      qusubnum = snu;  // parameter for WhatBe; 24jan2012
      WhatBe();  // 19jun2011
      return;  // abandon rest of VerbPhrase; 27jun2011
    }  // 19jun2011
    if (nphrnum == 2) {  // if plural subject; 27jun2011
      topic = subjpsi;  // supersede any default;  7jul2011
      WhatSDo();  // Russian What do Subjects Do? 10jan2012
      yncon = 1;  // delay yes-or-no ? until after input; 27jun2011 
      return;  // abandon rest of VerbPhrase; 27jun2011
    }  // what-do-X-do as prelude to yes-or-no questions; 27jun2011
    else return;  // abort thought if number not known; 15aug2011
  }  // End of test for zero motjuste; 2sep2010
  if (motjuste > 0) {  // if positive motjuste; 2sep2010
    if (vphract < 20) {  // threshold level also in MindForth; 26jun2011
      if (nphrnum == 0 || nphrnum == 1) {  // unk or sing. 5jul2011
        if (mfnflag > 0) {  // if masc. or fem.; 3aug2011
          WhoBe();  // ask WHO not WHAT; 3aug2011
          mfnflag = 0;  // reset after use; 3aug2011
          return;  // abandon rest of VerbPhrase; 3aug2011
        }  // end of test to ask WHO instead of WHAT; 3aug2011
        qusub = subjpsi;  // as set in NounPhrase; 29oct2011
        qusubnum = snu;  // parameter for WhatBe; 24jan2012
        if (gencon == 0) {  // prevent double output; 19jan2012
          WhatBe();  // to ask a what-is question; 27jun2011
          return;  // abandon rest of VerbPhrase; 27jun2011
        }  // 19jan2012
      }  // arbitrarily asking what-is builds ontology; 27jun2011
      if (nphrnum == 2) {  // if plural subject; 27jun2011
        topic = subjpsi;  // supersede any default;  7jul2011
        WhatSDo();  // Russian What do Subjects Do? 10jan2012
        topic = " ";  // reset for safety;  7jul2011
        yncon = 1;  // delay yes-or-no ? until after input; 27jun2011 
        return;  // abandon rest of VerbPhrase; 27jun2011
      }  // what-do-X-do as prelude to yes-or-no questions; 27jun2011
      else return;  // abort thought if number not known; 15aug2011
    }  // end of test for vphract below 20=threshold; 15aug2011
    if (negjux==250) {  // if negated with 250=NYE (not); 12jan2012
   // unk = motjuste;  // temporary holding for if-clauses; 15aug2011
   // if (unk != 57 && unk != 58 && unk != 66 && unk != 67) {
     // AuxVerb();  // to say "DO" or "DOES"; 29jun2011
        for (i = t; i>midway; i--) { // search backwards 29jun2011
          ruLexicon[i].ruExam();  // examine Russian lexicon; 5jan2012
          if (ru0 == 250) {  // if 250=Nye is found; 5jan2012
            aud = ru8;  // recall-vector of auditory engram;  4jan2012
            break;  // finding one "NOT" is enough; 29jun2011
          } // end of test for 12=NOT; 29jun2011
        }  // end of search of Russian lexicon; 5jan2012
        SpeechAct();  // speak or display the adverb "NOT"; 29jun2011
   // }  // end of test for no be-verb; 15aug2011 
    }  // end of test for 250=NOT negjux; 5jan2012
    unk = motjuste;  // temporary holding for if-clauses; 15aug2011
    if (unk != 57 && unk != 58 && unk != 66 && unk != 67) {
      if (nphrnum==1) {  // if singular; 2sep2010
        if (prsn==3) {  // 3rd person? 10may2011
          // Next code must change to Russian OutBuffer; 12jan2012
          flex1 = "S";  // xfer to SpeechAct(); 14sep2011
        }    // end of test for third-person; 10may2011
      }  // end of test for singular nphrnum; 2sep2010
    }  // end of test for absence of a be-verb; 15aug2011
    unk = motjuste;  // temporary holding for if-clauses; 29odt2011
    if (unk == 57 || unk == 58 || unk == 66 || unk == 67) {  // 29oct2011
      predflag = 1;  // for sake of NounPhrase; 29oct2011
    }  // end of two-step be-verb substitution; 29oct2011
    if (motjuste==800) {  // 800=BWIT' (be); 11jan2012
      if (subjpsi==701) {  // 701=YA ("I"); 11jan2012
      }  // end of test for subject-psi 50=I; 13aug2011
      if (subjpsi==707 || subjpsi==479) {  // fam. or formal; 11jan2012
      }  // end of test for 56=YOU; 15aug2011 
    }  // end of test for 58=BE; 13aug2011
    vacpsi = motjuste;  // for VerbAct(); 18aug2011
    VerbAct();  // moved from below SpeechAct & old KB-inhib; 18aug2011
    aud = vphraud;  // transfer just before call; 28jun2011
    if (gencon == 0) {  // if no call to VerbGen(); 19jan2012
      SpeechAct(); // main call from VerbPhrase to SpeechAct; 2sep2010
    }  // prevent speaking extra verb after VerbGen(); 19jan2012
    flex1 = "";  // corrective measure; 27jun2011; 14sep2011
    gencon = 0;  // reset whether used or not; 19jan2012
    vphraud = 0;  // reset for safety; 28jun2011
  }  // End of test for positive motjuste; 2sep2010
  VerbClear();  // deactivate before inhibiting; 18aug2011
  // Next line inhibits 2nd engram of pair with old engram; 24may2011
  Psi[t].psiExam(); // expose all values to change one; 8jun2011
  Psi[t] = new psiNode(psi0,-48,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
  subjectflag = 0;  // for SpreadAct slosh-over; 18oct2010
  urpsi = motjuste;
  caller = "VerbPhrase";
  PsiDamp();  // MindForth wiki-page spelling; 15nov2010
  RuDamp();   // Wiki-page form of name; 5jan2012
  // Following lines inhibits old KB verb-node; 8jun2011
  Psi[tselv].psiExam(); // expose all values to change one; 8jun2011
  Psi[tselv] = new psiNode(psi0,-32,psi2,psi3,psi4,psi5,psi6,psi7,psi8);
  tselv = 0;  // Reset after use; 24may2011; 8jun2011
  unk = motjuste;  // temporary holding for if-clauses; 15aug2011
  if (unk == 57 || unk == 58 || unk == 66 || unk == 67) {  // 15aug2011
    predflag = 1;  // 20sep2011
    if (negjux==250) {  // if 250=Nye negates the verb-node; 5jan2012
      for (i = t; i>midway; i--) { // search backwards in time; 9aug2011
        ruLexicon[i].ruExam();  // examine the Russian lexicon; 5jan2012
        if (ru0 == 250) {  // if 250=Nye is found; 5jan20p12
          aud = ru8;  // recall-vector of auditory engram; 5jan2012
          break;  // finding one "NOT" is enough; 9aug2011
        } // end of test for 250=Nye; 5jan2012
      }  // end of search of English lexicon; 9aug2011
      SpeechAct();  // speak or display the adverb "NOT"; 9aug2011
      negjux = 0;  // reset for safety; 13oct2011
    }  // end of test for 12=NOT negation; 9aug2011
  }  // end of test for a present-tense be-verb; 15aug2011
//  motjuste = 0;
  psi = 0;
  pho = " ";
  dirobj = 1;
  dba = 4;  // 4=acc; test; 29jan2012
  if (subjpsi==50) {  // only for subject "50=I"; 25sep2011
    if (motjuste==62) {  // only for verb "62=SEE"; 25sep2011
      if (svo3==0) {  // if SEE has no direct object; 25sep2011
        VisRecog();  // a challenge for robot AI coders 25sep2011
        SpeechAct();  // say default from VisRecog; 25sep2011
        return;  // abandon rest of VerbPhrase; 25sep2011        
      }  // end of test for direct object; 25sep2011
    }  // end of test for "62=SEE" requiring VisRecog; 25sep2011
  }  // end of test for "50=I" subject of verb; 25sep2011
  if (motjuste == 57) {  // 14sep2011
   verbpsi = 57;  // 14sep2011
   predflag = 1; // 16sep2010
  }  // 14sep2011
  NounPhrase();
  predflag = 0;  // reset for safety; 16sep2010
  dirobj = 0;
  gencon = 0;  // prevent spurious VerbGen() calls; 23aug2012
  negjux = 0;  // reset for safety; 13oct2011
  nouncall = 0;
  tqv = 0;  // reset for safety; 25oct2011
  verblock = 0;  // after selection of NPhr seq-verb; 24oct2011
}  // End of VerbPhrase(); return to EnCog(); 29jun2011


function RuCog() {  // Russian cognition; 26jan2012
  moot = 0;  // may have been set in previous thought; 24oct2011
  morphpsi = 0;  // reset; from MindForth English AI; 15jan2012
  nphrnum = 0;  // reset after previous thoughts;  5jul2011
  PsiDecay();  // for distribution of PsiDecay influence; 3jul2011
  tov = t;  // For sake of ReActivate & InHibition;  8jun2011
  if (yncon == 1) {  // set in VerbPhrase after WhatAuxSDo; 3jul2011
    AskUser();  // for yes-or-no query; 3jul2011
    return;  // abandon the rest of EnCog; 3jul2011
  }  // 3jul2011
  if (inert > 1) {  // if no input start thinking; 23oct2011
    qusub = topic;  // default for WhatBe; 27oct2011
    if (cogpsi>0) qusub=cogpsi;  // override; 27oct2011
    qusubnum = snu;  // subject-number default for WhatBe; 26jan2012
    if (cognum > -1) qusubnum = cognum;  // override; 6nov2011
  if (cogpsi > 0) {  // if there is a question; 27oct2011
    artnum = qusubnum;  // parameter for EnArticle; 6nov2011
    WhatBe();  // ask question about a new concept; 18oct2011
  }  // end of test for presence of a query-subject; 27oct2011
    cognum = 0;  // reset for safety; 27oct2011
    cogpsi = 0;  // reset for safety; 18oct2011
    inert = 0;  // reset to resume counting; 18oct2011
    return;  // abandon the rest of EnCog; 18oct2011
  }  // end of arbitrary delay before initiating thought; 18oct2011
  document.all.cosmos.innerHTML = "";
  subjcall = 1;  // Set nouncall just before NounAct(); 21may2011
  audMemory[t].audExam();  // ReJuvenate test; 14jul2011
  audMemory[t] = new audNode(aud0,aud1,"{",aud3,aud4,aud5); // 14jul2011
  NounPhrase();
  subjcall = 0;  // Reset for safety; 21may2011
  verbnum = nphrnum;
  verbcall = 1;  
  VerbPhrase();  
  verbcall = 0;
  verbnum = 0;
  prevpsi = 0;  // safety measure; 14feb2012
  the1 = 0;
  the2 = 0;
  the3 = 0;
  the4 = 0;
  the5 = 0;
  the6 = 0;
  the7 = 0;
}  // End of RuCog(); return to ThInk(); 5jan2012
 
 
function ThInk() {
  PsiDecay();  // trying to reduce stray activation; 16oct2010
  PsiDecay();  // Sharply cutting high-activation concepts; 20may2011
  PsiDecay();  // trying to reduce stray activation;  8jun2011
  PsiDecay();  // trying to reduce stray activation;  8jun2011
  PsiDecay();  // test; remove; 3jul2011
  inert = (inert + 1); // but AudInput resets to zero; 18oct2011
  lurk = (lurk + 1); // AudListen() resets to zero; 29sep2010
  if (life==true) { // 29sep2010
 apb=("Thinking at time "+t+" NLP loop #"+lurk+" KbTraversal = "+kbtv);
    Voice(); // speak the all-points-bulletin "apb"; 29sep2010
  }  // 29sep2010
  abort = false;  
  if (quiet == true) {  
    pov = "#"; 
    output = ""; 
 // output = "";  // Commenting out as a test; 6nov2011
    outputplus = ""; 
 // outputplus = "";  // Commenting out as a test; 6nov2011
    if (glot == 1) {  // flag for polyglot AI;  9jul2011
      RuCog();  // think in Russian;  5jan2012
    }  // input of German might switch glot to two; 9jul2011
  }  // end of test for "quiet"; 13jul2011
  ordo = 0; 
  if (lurk > greet) {  // if no input by arbitrary time; 29sep2010
    kbtv = (kbtv + 1);  // increment as a trigger; 29sep2010
    KbTraversal();  // activate ideas as a greeting; 29sep2010
    lurk = 0;  // reset for safety; 29sep2010
  }  // end of test to launch greeting; 29sep2010
// output = "";  // Let AI thought persist during input; 6nov2011
// outputplus = "";  // Let AI thought persist during input; 6nov2011
  bias = 5;  // test ICW slosh-over; 15oct2010
}  // End of ThInk module.


function showSubject() {
  var kb = document.getElementById("cosmos");
  var seti = document.getElementById("star");
  var set = (document.getElementById("star").value);
  seti.value = set;
  if (brevity == 1) set = 1;
  if (brevity == 2) set = 2;
  if (brevity == 3) set = 3;
  if (brevity == 4) set = 4;
  if (brevity == 5) set = 5;
  if (brevity == 6) set = 6;
  if (brevity == 7) set = 7;
  if (brevity == 8) set = 8;
  if (brevity == 9) set = 9;
  if (brevity == 10) set = 10;
  if (brevity == 11) set = 11;
  if (brevity == 12) set = 12;
  if (brevity == 13) set = 13;
  if (brevity == 14) set = 14;
  if (brevity == 15) set = 15;
  if (brevity == 16) set = 16;
  if (brevity == 17) set = 17; // prevent ectopic rectangles; 29sep2010
  var sunset = "sun"+set;
  var fact = document.createElement("div");
  fact.setAttribute("id",sunset);
  fact.style.setAttribute('position', 'absolute');
  fact.style.setAttribute('left', '10');
  fact.style.setAttribute('top', '50');
  if (set==1) fact.style.setAttribute('top', '240');
  if (set==2) fact.style.setAttribute('top', '260');
  if (set==3) fact.style.setAttribute('top', '280');
  if (set==4) fact.style.setAttribute('top', '300');
  if (set==5) fact.style.setAttribute('top', '320');
  if (set==6) fact.style.setAttribute('top', '340');
  if (set==7) fact.style.setAttribute('top', '360');
  if (set==8) fact.style.setAttribute('top', '380');
  if (set==9) fact.style.setAttribute('top', '400');
  if (set==10) fact.style.setAttribute('top', '420');
  if (set==11) fact.style.setAttribute('top', '440');
  if (set==12) fact.style.setAttribute('top', '460');
  if (set==13) fact.style.setAttribute('top', '480');
  if (set==14) fact.style.setAttribute('top', '500');
  if (set==15) fact.style.setAttribute('top', '520');
  if (set==16) fact.style.setAttribute('top', '540');
  if (set==17) fact.style.setAttribute('top', '560'); // 29sep2010
  fact.style.setAttribute('width', '200');
  fact.style.setAttribute('height', '19');
  fact.style.setAttribute('backgroundColor', 'aqua');
  holdaud = aud;
  do {
    audMemory[aud].audExam();
    tsubject += aud0;
    ctu = aud4;
    aud = (aud + 1);
  }
  while (ctu == 1);
    if (ctu == 0) {
    pho = 32;
  }
  tsubject += " ";
  fact.innerHTML = tseln + " " + tsubject + " to " + engram;
  preview = "";  // adding "tseln" above;  20aug2012
  seqverb = "";
  engram = "";
  aud = holdaud;
  tsubject = "";
  kb.appendChild(fact);
}

function showVerb() {
  var aha = document.getElementById("idea");
  var taxi = document.getElementById("node");
  var tax = (document.getElementById("node").value);
  taxi.value = tax;
  if (equity == 1) tax = 1;
  if (equity == 2) tax = 2;
  if (equity == 3) tax = 3;
  if (equity == 4) tax = 4;
  if (equity == 5) tax = 5;
  if (equity == 6) tax = 6;
  if (equity == 7) tax = 7;
  if (equity == 8) tax = 8;
  if (equity == 9) tax = 9;
  if (equity == 10) tax = 10;
  if (equity == 11) tax = 11;
  if (equity == 12) tax = 12;
  if (equity == 13) tax = 13;
  if (equity == 14) tax = 14;
  if (equity == 15) tax = 15;
  if (equity == 16) tax = 16;
// if (equity == 17) tax = 17; // prevent ectopic rectangles; 29sep2010
// if (equity == 18) tax = 18; // prevent ectopic rectangles; 29sep2010
  var syntax = "syn"+tax;
  var concept = document.createElement("div");
  concept.setAttribute("id",syntax);
  concept.style.setAttribute('position', 'absolute');
  concept.style.setAttribute('left', '216');
  concept.style.setAttribute('top', '60');
  if (tax==1) concept.style.setAttribute('top', '250');
  if (tax==2) concept.style.setAttribute('top', '270');
  if (tax==3) concept.style.setAttribute('top', '290');
  if (tax==4) concept.style.setAttribute('top', '310');
  if (tax==5) concept.style.setAttribute('top', '330');
  if (tax==6) concept.style.setAttribute('top', '350');
  if (tax==7) concept.style.setAttribute('top', '370');
  if (tax==8) concept.style.setAttribute('top', '390');
  if (tax==9) concept.style.setAttribute('top', '410');
  if (tax==10) concept.style.setAttribute('top', '430');
  if (tax==11) concept.style.setAttribute('top', '450');
  if (tax==12) concept.style.setAttribute('top', '470');
  if (tax==13) concept.style.setAttribute('top', '490');
  if (tax==14) concept.style.setAttribute('top', '510');
  if (tax==15) concept.style.setAttribute('top', '530');
  if (tax==16) concept.style.setAttribute('top', '550');
  if (tax==17) concept.style.setAttribute('top', '570'); // 29sep2010
  if (tax==18) concept.style.setAttribute('top', '590'); // 29sep2010
  if (tax==19) concept.style.setAttribute('top', '610'); // 29sep2010
  if (tax==20) concept.style.setAttribute('top', '630'); // 29sep2010
  concept.style.setAttribute('width', '220');
  concept.style.setAttribute('height', '19');
  concept.style.setAttribute('backgroundColor', 'pink');
  holdaud = aud;
  do {
    audMemory[aud].audExam();
    tverb += aud0;
    ctu = aud4;
    aud = (aud + 1);
  }
  while (ctu == 1);
    if (ctu == 0) {
    pho = 32;
  }
  tverb += " ";
  concept.innerHTML = verblock + " " + tverb + " to " + sloshmark + engram;
  preview = "";  // adding "verblock" above; 20aug2012
  engram = "";
  aud = holdaud;
  tverb = "";
  aha.appendChild(concept);
}
 
function showObject() {
  var query = document.getElementById("radar");
  var turi = document.getElementById("ufo");
  var tur = (document.getElementById("ufo").value);
  turi.value = tur;
  if (city == 1) tur = 1;
  if (city == 2) tur = 2;
  if (city == 3) tur = 3;
  if (city == 4) tur = 4;
  if (city == 5) tur = 5;
  if (city == 6) tur = 6;
  if (city == 7) tur = 7;
  if (city == 8) tur = 8;
  if (city == 9) tur = 9;
  if (city == 10) tur = 10;
  if (city == 11) tur = 11;
  if (city == 12) tur = 12;
  if (city == 13) tur = 13;
  if (city == 14) tur = 14;
  if (city == 15) tur = 15;
  if (city == 16) tur = 16;
  if (city == 17) tur = 17; // prevent ectopic rectangles; 29sep2010
  var abitur = "abi"+tur;
  var answer = document.createElement("div");
  answer.setAttribute("id",abitur);
  answer.style.setAttribute('position', 'absolute');
  answer.style.setAttribute('left', '440');
  answer.style.setAttribute('top', '50');
  if (tur==1) answer.style.setAttribute('top', '240');
  if (tur==2) answer.style.setAttribute('top', '260');
  if (tur==3) answer.style.setAttribute('top', '280');
  if (tur==4) answer.style.setAttribute('top', '300');
  if (tur==5) answer.style.setAttribute('top', '320');
  if (tur==6) answer.style.setAttribute('top', '340');
  if (tur==7) answer.style.setAttribute('top', '360');
  if (tur==8) answer.style.setAttribute('top', '380');
  if (tur==9) answer.style.setAttribute('top', '400');
  if (tur==10) answer.style.setAttribute('top', '420');
  if (tur==11) answer.style.setAttribute('top', '440');
  if (tur==12) answer.style.setAttribute('top', '460');
  if (tur==13) answer.style.setAttribute('top', '480');
  if (tur==14) answer.style.setAttribute('top', '500');
  if (tur==15) answer.style.setAttribute('top', '520');
  if (tur==16) answer.style.setAttribute('top', '540');
  if (tur==17) answer.style.setAttribute('top', '560'); // 29sep2010
  answer.style.setAttribute('width', '210');
  answer.style.setAttribute('height', '19');
  answer.style.setAttribute('backgroundColor', 'yellow');
  holdaud = aud;
  do {
    audMemory[aud].audExam();
    tobject += aud0;
    ctu = aud4;
    aud = (aud + 1);
  }
  while (ctu == 1);
    if (ctu == 0) {
    pho = 32;
  }
  tobject += " ";
  answer.innerHTML = nounlock + "  " + tobject + " activates " + engram;
  preview = "";  // adding "nounlock" above; 20aug2012
  aud = holdaud;
  tobject = "";
  engram = "";
  query.appendChild(answer);
}

function wipeSubject(oldnouns) {
  var istr = document.getElementById("cosmos");
  var zilch = document.getElementById(oldnouns);
  istr.removeChild(zilch);
}
 
function wipeVerb(oldverbs) {
  var btdt = document.getElementById("idea");
  var rasa = document.getElementById(oldverbs);
  btdt.removeChild(rasa);
}
 
function wipeObject(oldobjects) {
  var scnr = document.getElementById("radar");
  var nada = document.getElementById(oldobjects);
  scnr.removeChild(nada);
}
 
function FreeWill() {
  apb = "Volition module has been called.";
  Voice();
}
 
function MotorOutput() {
  apb = "Motorium module has been called.";
  Voice();
}
 

function Diagnostic() {  // 22dec2011; 5jan2012
  psiList();  //  2jan2012
  ruList();   //  2jan2012
  audList();  // 22dec2011
  if (trouble == true) {  // 22dec2011
    document.all.psicolumn.innerHTML = psidata; //  2jan2012
    document.all.rucolumn.innerHTML = rudata;   //  2jan2012
    document.all.audcolumn.innerHTML = auddata; // 22dec2011
   }  // 22dec2011
  html = ""; // 22dec2011
  psidata = ("<b>" + "Psi mindcore concepts" + "<\/b>" + "<BR>");
  psidata += ("krt psi act num jux pre pos tqv seq rux"); // 2jan2012
  rudata = ("<b>" + "Russian lexical fibers" + "<\/b>" + "<BR>");
  rudata += ("krt nru act num mfn dba fex pos fin aud"); // 2jan2012
  auddata = ("<b>" + "Auditory memory nodes" + "<\/b>" + "<BR>");
  auddata += ("krt pho act pov beg ctu audpsi"); // 22dec2011
}  // end of Diagnostic(); 22dec2011; 5jan2012

 
function TuringTest() {
  if (document.all["cb3"].checked == true) {
    document.all["cb1"].checked = false;
    document.all.souvenir.innerHTML = "";
    document.all["cb2"].checked = false;
     tutor = false;
    trouble = true;
    fyi = 3;
  }
  if (document.all["cb3"].checked == false) {
    document.all.tabula.innerHTML = "";
    document.all.psicolumn.innerHTML = "";
    document.all.rucolumn.innerHTML = ""; // 5jan2012
    document.all.audcolumn.innerHTML = "";
    trouble = false;
  }
  if (document.all["cb1"].checked == true) {
    document.all["cb2"].checked = false;
     document.all["cb3"].checked = false;
    document.all.tabula.innerHTML = "";
    document.all.psicolumn.innerHTML = "";
    document.all.rucolumn.innerHTML = ""; // 5jan2012
    document.all.audcolumn.innerHTML = "";
    trouble = false;
    hardcopy = true;
    fyi = 1;
    now = new Date(); 
    adcopy=
("<font size='+2'>Dushka AI version "+vrsn+" on " +now+"<\/b><\/font>");
    document.all.souvenir.innerHTML = adcopy;  // 9jan2012
  }
  if (document.all["cb1"].checked == false) {
    document.all.souvenir.innerHTML = "";
    hardcopy = false;
    document.all.tabula.innerHTML = "";
  }
  if (hardcopy == true) {
    if (userline != "" || output != "" ) {
      Transcript();
    }
  }
  if (document.all["cb2"].checked == true) {
    document.all["cb1"].checked = false;
    document.all.souvenir.innerHTML = "";
    hardcopy = false;
    document.all["cb3"].checked = false;
    document.all.tabula.innerHTML = "";
    document.all.psicolumn.innerHTML = "";
    document.all.rucolumn.innerHTML = ""; // 5jan2012
    document.all.audcolumn.innerHTML = "";
    trouble = false;
    tutor = true;
    fyi = 2;
  }
  if (document.all["cb2"].checked == false) {
    tutor = false;
    if (fyi == 2) fyi = 0;
  }
  if (trouble == true) {
    Diagnostic();
  }
  if (life == true) {
    document.forms[1].ear.focus();
  }
}

 
function SeCurity() {
  TuringTest();
// if (t > 160)  nonce = vault;  // Diagnostic display of all thought.
  if (t > 160)  nonce = 503;  // special test on 23aug2012

// nonce = 1;  // temporary; for full-view troubleshooting; 19aug2012
// if (t > 160)  nonce = 460;  // Only while re-coding RuBoot; 23jan2012
  if (t > (cns-64)) ReJuvenate();
  if (life == true) {
apb=("AI 4U on KB psi #"+kbtv+" at t="+t+" is alive on cyc #"+rjc+" since " +dob+ ".");
      if (t > (cns-32)) {
      apb = "WARNING!  Consider clicking Refresh. ";
      apb += ("Only " + (cns-t) + " spaces are left."); 
    }
    Voice();
  } else {
    apb=("<font color='red'>"+"Mental function suspended."+"<\/font>");
    Voice();
  }
}

function MainLoop() {
  if (brevity > 0)  wipeSubject("sun" + 1);
  if (brevity > 1)  wipeSubject("sun" + 2);
  if (brevity > 2)  wipeSubject("sun" + 3);
  if (brevity > 3)  wipeSubject("sun" + 4);
  if (brevity > 4)  wipeSubject("sun" + 5);
  if (brevity > 5)  wipeSubject("sun" + 6);
  if (brevity > 6)  wipeSubject("sun" + 7);
  if (brevity > 7)  wipeSubject("sun" + 8);
  if (brevity > 8)  wipeSubject("sun" + 9);
  if (brevity > 9)  wipeSubject("sun" + 10);
  if (brevity > 10) wipeSubject("sun" + 11);
  if (brevity > 11) wipeSubject("sun" + 12);
  if (brevity > 12) wipeSubject("sun" + 13);
  if (brevity > 13) wipeSubject("sun" + 14);
  if (brevity > 14) wipeSubject("sun" + 15);
  if (brevity > 15) wipeSubject("sun" + 16);
  if (brevity > 16) wipeSubject("sun" + 17); // 1oct2010
  brevity = 0;
  star = 0; 
  if (equity > 0)  wipeVerb("syn" + 1);
  if (equity > 1)  wipeVerb("syn" + 2);
  if (equity > 2)  wipeVerb("syn" + 3);
  if (equity > 3)  wipeVerb("syn" + 4);
  if (equity > 4)  wipeVerb("syn" + 5);
  if (equity > 5)  wipeVerb("syn" + 6);
  if (equity > 6)  wipeVerb("syn" + 7);
  if (equity > 7)  wipeVerb("syn" + 8);
  if (equity > 8)  wipeVerb("syn" + 9);
  if (equity > 9)  wipeVerb("syn" + 10);
  if (equity > 10) wipeVerb("syn" + 11);
  if (equity > 11) wipeVerb("syn" + 12);
  if (equity > 12) wipeVerb("syn" + 13);
  if (equity > 13) wipeVerb("syn" + 14);
  if (equity > 14) wipeVerb("syn" + 15);
  if (equity > 15) wipeVerb("syn" + 16);
  if (equity > 16) wipeVerb("syn" + 17); // 1oct2010
  if (equity > 17) wipeVerb("syn" + 18); // 1oct2010
  if (equity > 18) wipeVerb("syn" + 19); // 1oct2010
  if (equity > 19) wipeVerb("syn" + 20); // 1oct2010
  if (equity > 20) wipeVerb("syn" + 21); // 1oct2010
  equity = 0;
  node = 0;
  if (city > 0)  wipeObject("abi" + 1);
  if (city > 1)  wipeObject("abi" + 2);
  if (city > 2)  wipeObject("abi" + 3);
  if (city > 3)  wipeObject("abi" + 4);
  if (city > 4)  wipeObject("abi" + 5);
  if (city > 5)  wipeObject("abi" + 6);
  if (city > 6)  wipeObject("abi" + 7);
  if (city > 7)  wipeObject("abi" + 8);
  if (city > 8)  wipeObject("abi" + 9);
  if (city > 9)  wipeObject("abi" + 10);
  if (city > 10) wipeObject("abi" + 11);
  if (city > 11) wipeObject("abi" + 12);
  if (city > 12) wipeObject("abi" + 13);
  if (city > 13) wipeObject("abi" + 14);
  if (city > 14) wipeObject("abi" + 15);
  if (city > 15) wipeObject("abi" + 16);
  if (city > 16) wipeObject("abi" + 17); // 1oct2010
  city = 0;
  ufo = 0;
  SeCurity();
  SensoryInput();
  brain = true;
  ThInk();  // reserving "inert" for cogpsi calling WhatBe; 18oct2011  
  if (life == true) {
  TID=window.setTimeout("MainLoop();",10000);
  }
}
 </script></head>
<!--*********AI code is above; visible Mind is below**********-->
<body bgcolor="white" onKeyUp="if(event.keyCode==9) Tab();" onLoad="RuBoot()">
<a name="top"></a>

<fieldset>
<legend><font color="navy"><b>
&#1059;&#1087;&#1088;&#1072;&#1074;&#1083;&#1077;&#1085;&#1080;&#1077; - 
 
 <a href="http://www.scn.org/~mentifex/Dushka.html"
 title="Dushka distribution source" 
 style="text-decoration:none;">
&#1044;&#1091;&#1096;&#1082;&#1072;</a> - 
 
 <a href="http://www.gotai.net/forum/" 
 title="AI discussion forum in Russian" 
 style="text-decoration:none;">
&#1048;&#1089;&#1082;&#1091;&#1089;&#1089;&#1090;&#1074;&#1077;&#1085;&#1085;&#1099;&#1081; 
<!-- artificial -->
 &#1048;&#1085;&#1090;&#1077;&#1083;&#1083;&#1077;&#1082;&#1090;
 <!-- intelligence --></a> - 
 
 <a href="http://mind.sourceforge.net/theory5.html" 
 title="theory of mind for artificial intelligence" 
 style="text-decoration:none;">
&#1058;&#1077;&#1086;&#1088;&#1080;&#1103;
<!-- Theory --></a> - 
 
 <a href="http://www.scn.org/~mentifex/AiMind.html"
 title="AI Mind in English">
AiMind</a> - 

 <a href="http://www.scn.org/~mentifex/RuAiUser.html"
 title="Russian AI User Manual in English">
Manual</a> - 

 <a href="http://code.google.com/p/mindforth/wiki/RuBoot" 
 title="Russian bootstrap module in JavaScript for MSIE">
RuBoot</a></b>
</font></legend>
<form name="modes">
<input type="checkbox" name="cb1" onClick="Transcript();"> 
 &#1055;&#1088;&#1086;&#1090;&#1086;&#1082;&#1086;&#1083; 
<!-- Protocol (Transcript) --> 

<input type="checkbox" name="cb2" onClick="Tutorial();"> 
 &#1054;&#1073;&#1091;&#1095;&#1077;&#1085;&#1080;&#1077; 
<!-- Tutorial -->

<input type="checkbox" name="cb3" onClick="TuringTest();" checked> 
 &#1044;&#1080;&#1072;&#1075;&#1085;&#1086;&#1089;&#1090;&#1080;&#1082;&#1072 - 
<!-- Diagnostic -->

<a href="http://bookstore.iuniverse.com/Products/SKU-000540906/AI4U.aspx"
 title="AI4U Mobi e-book for Kindle & app; ePub file for 
Sony(R) eReader, Kobo eReader, Nook(TM), iBooks">
<img border="0" 
 src="http://farm1.static.flickr.com/51/179758367_f283f0d6e0_s.jpg"
 alt="AI4U e-book in English"></a> 

<input type="checkbox" name="cb4" onClick="Shutdown();">
<font color="fuchsia"><b>
&#1054;&#1089;&#1090;&#1072;&#1085;&#1086;&#1074;&#1082;&#1072;</b></font> -  
<!-- Halt -->

<input type="checkbox" name="cb5" onClick="Destroy();"> 
<font color="red"><b>
&#1047;&#1072;&#1074;&#1077;&#1088;&#1096;&#1080;&#1090;&#1100; - </font> 
<!-- Terminate --> 
(&#1079;&#1072;&#1082;&#1088;&#1099;&#1090;&#1100; <!-- close -->
 &#1086;&#1082;&#1085;&#1086;)</b><br /> <!-- window -->
</form>
</fieldset>

<div id="mouth" style="position:static; 
 background-color:silver; height:35">
&#1042;&#1089;&#1105;, <!-- All -->
 &#1095;&#1090;&#1086; <!-- what -->
 &#1091;&#1084; <!-- the mind -->
 &#1076;&#1091;&#1084;&#1072;&#1077;&#1090;, <!-- thinks -->
 &#1073;&#1091;&#1076;&#1077;&#1090; <!-- will be -->
 &#1079;&#1076;&#1077;&#1089;&#1100;. <!-- here. -->
</div>

<form onSubmit="if (this.submitted) return true; else {CR(); return false;};">
 <b>&#1053;&#1072;&#1087;&#1080;&#1096;&#1080; <!-- Write -->
 &#1079;&#1076;&#1077;&#1089;&#1100;, <!-- here, -->
 &#1095;&#1090;&#1086; <!-- what -->
 &#1090;&#1099; <!-- you --> 
 &#1076;&#1091;&#1084;&#1072;&#1077;&#1096;&#1100;.</b><br /><!-- think. -->
<input type="text" name="ear" value="" size="80" onKeyDown="AudListen()">
</form>

<div id="brain" style="position:static;
 background-color:lightgreen">
&#1057;&#1086;&#1074;&#1077;&#1090;&#1099; <!-- counsel -->
</div>
 
<noscript>
<p>The Robot AI Mind requires Microsoft Internet Explorer <br />
with JavaScript enabled.<br /></p></noscript>
 
<div id="souvenir" style="position:static; width:640;
 background-color:lightyellow">
MSIE/ View/ Source:  File/ Save As... C:\Dushka.html
</div>
 
<div id="tabula" style="position:static; width:640;
 background-color:clear">
Unclick Diagnostic prior to clicking on Transcript.
</div>
 
<!-- The Diagnostic columns are present but invisible. -->
<div id="psicolumn" style="position:absolute; left:1; top:310;
width:240; height:140; background-color:clear">
</div>
 
<div id="rucolumn" style="position:absolute; left:240; top:310;
width:240; height:140; background-color:clear">
</div>
 
<div id="audcolumn" style="position:absolute; left:480; top:310;
width:200; height:140; background-color:clear">
</div>
 
<div id="cosmos"> 
<font color="navy"><strong><pre>
   Subject associates to verb.   Verb associates to object.    Object free-associates.
  |--------------------------|  |--------------------------|  |----------------------|
  | CATS associates to CHASE |  | EAT associates to  BUGS  |  | FISH activates CATCH |
  | CATS associates to LOVE  |  | EAT associates to +FISH  |  | FISH activates LIKE  |
  | CATS associates to HATE  |  | EAT associates to  BIRDS |  | FISH activates EAT   |
  | CATS associates to EAT   |   --------------------------   | FISH activates CHASE |
  | CATS associates to NEED  |                                | FISH activates AVOID |
   --------------------------                                   ---------------------
</pre></strong></font></div>

<div id="idea"> </div>
 
<div id="radar"> </div>

<input type="hidden" value="0" id="star" />
<input type="hidden" value="0" id="node" />
<input type="hidden" value="0" id="ufo" />
 
</body><!-- Change Log comments of the HTML variety:
Tues.13dec2011 "ru111213" initiates the AI Mind Control Panel with links.
Sun.18dec2011 "ru111218" shows display of Russian output.
Tues.20dec2011 "ru111220" uses CP-1251 escape codes for Cyrillic.
Thurs.22dec2011 "ru111222" shows Russian words held in memory.
Wed.28dec2011 "ru111228" prepares a verb for OutBuffer manipulation.
Wed.28dec2011 "ru111229" uses OutBuffer to change verb-endings.
Mon.2jan2012 "ru120102" displays three arrays in Diagnostic mode.
Wed.4jan2012 "ru120104" has minimal RuBoot to test input/output.
Thurs.5jan2012 "ru120105" merges Russian and English AI Minds.
Fri.6jan2012 "ru120106" is first clean-up after merging of code.
Sat.7jan2012 "ru120107" solves the problem of word recognition.
Mon.9jan2012 "ru120109" has RuBoot with words for special modules.
Tues.10jan2012 "ru120110" with WhatBe() has AI asking what it is.
Wed.11jan2012 "ru120111" removes code pertinent to English.
Thurs.12jan2012 "ru120112" removes or deactivates all English code.
Thurs.12jan2012 "12jan12B" achieves recognition of verb-endings.
Sun.15jan2012 "ru120115" achieves recognition of verb-stems.
Tues.17jan2012 "ru120117" uses parameters to select output verb.
Thurs.19jan2012 "ru120119" generates a missing Russian verb-form.
Sat.21jan2012 "ru120121" enhances VerbGen for generating verbs.
Mon.23jan2012 "ru120123" adds small knowledge base (KB) of ideas.
Wed.25jan2012 "ru120125" fills in VerbGen with six verb-forms.
Thurs.26jan2012 "ru120126" restores deleted "seqneed" functionality.
Fri.27jan2012 "ru120127" uses parameters to find nominative subjects.
Mon.30jan2012 in VerbGen creates Russian verbs without engram-gaps.
Wed.1feb2012 "ru120201" improves tagging of verbs and direct objects.
Sat.4feb2012 "ru120204" learns noun-endings like a human child learns.
Sat.11feb2012 "ru120211" integrates unspoken be-verbs with InStantiate.
Tues.14feb2012 "ru120214" skips unwarranted default-only be-verbs.
Sat.18aug2012 "ru120818" overrides improper pronouns and verb-forms.
Mon.20aug2012 "ru120820" attempts to substitute VerbGen corrections.
Thurs.23aug2012 "23aug12" begins to find verb-forms as necessary.
Wed.29aug2012 "29aug12" VerbGen returns stem of inveniend verb.
Thurs.30aug2012 "30aug12" uses "dba" as parameter for VerbGen.
(end of HTML Change Log comments) --> 
</html>
}}}